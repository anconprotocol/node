/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AnconSubmitterInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "proofs(bytes)": FunctionFragment;
    "relayNetworkHash()": FunctionFragment;
    "verifier()": FunctionFragment;
    "updateProtocolHeader(bytes)": FunctionFragment;
    "submitPacketWithProof(uint256[],bytes,bytes[][],uint256,bytes,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "proofs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "relayNetworkHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProtocolHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPacketWithProof",
    values: [
      BigNumberish[],
      BytesLike,
      BytesLike[][],
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayNetworkHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPacketWithProof",
    data: BytesLike
  ): Result;

  events: {
    "ProofPacketSubmitted()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProofPacketSubmitted"): EventFragment;
}

export type ProofPacketSubmittedEvent = TypedEvent<[], {}>;

export type ProofPacketSubmittedEventFilter =
  TypedEventFilter<ProofPacketSubmittedEvent>;

export interface AnconSubmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AnconSubmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    proofs(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    relayNetworkHash(overrides?: CallOverrides): Promise<[string]>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    updateProtocolHeader(
      rootHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitPacketWithProof(
      leafOpUint: BigNumberish[],
      prefix: BytesLike,
      existenceProofInnerOp: BytesLike[][],
      existenceProofInnerOpHash: BigNumberish,
      key: BytesLike,
      value: BytesLike,
      packet: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  proofs(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  relayNetworkHash(overrides?: CallOverrides): Promise<string>;

  verifier(overrides?: CallOverrides): Promise<string>;

  updateProtocolHeader(
    rootHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitPacketWithProof(
    leafOpUint: BigNumberish[],
    prefix: BytesLike,
    existenceProofInnerOp: BytesLike[][],
    existenceProofInnerOpHash: BigNumberish,
    key: BytesLike,
    value: BytesLike,
    packet: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    proofs(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    relayNetworkHash(overrides?: CallOverrides): Promise<string>;

    verifier(overrides?: CallOverrides): Promise<string>;

    updateProtocolHeader(
      rootHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitPacketWithProof(
      leafOpUint: BigNumberish[],
      prefix: BytesLike,
      existenceProofInnerOp: BytesLike[][],
      existenceProofInnerOpHash: BigNumberish,
      key: BytesLike,
      value: BytesLike,
      packet: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ProofPacketSubmitted()"(): ProofPacketSubmittedEventFilter;
    ProofPacketSubmitted(): ProofPacketSubmittedEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proofs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    relayNetworkHash(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    updateProtocolHeader(
      rootHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitPacketWithProof(
      leafOpUint: BigNumberish[],
      prefix: BytesLike,
      existenceProofInnerOp: BytesLike[][],
      existenceProofInnerOpHash: BigNumberish,
      key: BytesLike,
      value: BytesLike,
      packet: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proofs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayNetworkHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateProtocolHeader(
      rootHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitPacketWithProof(
      leafOpUint: BigNumberish[],
      prefix: BytesLike,
      existenceProofInnerOp: BytesLike[][],
      existenceProofInnerOpHash: BigNumberish,
      key: BytesLike,
      value: BytesLike,
      packet: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICredentialRegistryInterface extends utils.Interface {
  functions: {
    "registerCredential(address,address,bytes32,uint256,uint256,bytes)": FunctionFragment;
    "revokeCredential(bytes32)": FunctionFragment;
    "status(address,bytes32)": FunctionFragment;
    "exist(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "registerCredential",
    values: [string, string, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCredential",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "status",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exist",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exist", data: BytesLike): Result;

  events: {
    "CredentialRegistered(bytes32,address,address,uint256)": EventFragment;
    "CredentialRevoked(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CredentialRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CredentialRevoked"): EventFragment;
}

export type CredentialRegisteredEvent = TypedEvent<
  [string, string, string, BigNumber],
  { credentialHash: string; by: string; id: string; iat: BigNumber }
>;

export type CredentialRegisteredEventFilter =
  TypedEventFilter<CredentialRegisteredEvent>;

export type CredentialRevokedEvent = TypedEvent<
  [string, string, BigNumber],
  { credentialHash: string; by: string; date: BigNumber }
>;

export type CredentialRevokedEventFilter =
  TypedEventFilter<CredentialRevokedEvent>;

export interface ICredentialRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICredentialRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    registerCredential(
      issuer: string,
      subject: string,
      credentialHash: BytesLike,
      from: BigNumberish,
      exp: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeCredential(
      credentialHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(
      issuer: string,
      _credentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exist(
      credentialHash: BytesLike,
      issuer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  registerCredential(
    issuer: string,
    subject: string,
    credentialHash: BytesLike,
    from: BigNumberish,
    exp: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeCredential(
    credentialHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(
    issuer: string,
    _credentialHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exist(
    credentialHash: BytesLike,
    issuer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    registerCredential(
      issuer: string,
      subject: string,
      credentialHash: BytesLike,
      from: BigNumberish,
      exp: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeCredential(
      credentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    status(
      issuer: string,
      _credentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exist(
      credentialHash: BytesLike,
      issuer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CredentialRegistered(bytes32,address,address,uint256)"(
      credentialHash?: BytesLike | null,
      by?: null,
      id?: null,
      iat?: null
    ): CredentialRegisteredEventFilter;
    CredentialRegistered(
      credentialHash?: BytesLike | null,
      by?: null,
      id?: null,
      iat?: null
    ): CredentialRegisteredEventFilter;

    "CredentialRevoked(bytes32,address,uint256)"(
      credentialHash?: BytesLike | null,
      by?: null,
      date?: null
    ): CredentialRevokedEventFilter;
    CredentialRevoked(
      credentialHash?: BytesLike | null,
      by?: null,
      date?: null
    ): CredentialRevokedEventFilter;
  };

  estimateGas: {
    registerCredential(
      issuer: string,
      subject: string,
      credentialHash: BytesLike,
      from: BigNumberish,
      exp: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeCredential(
      credentialHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(
      issuer: string,
      _credentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exist(
      credentialHash: BytesLike,
      issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    registerCredential(
      issuer: string,
      subject: string,
      credentialHash: BytesLike,
      from: BigNumberish,
      exp: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeCredential(
      credentialHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(
      issuer: string,
      _credentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exist(
      credentialHash: BytesLike,
      issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

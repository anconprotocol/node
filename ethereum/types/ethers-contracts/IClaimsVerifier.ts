/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VerifiableCredentialStruct = {
  issuer: string;
  subject: string;
  data: BytesLike;
  validFrom: BigNumberish;
  validTo: BigNumberish;
};

export type VerifiableCredentialStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  issuer: string;
  subject: string;
  data: string;
  validFrom: BigNumber;
  validTo: BigNumber;
};

export interface IClaimsVerifierInterface extends utils.Interface {
  functions: {
    "verifyCredential((address,address,bytes,uint256,uint256),uint8,bytes32,bytes32)": FunctionFragment;
    "verifySigner((address,address,bytes,uint256,uint256),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "verifyCredential",
    values: [VerifiableCredentialStruct, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySigner",
    values: [VerifiableCredentialStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySigner",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IClaimsVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IClaimsVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    verifyCredential(
      vc: VerifiableCredentialStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean]>;

    verifySigner(
      vc: VerifiableCredentialStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  verifyCredential(
    vc: VerifiableCredentialStruct,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean]>;

  verifySigner(
    vc: VerifiableCredentialStruct,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    verifyCredential(
      vc: VerifiableCredentialStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean]>;

    verifySigner(
      vc: VerifiableCredentialStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    verifyCredential(
      vc: VerifiableCredentialStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySigner(
      vc: VerifiableCredentialStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    verifyCredential(
      vc: VerifiableCredentialStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySigner(
      vc: VerifiableCredentialStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TCRInterface extends utils.Interface {
  functions: {
    "applyStageLen()": FunctionFragment;
    "commitStageLen()": FunctionFragment;
    "listingNames(uint256)": FunctionFragment;
    "minDeposit()": FunctionFragment;
    "name()": FunctionFragment;
    "pollNonce()": FunctionFragment;
    "token()": FunctionFragment;
    "isWhitelisted(bytes32)": FunctionFragment;
    "appWasMade(bytes32)": FunctionFragment;
    "getAllListings()": FunctionFragment;
    "getDetails()": FunctionFragment;
    "getListingDetails(bytes32)": FunctionFragment;
    "propose(bytes32,uint256,string)": FunctionFragment;
    "challenge(bytes32,uint256)": FunctionFragment;
    "vote(bytes32,uint256,bool)": FunctionFragment;
    "canBeWhitelisted(bytes32)": FunctionFragment;
    "updateStatus(bytes32)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyStageLen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitStageLen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listingNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pollNonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "appWasMade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "canBeWhitelisted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyStageLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitStageLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pollNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appWasMade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canBeWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;

  events: {
    "ChallengeCompleted(bytes32,uint256,address)": EventFragment;
    "OnApplication(bytes32,uint256,string,address)": EventFragment;
    "ResolvedChallenge(bytes32,uint256,address)": EventFragment;
    "RewardClaimed(uint256,uint256,address)": EventFragment;
    "Voted(bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnApplication"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolvedChallenge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export type ChallengeCompletedEvent = TypedEvent<
  [string, BigNumber, string],
  { listingHash: string; challengeId: BigNumber; challenger: string }
>;

export type ChallengeCompletedEventFilter =
  TypedEventFilter<ChallengeCompletedEvent>;

export type OnApplicationEvent = TypedEvent<
  [string, BigNumber, string, string],
  { listingHash: string; deposit: BigNumber; data: string; applicant: string }
>;

export type OnApplicationEventFilter = TypedEventFilter<OnApplicationEvent>;

export type ResolvedChallengeEvent = TypedEvent<
  [string, BigNumber, string],
  { listingHash: string; challengeId: BigNumber; resolver: string }
>;

export type ResolvedChallengeEventFilter =
  TypedEventFilter<ResolvedChallengeEvent>;

export type RewardClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { challengeId: BigNumber; reward: BigNumber; voter: string }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type VotedEvent = TypedEvent<
  [string, BigNumber, string],
  { listingHash: string; challengeId: BigNumber; voter: string }
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface TCR extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TCRInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyStageLen(overrides?: CallOverrides): Promise<[BigNumber]>;

    commitStageLen(overrides?: CallOverrides): Promise<[BigNumber]>;

    listingNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pollNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    isWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { whitelisted: boolean }>;

    appWasMade(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    getAllListings(overrides?: CallOverrides): Promise<[string[]]>;

    getDetails(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    getListingDetails(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber, BigNumber, string]>;

    propose(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    challenge(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _choice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canBeWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateStatus(
      _listingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      challengeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applyStageLen(overrides?: CallOverrides): Promise<BigNumber>;

  commitStageLen(overrides?: CallOverrides): Promise<BigNumber>;

  listingNames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  minDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  pollNonce(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  isWhitelisted(
    _listingHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appWasMade(
    _listingHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAllListings(overrides?: CallOverrides): Promise<string[]>;

  getDetails(
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

  getListingDetails(
    _listingHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string, BigNumber, BigNumber, string]>;

  propose(
    _listingHash: BytesLike,
    _amount: BigNumberish,
    _data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  challenge(
    _listingHash: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    _listingHash: BytesLike,
    _amount: BigNumberish,
    _choice: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canBeWhitelisted(
    _listingHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateStatus(
    _listingHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    challengeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyStageLen(overrides?: CallOverrides): Promise<BigNumber>;

    commitStageLen(overrides?: CallOverrides): Promise<BigNumber>;

    listingNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    minDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pollNonce(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    isWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appWasMade(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllListings(overrides?: CallOverrides): Promise<string[]>;

    getDetails(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber, BigNumber, BigNumber]>;

    getListingDetails(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber, BigNumber, string]>;

    propose(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    challenge(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _choice: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    canBeWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateStatus(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      challengeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChallengeCompleted(bytes32,uint256,address)"(
      listingHash?: BytesLike | null,
      challengeId?: null,
      challenger?: string | null
    ): ChallengeCompletedEventFilter;
    ChallengeCompleted(
      listingHash?: BytesLike | null,
      challengeId?: null,
      challenger?: string | null
    ): ChallengeCompletedEventFilter;

    "OnApplication(bytes32,uint256,string,address)"(
      listingHash?: BytesLike | null,
      deposit?: null,
      data?: null,
      applicant?: string | null
    ): OnApplicationEventFilter;
    OnApplication(
      listingHash?: BytesLike | null,
      deposit?: null,
      data?: null,
      applicant?: string | null
    ): OnApplicationEventFilter;

    "ResolvedChallenge(bytes32,uint256,address)"(
      listingHash?: BytesLike | null,
      challengeId?: null,
      resolver?: string | null
    ): ResolvedChallengeEventFilter;
    ResolvedChallenge(
      listingHash?: BytesLike | null,
      challengeId?: null,
      resolver?: string | null
    ): ResolvedChallengeEventFilter;

    "RewardClaimed(uint256,uint256,address)"(
      challengeId?: BigNumberish | null,
      reward?: null,
      voter?: string | null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      challengeId?: BigNumberish | null,
      reward?: null,
      voter?: string | null
    ): RewardClaimedEventFilter;

    "Voted(bytes32,uint256,address)"(
      listingHash?: BytesLike | null,
      challengeId?: null,
      voter?: string | null
    ): VotedEventFilter;
    Voted(
      listingHash?: BytesLike | null,
      challengeId?: null,
      voter?: string | null
    ): VotedEventFilter;
  };

  estimateGas: {
    applyStageLen(overrides?: CallOverrides): Promise<BigNumber>;

    commitStageLen(overrides?: CallOverrides): Promise<BigNumber>;

    listingNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pollNonce(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appWasMade(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllListings(overrides?: CallOverrides): Promise<BigNumber>;

    getDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getListingDetails(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    challenge(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _choice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canBeWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateStatus(
      _listingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      challengeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyStageLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitStageLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingNames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appWasMade(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListingDetails(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    challenge(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _listingHash: BytesLike,
      _amount: BigNumberish,
      _choice: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canBeWhitelisted(
      _listingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateStatus(
      _listingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      challengeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

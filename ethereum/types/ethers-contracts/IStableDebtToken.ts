/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IStableDebtTokenInterface extends utils.Interface {
  functions: {
    "approveDelegation(address,uint256)": FunctionFragment;
    "borrowAllowance(address,address)": FunctionFragment;
    "mint(address,address,uint256,uint256)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "getAverageStableRate()": FunctionFragment;
    "getUserStableRate(address)": FunctionFragment;
    "getUserLastUpdated(address)": FunctionFragment;
    "getSupplyData()": FunctionFragment;
    "getTotalSupplyLastUpdated()": FunctionFragment;
    "getTotalSupplyAndAvgRate()": FunctionFragment;
    "principalBalanceOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveDelegation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageStableRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStableRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLastUpdated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyLastUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyAndAvgRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "principalBalanceOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAverageStableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyAndAvgRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "principalBalanceOf",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Mint(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    user: string;
    amount: BigNumber;
    currentBalance: BigNumber;
    balanceIncrease: BigNumber;
    avgStableRate: BigNumber;
    newTotalSupply: BigNumber;
  }
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export type MintEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    user: string;
    onBehalfOf: string;
    amount: BigNumber;
    currentBalance: BigNumber;
    balanceIncrease: BigNumber;
    newRate: BigNumber;
    avgStableRate: BigNumber;
    newTotalSupply: BigNumber;
  }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface IStableDebtToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStableDebtTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * delegates borrowing power to a user on the specific debt token
     * @param amount the maximum amount being delegated. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)*
     * @param delegatee the address receiving the delegated borrowing power
     */
    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * returns the borrow allowance of the user
     * @param fromUser The user to giving allowance
     * @param toUser The user to give allowance to
     */
    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Mints debt token to the `onBehalfOf` address. - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens to mint
     * @param onBehalfOf The address receiving the debt tokens
     * @param rate The rate of the debt being minted*
     * @param user The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise
     */
    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Burns debt of `user` - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens getting burned*
     * @param user The address of the user getting his debt burned
     */
    burn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the average rate of all the stable rate loans.
     */
    getAverageStableRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the stable rate of the user debt
     */
    getUserStableRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the timestamp of the last update of the user
     */
    getUserLastUpdated(
      user: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     * Returns the principal, the total supply and the average stable rate*
     */
    getSupplyData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, number]>;

    /**
     * Returns the timestamp of the last update of the total supply
     */
    getTotalSupplyLastUpdated(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Returns the total supply and the average stable rate*
     */
    getTotalSupplyAndAvgRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Returns the principal debt balance of the user
     */
    principalBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  /**
   * delegates borrowing power to a user on the specific debt token
   * @param amount the maximum amount being delegated. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)*
   * @param delegatee the address receiving the delegated borrowing power
   */
  approveDelegation(
    delegatee: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * returns the borrow allowance of the user
   * @param fromUser The user to giving allowance
   * @param toUser The user to give allowance to
   */
  borrowAllowance(
    fromUser: string,
    toUser: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Mints debt token to the `onBehalfOf` address. - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
   * @param amount The amount of debt tokens to mint
   * @param onBehalfOf The address receiving the debt tokens
   * @param rate The rate of the debt being minted*
   * @param user The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise
   */
  mint(
    user: string,
    onBehalfOf: string,
    amount: BigNumberish,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Burns debt of `user` - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
   * @param amount The amount of debt tokens getting burned*
   * @param user The address of the user getting his debt burned
   */
  burn(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the average rate of all the stable rate loans.
   */
  getAverageStableRate(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the stable rate of the user debt
   */
  getUserStableRate(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the timestamp of the last update of the user
   */
  getUserLastUpdated(user: string, overrides?: CallOverrides): Promise<number>;

  /**
   * Returns the principal, the total supply and the average stable rate*
   */
  getSupplyData(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, number]>;

  /**
   * Returns the timestamp of the last update of the total supply
   */
  getTotalSupplyLastUpdated(overrides?: CallOverrides): Promise<number>;

  /**
   * Returns the total supply and the average stable rate*
   */
  getTotalSupplyAndAvgRate(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  /**
   * Returns the principal debt balance of the user
   */
  principalBalanceOf(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    /**
     * delegates borrowing power to a user on the specific debt token
     * @param amount the maximum amount being delegated. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)*
     * @param delegatee the address receiving the delegated borrowing power
     */
    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the borrow allowance of the user
     * @param fromUser The user to giving allowance
     * @param toUser The user to give allowance to
     */
    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Mints debt token to the `onBehalfOf` address. - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens to mint
     * @param onBehalfOf The address receiving the debt tokens
     * @param rate The rate of the debt being minted*
     * @param user The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise
     */
    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Burns debt of `user` - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens getting burned*
     * @param user The address of the user getting his debt burned
     */
    burn(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the average rate of all the stable rate loans.
     */
    getAverageStableRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the stable rate of the user debt
     */
    getUserStableRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the timestamp of the last update of the user
     */
    getUserLastUpdated(
      user: string,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * Returns the principal, the total supply and the average stable rate*
     */
    getSupplyData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, number]>;

    /**
     * Returns the timestamp of the last update of the total supply
     */
    getTotalSupplyLastUpdated(overrides?: CallOverrides): Promise<number>;

    /**
     * Returns the total supply and the average stable rate*
     */
    getTotalSupplyAndAvgRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Returns the principal debt balance of the user
     */
    principalBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Burn(address,uint256,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      currentBalance?: null,
      balanceIncrease?: null,
      avgStableRate?: null,
      newTotalSupply?: null
    ): BurnEventFilter;
    Burn(
      user?: string | null,
      amount?: null,
      currentBalance?: null,
      balanceIncrease?: null,
      avgStableRate?: null,
      newTotalSupply?: null
    ): BurnEventFilter;

    "Mint(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      onBehalfOf?: string | null,
      amount?: null,
      currentBalance?: null,
      balanceIncrease?: null,
      newRate?: null,
      avgStableRate?: null,
      newTotalSupply?: null
    ): MintEventFilter;
    Mint(
      user?: string | null,
      onBehalfOf?: string | null,
      amount?: null,
      currentBalance?: null,
      balanceIncrease?: null,
      newRate?: null,
      avgStableRate?: null,
      newTotalSupply?: null
    ): MintEventFilter;
  };

  estimateGas: {
    /**
     * delegates borrowing power to a user on the specific debt token
     * @param amount the maximum amount being delegated. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)*
     * @param delegatee the address receiving the delegated borrowing power
     */
    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * returns the borrow allowance of the user
     * @param fromUser The user to giving allowance
     * @param toUser The user to give allowance to
     */
    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Mints debt token to the `onBehalfOf` address. - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens to mint
     * @param onBehalfOf The address receiving the debt tokens
     * @param rate The rate of the debt being minted*
     * @param user The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise
     */
    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Burns debt of `user` - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens getting burned*
     * @param user The address of the user getting his debt burned
     */
    burn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the average rate of all the stable rate loans.
     */
    getAverageStableRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the stable rate of the user debt
     */
    getUserStableRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the timestamp of the last update of the user
     */
    getUserLastUpdated(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the principal, the total supply and the average stable rate*
     */
    getSupplyData(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the timestamp of the last update of the total supply
     */
    getTotalSupplyLastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the total supply and the average stable rate*
     */
    getTotalSupplyAndAvgRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the principal debt balance of the user
     */
    principalBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * delegates borrowing power to a user on the specific debt token
     * @param amount the maximum amount being delegated. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)*
     * @param delegatee the address receiving the delegated borrowing power
     */
    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * returns the borrow allowance of the user
     * @param fromUser The user to giving allowance
     * @param toUser The user to give allowance to
     */
    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Mints debt token to the `onBehalfOf` address. - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens to mint
     * @param onBehalfOf The address receiving the debt tokens
     * @param rate The rate of the debt being minted*
     * @param user The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise
     */
    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Burns debt of `user` - The resulting rate is the weighted average between the rate of the new debt and the rate of the previous debt
     * @param amount The amount of debt tokens getting burned*
     * @param user The address of the user getting his debt burned
     */
    burn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the average rate of all the stable rate loans.
     */
    getAverageStableRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the stable rate of the user debt
     */
    getUserStableRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the timestamp of the last update of the user
     */
    getUserLastUpdated(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the principal, the total supply and the average stable rate*
     */
    getSupplyData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the timestamp of the last update of the total supply
     */
    getTotalSupplyLastUpdated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the total supply and the average stable rate*
     */
    getTotalSupplyAndAvgRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the principal debt balance of the user
     */
    principalBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

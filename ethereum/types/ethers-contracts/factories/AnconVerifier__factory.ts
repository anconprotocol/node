/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconVerifier, AnconVerifierInterface } from "../AnconVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "onlyOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "_leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes[][]",
        name: "_innerOp",
        type: "bytes[][]",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
    ],
    name: "convertProof",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "existenceProofInnerOp",
        type: "bytes[][]",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "existenceProofInnerOp",
        type: "bytes[][]",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516200254d3803806200254d83398101604081905261003191610056565b600080546001600160a01b0319166001600160a01b0392909216919091179055610086565b60006020828403121561006857600080fd5b81516001600160a01b038116811461007f57600080fd5b9392505050565b6124b780620000966000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a91eaa3611610050578063a91eaa36146100fa578063b0d264e71461011d578063b94063601461013257600080fd5b806327dcd78c146100775780634987dfd3146100955780638da5cb5b146100b5575b600080fd5b61007f610152565b60405161008c919061170b565b60405180910390f35b6100a86100a3366004611a8f565b610266565b60405161008c9190611b69565b6000546100d59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b61010d610108366004611b7c565b61028f565b604051901515815260200161008c565b61013061012b366004612061565b6102c7565b005b610145610140366004612133565b61043b565b60405161008c919061220d565b61015a61152f565b61016261152f565b60408051600280825260608201835260009260208301908036833701905050905060008160008151811061019857610198612314565b6020026020010181815250506001816001815181106101b9576101b9612314565b6020026020010181815250506040518060c00160405280600115158152602001600160058111156101ec576101ec61160f565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b606060006102788484898b8a8a61043b565b9050610283816106e1565b98975050505050505050565b6000806102a087878c8e8d8d61043b565b90506102b6816102ae610152565b8787876102c7565b5060019a9950505050505050505050565b6102d18585610750565b6102df856020015183610878565b6103305760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064015b60405180910390fd5b61033e856040015182610878565b6103b05760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f660000000000000000000000000000000000000000000000000000000000006064820152608401610327565b6103c26103bc866106e1565b84610878565b6104345760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f7400000000000000000000000000000000000000006064820152608401610327565b5050505050565b610443611563565b60006040518060c001604052806001151581526020018660008151811061046c5761046c612314565b602002602001015160058111156104855761048561160f565b60058111156104965761049661160f565b8152602001866001815181106104ae576104ae612314565b602002602001015160058111156104c7576104c761160f565b60058111156104d8576104d861160f565b8152602001866002815181106104f0576104f0612314565b602002602001015160058111156105095761050961160f565b600581111561051a5761051a61160f565b81526020018660038151811061053257610532612314565b6020026020010151600881111561054b5761054b61160f565b600881111561055c5761055c61160f565b81526020018781525090506000845167ffffffffffffffff811115610583576105836117e7565b6040519080825280602002602001820160405280156105d757816020015b60408051608081018252600080825260208201526060918101829052818101919091528152602001906001900390816105a15790505b50905060005b85518110156106af5760008682815181106105fa576105fa612314565b60200260200101519050604051806080016040528060011515815260200187600581111561062a5761062a61160f565b600581111561063b5761063b61160f565b81526020018260008151811061065357610653612314565b602002602001015181526020018260018151811061067357610673612314565b602002602001015181525083838151811061069057610690612314565b60200260200101819052505080806106a790612340565b9150506105dd565b506040805160a08101825260018152602081019a909a5289019790975260608801525050505060808301919091525090565b606060006106fc8360600151846020015185604001516108a5565b905060005b836080015151811015610749576107358460800151828151811061072757610727612314565b6020026020010151836109cf565b91508061074181612340565b915050610701565b5092915050565b61075e826060015182610a7e565b606081015115806107785750806060015182608001515110155b6107c45760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610327565b604081015115806107de5750806040015182608001515110155b61082a5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610327565b60005b826080015151811015610873576108618360800151828151811061085357610853612314565b602002602001015183610ccc565b8061086b81612340565b91505061082d565b505050565b6000815183511461088b5750600061089f565b508151602082810182902090840191909120145b92915050565b606060008351116108f85760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b65790000000000000000000000000000006044820152606401610327565b60008251116109495760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c7565000000000000000000000000006044820152606401610327565b60008460a001516109638660400151876080015187610e97565b60405160200161097492919061235b565b6040516020818303038152906040526109968660600151876080015186610e97565b6040516020016109a792919061235b565b60405160208183030381529060405290506109c6856020015182610eb4565b95945050505050565b60606000825111610a225760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c75650000000000006044820152606401610327565b610a778360200151846040015184604051602001610a4192919061235b565b60408051601f19818403018152908290526060870151610a639260200161235b565b604051602081830303815290604052610eb4565b9392505050565b8051602001516005811115610a9557610a9561160f565b82602001516005811115610aab57610aab61160f565b14610af85760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610327565b8051604001516005811115610b0f57610b0f61160f565b82604001516005811115610b2557610b2561160f565b14610b725760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610327565b8051606001516005811115610b8957610b8961160f565b82606001516005811115610b9f57610b9f61160f565b14610bec5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610327565b8051608001516008811115610c0357610c0361160f565b82608001516008811115610c1957610c1961160f565b14610c665760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f700000000000006044820152606401610327565b610c7c8260a00151826000015160a001516110d2565b610cc85760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e67207072656669780000000000000000006044820152606401610327565b5050565b8051602001516005811115610ce357610ce361160f565b82602001516005811115610cf957610cf961160f565b14610d465760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610327565b610d5c8260400151826000015160a001516110d2565b15610da95760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e672070726566697800000000000000006044820152606401610327565b8060200151604001518260400151511015610e065760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610327565b6020808201519081015190515160009190610e239060019061238a565b610e2d91906123a1565b905080826020015160600151610e4391906123c0565b83604001515111156108735760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610327565b6060610eac83610ea78685611195565b6111c2565b949350505050565b60606001836005811115610eca57610eca61160f565b1415610f2f57610f28600283604051610ee391906123d8565b602060405180830381855afa158015610f00573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610f2391906123f4565b611356565b905061089f565b6002836005811115610f4357610f4361160f565b1415610f915760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e746564000000000000000000006044820152606401610327565b6004836005811115610fa557610fa561160f565b1415610ff957610f28600383604051610fbe91906123d8565b602060405180830381855afa158015610fdb573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916611356565b600583600581111561100d5761100d61160f565b141561108a57600060028360405161102591906123d8565b602060405180830381855afa158015611042573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061106591906123f4565b9050611082600361107583611356565b604051610fbe91906123d8565b91505061089f565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f7000000000000000000000000000006044820152606401610327565b60008151835110156110e65750600061089f565b60005b825181101561118b5782818151811061110457611104612314565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684828151811061114357611143612314565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461117957600091505061089f565b8061118381612340565b9150506110e9565b5060019392505050565b606060008360058111156111ab576111ab61160f565b14156111b857508061089f565b610a778383610eb4565b606060008360088111156111d8576111d861160f565b14156111e557508061089f565b60018360088111156111f9576111f961160f565b1415611231576112098251611380565b8260405160200161121b92919061235b565b604051602081830303815290604052905061089f565b60078360088111156112455761124561160f565b14156112a357815160201461129c5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642033322062797465730000000000000000000000000000006044820152606401610327565b508061089f565b60088360088111156112b7576112b761160f565b141561130e57815160401461129c5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642036342062797465730000000000000000000000000000006044820152606401610327565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f700000000000000000000000006044820152606401610327565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156113be5760078267ffffffffffffffff16901c91506001816113b7919061240d565b9050611386565b60008167ffffffffffffffff1667ffffffffffffffff8111156113e3576113e36117e7565b6040519080825280601f01601f19166020018201604052801561140d576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156114ab5783607f1660801760f81b828267ffffffffffffffff168151811061145857611458612314565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806114a390612430565b915050611416565b507f7f00000000000000000000000000000000000000000000000000000000000000816114d9600185612458565b67ffffffffffffffff16815181106114f3576114f3612314565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b604051806080016040528061154261159a565b815260200161154f6115c9565b815260200160008152602001600081525090565b6040518060a00160405280600015158152602001606081526020016060815260200161158d61159a565b8152602001606081525090565b6040805160c081019091526000808252602082019081526020016000815260200160008152602001600061158d565b6040518060c0016040528060608152602001600081526020016000815260200160008152602001606081526020016000600581111561160a5761160a61160f565b905290565b634e487b7160e01b600052602160045260246000fd5b600681106116355761163561160f565b9052565b60005b8381101561165457818101518382015260200161163c565b83811115611663576000848401525b50505050565b60008151808452611681816020860160208601611639565b601f01601f19169290920160200192915050565b805115158252600060208201516116af6020850182611625565b5060408201516116c26040850182611625565b5060608201516116d56060850182611625565b506080820151600981106116eb576116eb61160f565b8060808501525060a082015160c060a0850152610eac60c0850182611669565b60006020808352835160808285015261172760a0850182611695565b85830151858203601f19016040870152805160c0808452815190840181905292935090919084019060009060e08501905b808310156117785783518252928601926001929092019190860190611758565b50858401518686015260408401516040860152606084015160608601526080840151955084810360808601526117ae8187611669565b955050505060a081015190506117c760a0830182611625565b505060408401516060840152606084015160808401528091505092915050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715611820576118206117e7565b60405290565b6040516080810167ffffffffffffffff81118282101715611820576118206117e7565b60405160a0810167ffffffffffffffff81118282101715611820576118206117e7565b604051601f8201601f1916810167ffffffffffffffff81118282101715611895576118956117e7565b604052919050565b600067ffffffffffffffff8211156118b7576118b76117e7565b5060051b60200190565b600082601f8301126118d257600080fd5b813560206118e76118e28361189d565b61186c565b82815260059290921b8401810191818101908684111561190657600080fd5b8286015b84811015611921578035835291830191830161190a565b509695505050505050565b600082601f83011261193d57600080fd5b813567ffffffffffffffff811115611957576119576117e7565b61196a601f8201601f191660200161186c565b81815284602083860101111561197f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126119ad57600080fd5b813560206119bd6118e28361189d565b82815260059290921b840181019181810190868411156119dc57600080fd5b8286015b8481101561192157803567ffffffffffffffff80821115611a0057600080fd5b818901915089603f830112611a1457600080fd5b85820135611a246118e28261189d565b81815260059190911b830160400190878101908c831115611a4457600080fd5b604085015b83811015611a7d57803585811115611a6057600080fd5b611a6f8f6040838a010161192c565b845250918901918901611a49565b508752505050928401925083016119e0565b60008060008060008060c08789031215611aa857600080fd5b863567ffffffffffffffff80821115611ac057600080fd5b611acc8a838b016118c1565b97506020890135915080821115611ae257600080fd5b611aee8a838b0161192c565b96506040890135915080821115611b0457600080fd5b611b108a838b0161199c565b9550606089013594506080890135915080821115611b2d57600080fd5b611b398a838b0161192c565b935060a0890135915080821115611b4f57600080fd5b50611b5c89828a0161192c565b9150509295509295509295565b602081526000610a776020830184611669565b60008060008060008060008060006101208a8c031215611b9b57600080fd5b893567ffffffffffffffff80821115611bb357600080fd5b611bbf8d838e016118c1565b9a5060208c0135915080821115611bd557600080fd5b611be18d838e0161192c565b995060408c0135915080821115611bf757600080fd5b611c038d838e0161199c565b985060608c0135975060808c0135915080821115611c2057600080fd5b611c2c8d838e0161192c565b965060a08c0135915080821115611c4257600080fd5b611c4e8d838e0161192c565b955060c08c0135915080821115611c6457600080fd5b611c708d838e0161192c565b945060e08c0135915080821115611c8657600080fd5b611c928d838e0161192c565b93506101008c0135915080821115611ca957600080fd5b50611cb68c828d0161192c565b9150509295985092959850929598565b80358015158114611cd657600080fd5b919050565b803560068110611cd657600080fd5b600060c08284031215611cfc57600080fd5b611d046117fd565b9050611d0f82611cc6565b8152611d1d60208301611cdb565b6020820152611d2e60408301611cdb565b6040820152611d3f60608301611cdb565b6060820152608082013560098110611d5657600080fd5b608082015260a082013567ffffffffffffffff811115611d7557600080fd5b611d818482850161192c565b60a08301525092915050565b600082601f830112611d9e57600080fd5b81356020611dae6118e28361189d565b82815260059290921b84018101918181019086841115611dcd57600080fd5b8286015b8481101561192157803567ffffffffffffffff80821115611df25760008081fd5b908801906080828b03601f1901811315611e0c5760008081fd5b611e14611826565b611e1f888501611cc6565b81526040611e2e818601611cdb565b8983015260608086013585811115611e465760008081fd5b611e548f8c838a010161192c565b8484015250928501359284841115611e6e57600091508182fd5b611e7c8e8b8689010161192c565b90830152508652505050918301918301611dd1565b600060a08284031215611ea357600080fd5b611eab611849565b9050611eb682611cc6565b8152602082013567ffffffffffffffff80821115611ed357600080fd5b611edf8583860161192c565b60208401526040840135915080821115611ef857600080fd5b611f048583860161192c565b60408401526060840135915080821115611f1d57600080fd5b611f2985838601611cea565b60608401526080840135915080821115611f4257600080fd5b50611f4f84828501611d8d565b60808301525092915050565b600060808284031215611f6d57600080fd5b611f75611826565b9050813567ffffffffffffffff80821115611f8f57600080fd5b611f9b85838601611cea565b83526020840135915080821115611fb157600080fd5b9083019060c08286031215611fc557600080fd5b611fcd6117fd565b823582811115611fdc57600080fd5b611fe8878286016118c1565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561201b57600080fd5b6120278782860161192c565b60808301525061203960a08401611cdb565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a0868803121561207957600080fd5b853567ffffffffffffffff8082111561209157600080fd5b61209d89838a01611e91565b965060208801359150808211156120b357600080fd5b6120bf89838a01611f5b565b955060408801359150808211156120d557600080fd5b6120e189838a0161192c565b945060608801359150808211156120f757600080fd5b61210389838a0161192c565b9350608088013591508082111561211957600080fd5b506121268882890161192c565b9150509295509295909350565b60008060008060008060c0878903121561214c57600080fd5b863567ffffffffffffffff8082111561216457600080fd5b6121708a838b0161192c565b9750602089013591508082111561218657600080fd5b6121928a838b0161192c565b965060408901359150808211156121a857600080fd5b6121b48a838b0161192c565b955060608901359150808211156121ca57600080fd5b6121d68a838b016118c1565b945060808901359150808211156121ec57600080fd5b506121f989828a0161199c565b92505060a087013590509295509295509295565b60006020808352835115158184015280840151604060a08186015261223560c0860183611669565b915080860151601f1960608188860301818901526122538584611669565b945080890151925060808289870301818a01526122708685611695565b8a8201518a8203850160a08c015280518083529197508801945087870190600581901b8801890160005b8281101561230357868a830301845287518051151583528b8101516122c18d850182611625565b5089810151868b8501526122d787850182611669565b91880151848303858a01529190506122ef8183611669565b998d0199958d01959350505060010161229a565b509c9b505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156123545761235461232a565b5060010190565b6000835161236d818460208801611639565b835190830190612381818360208801611639565b01949350505050565b60008282101561239c5761239c61232a565b500390565b60008160001904831182151516156123bb576123bb61232a565b500290565b600082198211156123d3576123d361232a565b500190565b600082516123ea818460208701611639565b9190910192915050565b60006020828403121561240657600080fd5b5051919050565b600067ffffffffffffffff8083168185168083038211156123815761238161232a565b600067ffffffffffffffff8083168181141561244e5761244e61232a565b6001019392505050565b600067ffffffffffffffff838116908316818110156124795761247961232a565b03939250505056fea26469706673582212209e3eb4158991549a0622de852c87282ddff45f6edef1fd6291861fd397f4831b64736f6c634300080a0033";

type AnconVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconVerifier__factory extends ContractFactory {
  constructor(...args: AnconVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconVerifier> {
    return super.deploy(onlyOwner, overrides || {}) as Promise<AnconVerifier>;
  }
  getDeployTransaction(
    onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(onlyOwner, overrides || {});
  }
  attach(address: string): AnconVerifier {
    return super.attach(address) as AnconVerifier;
  }
  connect(signer: Signer): AnconVerifier__factory {
    return super.connect(signer) as AnconVerifier__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconVerifierInterface {
    return new utils.Interface(_abi) as AnconVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconVerifier {
    return new Contract(address, _abi, signerOrProvider) as AnconVerifier;
  }
}

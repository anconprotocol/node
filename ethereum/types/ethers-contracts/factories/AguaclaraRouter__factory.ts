/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AguaclaraRouter,
  AguaclaraRouterInterface,
} from "../AguaclaraRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_onlyOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "uri",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenID",
        type: "uint256",
      },
    ],
    name: "MetadataOwnershipChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "headers",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract AnconVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "existenceProofInnerOp",
        type: "bytes[][]",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packetMetadataUri",
        type: "bytes",
      },
    ],
    name: "verifyOwnershipReference",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "existenceProofInnerOp",
        type: "bytes[][]",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "sendMetadataOwnership",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";

type AguaclaraRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AguaclaraRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AguaclaraRouter__factory extends ContractFactory {
  constructor(...args: AguaclaraRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _onlyOwner: string,
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AguaclaraRouter> {
    return super.deploy(
      _onlyOwner,
      _verifier,
      overrides || {}
    ) as Promise<AguaclaraRouter>;
  }
  getDeployTransaction(
    _onlyOwner: string,
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_onlyOwner, _verifier, overrides || {});
  }
  attach(address: string): AguaclaraRouter {
    return super.attach(address) as AguaclaraRouter;
  }
  connect(signer: Signer): AguaclaraRouter__factory {
    return super.connect(signer) as AguaclaraRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AguaclaraRouterInterface {
    return new utils.Interface(_abi) as AguaclaraRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AguaclaraRouter {
    return new Contract(address, _abi, signerOrProvider) as AguaclaraRouter;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OnchainMetadata,
  OnchainMetadataInterface,
} from "../OnchainMetadata";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "image",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "owner",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "parent",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "sources",
        type: "bytes",
      },
    ],
    name: "AddOnchainMetadata",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "path",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "hexdata",
        type: "string",
      },
    ],
    name: "EncodeDagCbor",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "path",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "hexdata",
        type: "string",
      },
    ],
    name: "EncodeDagJson",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "proofKey",
        type: "string",
      },
      {
        internalType: "string",
        name: "proofValue",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadataUri",
        type: "string",
      },
    ],
    name: "setOnchainMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "didAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "_leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
    ],
    name: "registerL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "sum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "path",
        type: "string",
      },
      {
        internalType: "string",
        name: "hexdata",
        type: "string",
      },
    ],
    name: "encodeDagjsonBlock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610560806100206000396000f3fe60806040526004361061003f5760003560e01c806320b8c992146100445780636c34b7d714610075578063c584910914610095578063cad0899b146100b7575b600080fd5b61006061005236600461027c565b600098975050505050505050565b60405190151581526020015b60405180910390f35b34801561008157600080fd5b506100606100903660046103a1565b6100e8565b3480156100a157600080fd5b506100b56100b0366004610405565b505050565b005b3480156100c357600080fd5b506100da6100d236600461048d565b600092915050565b60405190815260200161006c565b60007f5e3f0aa6dd3625a554d642f9fc1781cce94357186a7f71c4049997f047910928838360405161011b9291906104fc565b60405180910390a150600192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156101845761018461012c565b604052919050565b600082601f83011261019d57600080fd5b813567ffffffffffffffff8111156101b7576101b761012c565b6101ca601f8201601f191660200161015b565b8181528460208386010111156101df57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261020d57600080fd5b8135602067ffffffffffffffff8211156102295761022961012c565b8160051b61023882820161015b565b928352848101820192828101908785111561025257600080fd5b83870192505b8483101561027157823582529183019190830190610258565b979650505050505050565b600080600080600080600080610100898b03121561029957600080fd5b883567ffffffffffffffff808211156102b157600080fd5b6102bd8c838d0161018c565b995060208b01359150808211156102d357600080fd5b6102df8c838d0161018c565b985060408b01359150808211156102f557600080fd5b6103018c838d0161018c565b975060608b013591508082111561031757600080fd5b6103238c838d0161018c565b965060808b013591508082111561033957600080fd5b6103458c838d016101fc565b955060a08b013591508082111561035b57600080fd5b6103678c838d0161018c565b945060c08b013591508082111561037d57600080fd5b5061038a8b828c0161018c565b92505060e089013590509295985092959890939650565b600080604083850312156103b457600080fd5b823567ffffffffffffffff808211156103cc57600080fd5b6103d88683870161018c565b935060208501359150808211156103ee57600080fd5b506103fb8582860161018c565b9150509250929050565b60008060006060848603121561041a57600080fd5b833567ffffffffffffffff8082111561043257600080fd5b61043e8783880161018c565b9450602086013591508082111561045457600080fd5b6104608783880161018c565b9350604086013591508082111561047657600080fd5b506104838682870161018c565b9150509250925092565b600080604083850312156104a057600080fd5b50508035926020909101359150565b6000815180845260005b818110156104d5576020818501810151868301820152016104b9565b818111156104e7576000602083870101525b50601f01601f19169290920160200192915050565b60408152600061050f60408301856104af565b828103602084015261052181856104af565b9594505050505056fea2646970667358221220642bc80d4c7021bddcd002643a9ef2d47ac002528f534f9b0e34110d1faaa89964736f6c634300080b0033";

type OnchainMetadataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnchainMetadataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnchainMetadata__factory extends ContractFactory {
  constructor(...args: OnchainMetadataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OnchainMetadata> {
    return super.deploy(overrides || {}) as Promise<OnchainMetadata>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OnchainMetadata {
    return super.attach(address) as OnchainMetadata;
  }
  connect(signer: Signer): OnchainMetadata__factory {
    return super.connect(signer) as OnchainMetadata__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnchainMetadataInterface {
    return new utils.Interface(_abi) as OnchainMetadataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OnchainMetadata {
    return new Contract(address, _abi, signerOrProvider) as OnchainMetadata;
  }
}

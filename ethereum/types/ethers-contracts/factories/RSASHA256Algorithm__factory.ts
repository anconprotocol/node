/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RSASHA256Algorithm,
  RSASHA256AlgorithmInterface,
} from "../RSASHA256Algorithm";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061073f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de8f50a114610030575b600080fd5b61004361003e366004610538565b610057565b604051901515815260200160405180910390f35b600060608060006100a260048b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506102f59050565b60ff169050801561016e576100f760058261ffff168c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294939250506103199050565b92506101676101078260056105e8565b61ffff9081169060059061011d9085168d61060e565b610127919061060e565b8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294939250506103199050565b9150610227565b6101b260058b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061039b9050565b90506101fe60078261ffff168c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294939250506103199050565b925061022461020e8260076105e8565b61ffff9081169060079061011d9085168d61060e565b91505b6000606061026c84868a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103c392505050565b90925090508180156102e557506102916020825161028a919061060e565b82906103de565b60028b8b6040516102a3929190610625565b602060405180830381855afa1580156102c0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906102e39190610635565b145b9c9b505050505050505050505050565b60008282815181106103095761030961064e565b016020015160f81c905092915050565b82516060906103288385610664565b111561033357600080fd5b60008267ffffffffffffffff81111561034e5761034e61067c565b6040519080825280601f01601f191660200182016040528015610378576020820181803683370190505b50905060208082019086860101610390828287610402565b509095945050505050565b81516000906103ab836002610664565b11156103b657600080fd5b50016002015161ffff1690565b600060606103d2838587610458565b91509150935093915050565b81516000906103ee836020610664565b11156103f957600080fd5b50016020015190565b6020811061043a5781518352610419602084610664565b9250610426602083610664565b915061043360208261060e565b9050610402565b905182516020929092036101000a6000190180199091169116179052565b60006060600085518551855188888860405160200161047c969594939291906106cd565b6040516020818303038152906040529050835167ffffffffffffffff8111156104a7576104a761067c565b6040519080825280601f01601f1916602001820160405280156104d1576020820181803683370190505b50915083516020830182516020840160055afa925050935093915050565b60008083601f84011261050157600080fd5b50813567ffffffffffffffff81111561051957600080fd5b60208301915083602082850101111561053157600080fd5b9250929050565b6000806000806000806060878903121561055157600080fd5b863567ffffffffffffffff8082111561056957600080fd5b6105758a838b016104ef565b9098509650602089013591508082111561058e57600080fd5b61059a8a838b016104ef565b909650945060408901359150808211156105b357600080fd5b506105c089828a016104ef565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b600061ffff808316818516808303821115610605576106056105d2565b01949350505050565b600082821015610620576106206105d2565b500390565b8183823760009101908152919050565b60006020828403121561064757600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008219821115610677576106776105d2565b500190565b634e487b7160e01b600052604160045260246000fd5b6000815160005b818110156106b35760208185018101518683015201610699565b818111156106c2576000828601525b509290920192915050565b86815285602082015284604082015260006106fd6106f76106f16060850188610692565b86610692565b84610692565b9897505050505050505056fea264697066735822122051dfd7ea7f0029a3ad20a7d07972d5fb77a2f0e78e6dc94d7b8c9aaea5e190a564736f6c634300080c0033";

type RSASHA256AlgorithmConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RSASHA256AlgorithmConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RSASHA256Algorithm__factory extends ContractFactory {
  constructor(...args: RSASHA256AlgorithmConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RSASHA256Algorithm> {
    return super.deploy(overrides || {}) as Promise<RSASHA256Algorithm>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RSASHA256Algorithm {
    return super.attach(address) as RSASHA256Algorithm;
  }
  connect(signer: Signer): RSASHA256Algorithm__factory {
    return super.connect(signer) as RSASHA256Algorithm__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RSASHA256AlgorithmInterface {
    return new utils.Interface(_abi) as RSASHA256AlgorithmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RSASHA256Algorithm {
    return new Contract(address, _abi, signerOrProvider) as RSASHA256Algorithm;
  }
}

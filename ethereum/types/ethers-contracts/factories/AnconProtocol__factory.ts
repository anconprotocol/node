/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "network",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "ENROLL_DAG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ENROLL_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SUBMIT_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dagRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "latestRootHashTable",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "relayerHashTable",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "whitelistedDagGraph",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractIdentifier",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "dagAddress",
        type: "address",
      },
    ],
    name: "setWhitelistedDagGraph",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "height",
        type: "uint256",
      },
    ],
    name: "updateRelayerHeader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "setPaymentToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setProtocolFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setAccountRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setDagGraphFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "userProof",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProofWithKV",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040527faa38c8fcdb8500f6802157621989c44502acc94ca3eb31e1547a766ce91448b26000557f2f6bb624cb316ab670df79a1530a1105c05bdac88a2221c0a2c3efa065e294666001557fa8a7d14acee15b581bdc62c67a1b2711ec58a960850b336a002a03c0f3367b3b60025560006006556000600755600060085560006009553480156200009157600080fd5b50604051620037f1380380620037f1833981016040819052620000b491620000ec565b60038054336001600160a01b031991821617909155600580549091166001600160a01b03939093169290921790915560095562000128565b600080604083850312156200010057600080fd5b82516001600160a01b03811681146200011857600080fd5b6020939093015192949293505050565b6136b980620001386000396000f3fe6080604052600436106101e35760003560e01c80638da5cb5b11610102578063b0e21e8a11610095578063e9cbd82211610064578063e9cbd8221461058f578063e9f49b53146105af578063ee983e8c146105cf578063fc7ea420146105e557600080fd5b8063b0e21e8a14610509578063c284bdf31461051f578063d56a07e314610534578063d7c9b5691461056f57600080fd5b8063a21c87d8116100d1578063a21c87d8146104a0578063a5aa7bd3146104b6578063a848e0ec146104c9578063b0d264e7146104e957600080fd5b80638da5cb5b1461043a57806397554e8f1461045a578063998b32e81461046d578063a195c3e31461048057600080fd5b80635dad28de1161017a57806373d157171161014957806373d15717146103ba578063787dce3d146103da5780638406c079146103fa5780638b178bec1461041a57600080fd5b80635dad28de146103445780635eccc3711461035a578063693ac4fb1461037a5780636a326ab11461039a57600080fd5b806340ae5ffa116101b657806340ae5ffa146102b05780634bf26de6146102d457806351ceefe7146102f457806351cff8d91461032457600080fd5b806301644028146101e857806305c248531461021e57806327dcd78c1461026c5780633aeac4e11461028e575b600080fd5b3480156101f457600080fd5b506102086102033660046129ff565b6105fb565b6040516102159190612a90565b60405180910390f35b34801561022a57600080fd5b50610254610239366004612aa3565b600d602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610215565b34801561027857600080fd5b506102816106a0565b6040516102159190612b77565b34801561029a57600080fd5b506102ae6102a9366004612c64565b6107b4565b005b3480156102bc57600080fd5b506102c660005481565b604051908152602001610215565b3480156102e057600080fd5b506102ae6102ef366004612c9d565b61095f565b34801561030057600080fd5b5061031461030f366004612fbe565b610a3d565b6040519015158152602001610215565b34801561033057600080fd5b506102ae61033f366004613050565b610af4565b34801561035057600080fd5b506102c660075481565b34801561036657600080fd5b50610208610375366004612aa3565b610bfa565b34801561038657600080fd5b506102086103953660046129ff565b610c9c565b3480156103a657600080fd5b506102ae6103b5366004613050565b610cc7565b3480156103c657600080fd5b506102086103d5366004613050565b610d0d565b3480156103e657600080fd5b506102ae6103f5366004612aa3565b610d26565b34801561040657600080fd5b50600454610254906001600160a01b031681565b34801561042657600080fd5b506102ae610435366004612aa3565b610d42565b34801561044657600080fd5b50600354610254906001600160a01b031681565b61031461046836600461306d565b610d5e565b61031461047b366004612fbe565b610fc7565b34801561048c57600080fd5b5061020861049b366004613133565b61119d565b3480156104ac57600080fd5b506102c660085481565b6102ae6104c4366004613155565b6111c1565b3480156104d557600080fd5b506102086104e4366004612aa3565b61126d565b3480156104f557600080fd5b506102ae6105043660046132db565b611286565b34801561051557600080fd5b506102c660065481565b34801561052b57600080fd5b506102c66113f5565b34801561054057600080fd5b5061031461054f3660046129ff565b8051602081830181018051600c8252928201919093012091525460ff1681565b34801561057b57600080fd5b506102ae61058a366004612aa3565b611442565b34801561059b57600080fd5b50600554610254906001600160a01b031681565b3480156105bb57600080fd5b506103146105ca3660046129ff565b61145e565b3480156105db57600080fd5b506102c660015481565b3480156105f157600080fd5b506102c660025481565b8051602081830181018051600a825292820191909301209152805461061f906133ad565b80601f016020809104026020016040519081016040528092919081815260200182805461064b906133ad565b80156106985780601f1061066d57610100808354040283529160200191610698565b820191906000526020600020905b81548152906001019060200180831161067b57829003601f168201915b505050505081565b6106a861279d565b6106b061279d565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106106e6576106e66133e8565b602002602001018181525050600181600181518110610707576107076133e8565b6020026020010181815250506040518060c001604052806001151581526020016001600581111561073a5761073a612abc565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b6003546001600160a01b031633146107cb57600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083691906133fe565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af11580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c69190613417565b6109175760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064015b60405180910390fd5b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58260405161095291815260200190565b60405180910390a2505050565b6000838152600d60205260409020546001600160a01b031633146109c55760405162461bcd60e51b815260206004820152600c60248201527f696e76616c696420757365720000000000000000000000000000000000000000604482015260640161090e565b6000838152600f60209081526040808320848452825290912083516109ec928501906127fa565b506000838152600e602090815260409091208351610a0c928501906127fa565b5060405183907fc4c76143cbd497adc2b5bc159d932dcfa8483928a0d22661d1404ef1c68984a190600090a2505050565b6000610ae982610a4b6106a0565b6000888152600e602052604090208054610a64906133ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610a90906133ad565b8015610add5780601f10610ab257610100808354040283529160200191610add565b820191906000526020600020905b815481529060010190602001808311610ac057829003601f168201915b50505050508787611286565b506001949350505050565b6003546001600160a01b03163314610b0b57600080fd5b604051479060009081906001600160a01b0385169084908381818185875af1925050503d8060008114610b5a576040519150601f19603f3d011682016040523d82523d6000602084013e610b5f565b606091505b509150915081610bb15760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e64204574686572000000000000000000000000604482015260640161090e565b836001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d584604051610bec91815260200190565b60405180910390a250505050565b6000818152600e60205260409020805460609190610c17906133ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610c43906133ad565b8015610c905780601f10610c6557610100808354040283529160200191610c90565b820191906000526020600020905b815481529060010190602001808311610c7357829003601f168201915b50505050509050919050565b6060600a82604051610cae9190613434565b90815260200160405180910390208054610c17906133ad565b6003546001600160a01b03163314610cde57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600b602052600090815260409020805461061f906133ad565b6003546001600160a01b03163314610d3d57600080fd5b600655565b6003546001600160a01b03163314610d5957600080fd5b600755565b6000600c84604051610d709190613434565b9081526040519081900360200190205460ff1615610df55760405162461bcd60e51b8152602060048201526024808201527f70726f6f6620686173206265656e207375626d69747465642028666f756e642060448201527f6b65792900000000000000000000000000000000000000000000000000000000606482015260840161090e565b838051906020012082602001518051906020012014610e445760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b604482015260640161090e565b846020015180519060200120600b6000886001600160a01b03166001600160a01b03168152602001908152602001600020604051610e829190613450565b604051809103902014610ed75760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642075736572206b657900000000000000000000000000000000604482015260640161090e565b610ee18786611489565b610f2d5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420757365722070726f6f660000000000000000000000000000604482015260640161090e565b610f378783611489565b610f4057600080fd5b6001600c85604051610f529190613434565b908152604051908190036020019020805491151560ff19909216919091179055600254610f7f9087611547565b7f6fc7f6a61226dca85dedfb3642afdfbd9aeca6b161137d0c9a09e01a5e4baeee848489604051610fb2939291906134ec565b60405180910390a15060019695505050505050565b60008380519060200120826020015180519060200120146110185760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b604482015260640161090e565b6110228583611489565b61106e5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f6600000000000000000000000000000000000000604482015260640161090e565b600a8360405161107e9190613434565b90815260405190819003602001812061109691613450565b6040518091039020848051906020012014156110f45760405162461bcd60e51b815260206004820152601760248201527f7573657220616c72656164792072656769737465726564000000000000000000604482015260640161090e565b61110060005433611547565b83600a846040516111119190613434565b908152602001604051809103902090805190602001906111329291906127fa565b50336000908152600b602090815260409091208551611153928701906127fa565b507f7b72d06bd8ccc7a748cfdb8b1df6913a277497c808af0288d0d6c0eb06b3b7b6600185858860405161118a9493929190613522565b60405180910390a1506001949350505050565b600f6020908152600092835260408084209091529082529020805461061f906133ad565b6000828152600d60205260409020546001600160a01b0316156112265760405162461bcd60e51b815260206004820152600660248201527f6578697374730000000000000000000000000000000000000000000000000000604482015260640161090e565b61123260015433611547565b6000918252600d6020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b600e602052600090815260409020805461061f906133ad565b6112908585611959565b61129e856020015183611a81565b6112ea5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f66604482015260640161090e565b6112f8856040015182611a81565b61136a5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f66000000000000000000000000000000000000000000000000000000000000606482015260840161090e565b61137c61137686611ab1565b84611a81565b6113ee5760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f740000000000000000000000000000000000000000606482015260840161090e565b5050505050565b60006009543060405160200161142792919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905090565b6003546001600160a01b0316331461145957600080fd5b600855565b6000600c826040516114709190613434565b9081526040519081900360200190205460ff1692915050565b600061153d826114976106a0565b6000868152600e6020526040902080546114b0906133ad565b80601f01602080910402602001604051908101604052809291908181526020018280546114dc906133ad565b80156115295780601f106114fe57610100808354040283529160200191611529565b820191906000526020600020905b81548152906001019060200180831161150c57829003601f168201915b505050505085602001518660400151611286565b5060015b92915050565b6005546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b491906133fe565b116116015760405162461bcd60e51b815260206004820152601160248201527f6e6f20656e6f7567682062616c616e6365000000000000000000000000000000604482015260640161090e565b60015482141561171d576005546008546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af1158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190613417565b6116d75760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e74000000604482015260640161090e565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b360085460405161171491815260200190565b60405180910390a25b600054821415611839576005546007546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af1158015611783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a79190613417565b6117f35760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e74000000604482015260640161090e565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b360075460405161183091815260200190565b60405180910390a25b600254821415611955576005546006546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af115801561189f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c39190613417565b61190f5760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e74000000604482015260640161090e565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b360065460405161194c91815260200190565b60405180910390a25b5050565b611967826060015182611b20565b606081015115806119815750806060015182608001515110155b6119cd5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f72740000000000000000604482015260640161090e565b604081015115806119e75750806040015182608001515110155b611a335760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f72740000000000000000604482015260640161090e565b60005b826080015151811015611a7c57611a6a83608001518281518110611a5c57611a5c6133e8565b602002602001015183611d6a565b80611a7481613577565b915050611a36565b505050565b60008151835114611a9457506000611541565b825160208381018281209186019283209091145b95945050505050565b60606000611acc836060015184602001518560400151611f35565b905060005b836080015151811015611b1957611b0584608001518281518110611af757611af76133e8565b602002602001015183612056565b915080611b1181613577565b915050611ad1565b5092915050565b8051602001516005811115611b3757611b37612abc565b82602001516005811115611b4d57611b4d612abc565b14611b9a5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f70000000000000000000000000000000604482015260640161090e565b8051604001516005811115611bb157611bb1612abc565b82604001516005811115611bc757611bc7612abc565b14611c145760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b65790000000000000000000000604482015260640161090e565b8051606001516005811115611c2b57611c2b612abc565b82606001516005811115611c4157611c41612abc565b14611c8e5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b65790000000000000000000000604482015260640161090e565b8051608001516008811115611ca557611ca5612abc565b82608001516008811115611cbb57611cbb612abc565b14611d085760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f70000000000000604482015260640161090e565b611d1e8260a00151826000015160a00151612105565b6119555760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e6720707265666978000000000000000000604482015260640161090e565b8051602001516005811115611d8157611d81612abc565b82602001516005811115611d9757611d97612abc565b14611de45760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f70000000000000000000000000000000604482015260640161090e565b611dfa8260400151826000015160a00151612105565b15611e475760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e67207072656669780000000000000000604482015260640161090e565b8060200151604001518260400151511015611ea45760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f72740000000000000000604482015260640161090e565b6020808201519081015190515160009190611ec190600190613592565b611ecb91906135a9565b905080826020015160600151611ee191906135c8565b8360400151511115611a7c5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f72740000000000000000604482015260640161090e565b60606000835111611f885760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b6579000000000000000000000000000000604482015260640161090e565b6000825111611fd95760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c756500000000000000000000000000604482015260640161090e565b60008460a00151611ff386604001518760800151876121c8565b6040516020016120049291906135e0565b60405160208183030381529060405261202686606001518760800151866121c8565b6040516020016120379291906135e0565b6040516020818303038152906040529050611aa88560200151826121e5565b606060008251116120a95760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c7565000000000000604482015260640161090e565b6120fe83602001518460400151846040516020016120c89291906135e0565b60408051601f198184030181529082905260608701516120ea926020016135e0565b6040516020818303038152906040526121e5565b9392505050565b600081518351101561211957506000611541565b60005b82518110156121be57828181518110612137576121376133e8565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110612176576121766133e8565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016146121ac576000915050611541565b806121b681613577565b91505061211c565b5060019392505050565b60606121dd836121d88685612403565b612430565b949350505050565b606060018360058111156121fb576121fb612abc565b1415612260576122596002836040516122149190613434565b602060405180830381855afa158015612231573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061225491906133fe565b6125c4565b9050611541565b600283600581111561227457612274612abc565b14156122c25760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e74656400000000000000000000604482015260640161090e565b60048360058111156122d6576122d6612abc565b141561232a576122596003836040516122ef9190613434565b602060405180830381855afa15801561230c573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff19166125c4565b600583600581111561233e5761233e612abc565b14156123bb5760006002836040516123569190613434565b602060405180830381855afa158015612373573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061239691906133fe565b90506123b360036123a6836125c4565b6040516122ef9190613434565b915050611541565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f700000000000000000000000000000604482015260640161090e565b6060600083600581111561241957612419612abc565b1415612426575080611541565b6120fe83836121e5565b6060600083600881111561244657612446612abc565b1415612453575080611541565b600183600881111561246757612467612abc565b141561249f5761247782516125ee565b826040516020016124899291906135e0565b6040516020818303038152906040529050611541565b60078360088111156124b3576124b3612abc565b141561251157815160201461250a5760405162461bcd60e51b815260206004820152601160248201527f4578706563746564203332206279746573000000000000000000000000000000604482015260640161090e565b5080611541565b600883600881111561252557612525612abc565b141561257c57815160401461250a5760405162461bcd60e51b815260206004820152601160248201527f4578706563746564203634206279746573000000000000000000000000000000604482015260640161090e565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f70000000000000000000000000604482015260640161090e565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff16111561262c5760078267ffffffffffffffff16901c9150600181612625919061360f565b90506125f4565b60008167ffffffffffffffff1667ffffffffffffffff811115612651576126516128d9565b6040519080825280601f01601f19166020018201604052801561267b576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156127195783607f1660801760f81b828267ffffffffffffffff16815181106126c6576126c66133e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c9350808061271190613632565b915050612684565b507f7f000000000000000000000000000000000000000000000000000000000000008161274760018561365a565b67ffffffffffffffff1681518110612761576127616133e8565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528152602081016127e661287e565b815260200160008152602001600081525090565b828054612806906133ad565b90600052602060002090601f016020900481019282612828576000855561286e565b82601f1061284157805160ff191683800117855561286e565b8280016001018555821561286e579182015b8281111561286e578251825591602001919060010190612853565b5061287a9291506128c4565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160608152602001600060058111156128bf576128bf612abc565b905290565b5b8082111561287a57600081556001016128c5565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612912576129126128d9565b60405290565b6040516080810167ffffffffffffffff81118282101715612912576129126128d9565b60405160a0810167ffffffffffffffff81118282101715612912576129126128d9565b604051601f8201601f1916810167ffffffffffffffff81118282101715612987576129876128d9565b604052919050565b600082601f8301126129a057600080fd5b813567ffffffffffffffff8111156129ba576129ba6128d9565b6129cd601f8201601f191660200161295e565b8181528460208386010111156129e257600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612a1157600080fd5b813567ffffffffffffffff811115612a2857600080fd5b6121dd8482850161298f565b60005b83811015612a4f578181015183820152602001612a37565b83811115612a5e576000848401525b50505050565b60008151808452612a7c816020860160208601612a34565b601f01601f19169290920160200192915050565b6020815260006120fe6020830184612a64565b600060208284031215612ab557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60068110612ae257612ae2612abc565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b81811015612b2257835183529284019291840191600101612b06565b505082850151838701526040850151604087015260608501516060870152608085015192508581036080870152612b598184612a64565b9250505060a0830151612b6f60a0860182612ad2565b509392505050565b6020815260008251608060208401528051151560a08401526020810151612ba160c0850182612ad2565b506040810151612bb460e0850182612ad2565b506060810151612bc8610100850182612ad2565b50608081015160098110612bde57612bde612abc565b61012084015260a0015160c0610140840152612bfe610160840182612a64565b90506020840151601f19848303016040850152612c1b8282612ae6565b91505060408401516060840152606084015160808401528091505092915050565b6001600160a01b0381168114612c5157600080fd5b50565b8035612c5f81612c3c565b919050565b60008060408385031215612c7757600080fd5b8235612c8281612c3c565b91506020830135612c9281612c3c565b809150509250929050565b600080600060608486031215612cb257600080fd5b83359250602084013567ffffffffffffffff811115612cd057600080fd5b612cdc8682870161298f565b925050604084013590509250925092565b8015158114612c5157600080fd5b8035612c5f81612ced565b803560068110612c5f57600080fd5b600060c08284031215612d2757600080fd5b612d2f6128ef565b90508135612d3c81612ced565b8152612d4a60208301612d06565b6020820152612d5b60408301612d06565b6040820152612d6c60608301612d06565b6060820152608082013560098110612d8357600080fd5b608082015260a082013567ffffffffffffffff811115612da257600080fd5b612dae8482850161298f565b60a08301525092915050565b600067ffffffffffffffff821115612dd457612dd46128d9565b5060051b60200190565b600082601f830112612def57600080fd5b81356020612e04612dff83612dba565b61295e565b82815260059290921b84018101918181019086841115612e2357600080fd5b8286015b84811015612ee957803567ffffffffffffffff80821115612e485760008081fd5b908801906080828b03601f1901811315612e625760008081fd5b612e6a612918565b87840135612e7781612ced565b81526040612e86858201612d06565b8983015260608086013585811115612e9e5760008081fd5b612eac8f8c838a010161298f565b8484015250928501359284841115612ec657600091508182fd5b612ed48e8b8689010161298f565b90830152508652505050918301918301612e27565b509695505050505050565b600060a08284031215612f0657600080fd5b612f0e61293b565b9050612f1982612cfb565b8152602082013567ffffffffffffffff80821115612f3657600080fd5b612f428583860161298f565b60208401526040840135915080821115612f5b57600080fd5b612f678583860161298f565b60408401526060840135915080821115612f8057600080fd5b612f8c85838601612d15565b60608401526080840135915080821115612fa557600080fd5b50612fb284828501612dde565b60808301525092915050565b60008060008060808587031215612fd457600080fd5b84359350602085013567ffffffffffffffff80821115612ff357600080fd5b612fff8883890161298f565b9450604087013591508082111561301557600080fd5b6130218883890161298f565b9350606087013591508082111561303757600080fd5b5061304487828801612ef4565b91505092959194509250565b60006020828403121561306257600080fd5b81356120fe81612c3c565b60008060008060008060c0878903121561308657600080fd5b8635955061309660208801612c54565b9450604087013567ffffffffffffffff808211156130b357600080fd5b6130bf8a838b01612ef4565b955060608901359150808211156130d557600080fd5b6130e18a838b0161298f565b945060808901359150808211156130f757600080fd5b6131038a838b0161298f565b935060a089013591508082111561311957600080fd5b5061312689828a01612ef4565b9150509295509295509295565b6000806040838503121561314657600080fd5b50508035926020909101359150565b6000806040838503121561316857600080fd5b823591506020830135612c9281612c3c565b600082601f83011261318b57600080fd5b8135602061319b612dff83612dba565b82815260059290921b840181019181810190868411156131ba57600080fd5b8286015b84811015612ee957803583529183019183016131be565b6000608082840312156131e757600080fd5b6131ef612918565b9050813567ffffffffffffffff8082111561320957600080fd5b61321585838601612d15565b8352602084013591508082111561322b57600080fd5b9083019060c0828603121561323f57600080fd5b6132476128ef565b82358281111561325657600080fd5b6132628782860161317a565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561329557600080fd5b6132a18782860161298f565b6080830152506132b360a08401612d06565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a086880312156132f357600080fd5b853567ffffffffffffffff8082111561330b57600080fd5b61331789838a01612ef4565b9650602088013591508082111561332d57600080fd5b61333989838a016131d5565b9550604088013591508082111561334f57600080fd5b61335b89838a0161298f565b9450606088013591508082111561337157600080fd5b61337d89838a0161298f565b9350608088013591508082111561339357600080fd5b506133a08882890161298f565b9150509295509295909350565b600181811c908216806133c157607f821691505b602082108114156133e257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561341057600080fd5b5051919050565b60006020828403121561342957600080fd5b81516120fe81612ced565b60008251613446818460208701612a34565b9190910192915050565b600080835481600182811c91508083168061346c57607f831692505b602080841082141561348c57634e487b7160e01b86526022600452602486fd5b8180156134a057600181146134b1576134de565b60ff198616895284890196506134de565b60008a81526020902060005b868110156134d65781548b8201529085019083016134bd565b505084890196505b509498975050505050505050565b6060815260006134ff6060830186612a64565b82810360208401526135118186612a64565b915050826040830152949350505050565b841515815260806020820152600061353d6080830186612a64565b828103604084015261354f8186612a64565b91505082606083015295945050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561358b5761358b613561565b5060010190565b6000828210156135a4576135a4613561565b500390565b60008160001904831182151516156135c3576135c3613561565b500290565b600082198211156135db576135db613561565b500190565b600083516135f2818460208801612a34565b835190830190613606818360208801612a34565b01949350505050565b600067ffffffffffffffff80831681851680830382111561360657613606613561565b600067ffffffffffffffff8083168181141561365057613650613561565b6001019392505050565b600067ffffffffffffffff8381169083168181101561367b5761367b613561565b03939250505056fea26469706673582212206a735d161208c1e5635af9a8a9e2d861621dfca351762baad04797b881763e5164736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    tokenAddress: string,
    network: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(
      tokenAddress,
      network,
      overrides || {}
    ) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    tokenAddress: string,
    network: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenAddress, network, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

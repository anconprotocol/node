/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "hash",
        type: "bytes",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "ENROLL_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "SUBMIT_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "setPaymentToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setProtocolFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setAccountRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProofWithKV",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040527faa38c8fcdb8500f6802157621989c44502acc94ca3eb31e1547a766ce91448b26001557fa8a7d14acee15b581bdc62c67a1b2711ec58a960850b336a002a03c0f3367b3b6002556000600655600060075534801561006257600080fd5b5061006c33610071565b6100c1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61311d80620000d16000396000f3fe6080604052600436106101ac5760003560e01c806373d15717116100ec578063c935256b1161008a578063e9f49b5311610064578063e9f49b53146104ac578063f2a4147a146104cc578063f2fde38b146104e1578063fc7ea4201461050157600080fd5b8063c935256b14610431578063d56a07e314610451578063e9cbd8221461048c57600080fd5b80638b178bec116100c65780638b178bec146103bd5780638da5cb5b146103dd578063b0d264e7146103fb578063b0e21e8a1461041b57600080fd5b806373d1571714610345578063787dce3d146103655780638406c0791461038557600080fd5b806340ae5ffa116101595780635dad28de116101335780635dad28de146102da578063693ac4fb146102f05780636a326ab114610310578063715018a61461033057600080fd5b806340ae5ffa14610281578063410d0d84146102a557806351cff8d9146102ba57600080fd5b8063322084911161018a5780633220849114610239578063354763d91461024c5780633aeac4e11461025f57600080fd5b806301644028146101b157806301b3239e146101e757806327dcd78c14610217575b600080fd5b3480156101bd57600080fd5b506101d16101cc3660046125f1565b610517565b6040516101de9190612682565b60405180910390f35b3480156101f357600080fd5b5061020761020236600461296b565b6105bc565b60405190151581526020016101de565b34801561022357600080fd5b5061022c610666565b6040516101de9190612aae565b61020761024736600461296b565b61077a565b61020761025a36600461296b565b610950565b34801561026b57600080fd5b5061027f61027a366004612b88565b610a23565b005b34801561028d57600080fd5b5061029760015481565b6040519081526020016101de565b3480156102b157600080fd5b506101d1610c25565b3480156102c657600080fd5b5061027f6102d5366004612bc1565b610c32565b3480156102e657600080fd5b5061029760075481565b3480156102fc57600080fd5b506101d161030b3660046125f1565b610cd0565b34801561031c57600080fd5b5061027f61032b366004612bc1565b610d80565b34801561033c57600080fd5b5061027f610e09565b34801561035157600080fd5b506101d1610360366004612bc1565b610e6f565b34801561037157600080fd5b5061027f610380366004612bde565b610e88565b34801561039157600080fd5b506003546103a5906001600160a01b031681565b6040516001600160a01b0390911681526020016101de565b3480156103c957600080fd5b5061027f6103d8366004612bde565b610ee7565b3480156103e957600080fd5b506000546001600160a01b03166103a5565b34801561040757600080fd5b5061027f610416366004612d58565b610f46565b34801561042757600080fd5b5061029760065481565b34801561043d57600080fd5b5061027f61044c3660046125f1565b6110b5565b34801561045d57600080fd5b5061020761046c3660046125f1565b8051602081830181018051600a8252928201919093012091525460ff1681565b34801561049857600080fd5b506005546103a5906001600160a01b031681565b3480156104b857600080fd5b506102076104c73660046125f1565b61115d565b3480156104d857600080fd5b506101d1611188565b3480156104ed57600080fd5b5061027f6104fc366004612bc1565b61121a565b34801561050d57600080fd5b5061029760025481565b80516020818301810180516008825292820191909301209152805461053b90612e2a565b80601f016020809104026020016040519081016040528092919081815260200182805461056790612e2a565b80156105b45780601f10610589576101008083540402835291602001916105b4565b820191906000526020600020905b81548152906001019060200180831161059757829003601f168201915b505050505081565b600061065c826105ca610666565b600480546105d790612e2a565b80601f016020809104026020016040519081016040528092919081815260200182805461060390612e2a565b80156106505780601f1061062557610100808354040283529160200191610650565b820191906000526020600020905b81548152906001019060200180831161063357829003601f168201915b50505050508787610f46565b5060019392505050565b61066e61238f565b61067661238f565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106106ac576106ac612e65565b6020026020010181815250506001816001815181106106cd576106cd612e65565b6020026020010181815250506040518060c0016040528060011515815260200160016005811115610700576107006129f3565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b60008380519060200120826020015180519060200120146107d05760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064015b60405180910390fd5b6107d9826112fc565b6108255760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016107c7565b6008836040516108359190612e7b565b90815260405190819003602001812061084d91612e97565b60405180910390208480519060200120146108aa5760405162461bcd60e51b815260206004820152601760248201527f7573657220616c7265616479207265676973746572656400000000000000000060448201526064016107c7565b6108b6600154336113ac565b836008846040516108c79190612e7b565b908152602001604051809103902090805190602001906108e89291906123ec565b503360009081526009602090815260409091208551610909928701906123ec565b507fdf285b75c61e111633bd9fdd496ccf9b449555e34d68ea7bf9db18e8f1977c706001858560405161093e93929190612f33565b60405180910390a15060019392505050565b60008380519060200120826020015180519060200120146109a15760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064016107c7565b6109aa826112fc565b6109b357600080fd5b6001600a856040516109c59190612e7b565b908152604051908190036020019020805491151560ff199092169190911790556002546109f290336113ac565b7f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e848460405161093e929190612f6a565b6000546001600160a01b03163314610a7d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190612f8f565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190612fa8565b610bdd5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107c7565b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610c1891815260200190565b60405180910390a2505050565b6004805461053b90612e2a565b6000546001600160a01b03163314610c8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b60405147808252906001600160a01b038316907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b6060600882604051610ce29190612e7b565b90815260200160405180910390208054610cfb90612e2a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2790612e2a565b8015610d745780601f10610d4957610100808354040283529160200191610d74565b820191906000526020600020905b815481529060010190602001808311610d5757829003601f168201915b50505050509050919050565b6000546001600160a01b03163314610dda5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b610e6d60006114ee565b565b6009602052600090815260409020805461053b90612e2a565b6000546001600160a01b03163314610ee25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b600655565b6000546001600160a01b03163314610f415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b600755565b610f50858561154b565b610f5e856020015183611673565b610faa5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064016107c7565b610fb8856040015182611673565b61102a5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f6600000000000000000000000000000000000000000000000000000000000060648201526084016107c7565b61103c611036866116a0565b84611673565b6110ae5760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f74000000000000000000000000000000000000000060648201526084016107c7565b5050505050565b6000546001600160a01b0316331461110f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b80516111229060049060208401906123ec565b507fe0b001f59b54160030a2302b411d234315941c6c1d33a52bdb8f3c46a1dffeb8816040516111529190612682565b60405180910390a150565b6000600a8260405161116f9190612e7b565b9081526040519081900360200190205460ff1692915050565b60606004805461119790612e2a565b80601f01602080910402602001604051908101604052809291908181526020018280546111c390612e2a565b80156112105780601f106111e557610100808354040283529160200191611210565b820191906000526020600020905b8154815290600101906020018083116111f357829003601f168201915b5050505050905090565b6000546001600160a01b031633146112745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c7565b6001600160a01b0381166112f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107c7565b6112f9816114ee565b50565b60006113a48261130a610666565b6004805461131790612e2a565b80601f016020809104026020016040519081016040528092919081815260200182805461134390612e2a565b80156113905780601f1061136557610100808354040283529160200191611390565b820191906000526020600020905b81548152906001019060200180831161137357829003601f168201915b505050505085602001518660400151610f46565b506001919050565b60006001548314156113bd57506007545b6002548314156113cc57506006545b6005546006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af1158015611441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114659190612fa8565b6114b15760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e7400000060448201526064016107c7565b816001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b3600654604051610c1891815260200190565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61155982606001518261170f565b606081015115806115735750806060015182608001515110155b6115bf5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016107c7565b604081015115806115d95750806040015182608001515110155b6116255760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016107c7565b60005b82608001515181101561166e5761165c8360800151828151811061164e5761164e612e65565b60200260200101518361195d565b8061166681612fdb565b915050611628565b505050565b600081518351146116865750600061169a565b508151602082810182902090840191909120145b92915050565b606060006116bb836060015184602001518560400151611b28565b905060005b836080015151811015611708576116f4846080015182815181106116e6576116e6612e65565b602002602001015183611c52565b91508061170081612fdb565b9150506116c0565b5092915050565b8051602001516005811115611726576117266129f3565b8260200151600581111561173c5761173c6129f3565b146117895760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016107c7565b80516040015160058111156117a0576117a06129f3565b826040015160058111156117b6576117b66129f3565b146118035760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016107c7565b805160600151600581111561181a5761181a6129f3565b82606001516005811115611830576118306129f3565b1461187d5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016107c7565b8051608001516008811115611894576118946129f3565b826080015160088111156118aa576118aa6129f3565b146118f75760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f7000000000000060448201526064016107c7565b61190d8260a00151826000015160a00151611d01565b6119595760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e672070726566697800000000000000000060448201526064016107c7565b5050565b8051602001516005811115611974576119746129f3565b8260200151600581111561198a5761198a6129f3565b146119d75760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016107c7565b6119ed8260400151826000015160a00151611d01565b15611a3a5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e6720707265666978000000000000000060448201526064016107c7565b8060200151604001518260400151511015611a975760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016107c7565b6020808201519081015190515160009190611ab490600190612ff6565b611abe919061300d565b905080826020015160600151611ad4919061302c565b836040015151111561166e5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016107c7565b60606000835111611b7b5760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b657900000000000000000000000000000060448201526064016107c7565b6000825111611bcc5760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c75650000000000000000000000000060448201526064016107c7565b60008460a00151611be68660400151876080015187611dba565b604051602001611bf7929190613044565b604051602081830303815290604052611c198660600151876080015186611dba565b604051602001611c2a929190613044565b6040516020818303038152906040529050611c49856020015182611dd7565b95945050505050565b60606000825111611ca55760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c756500000000000060448201526064016107c7565b611cfa8360200151846040015184604051602001611cc4929190613044565b60408051601f19818403018152908290526060870151611ce692602001613044565b604051602081830303815290604052611dd7565b9392505050565b6000815183511015611d155750600061169a565b60005b825181101561065c57828181518110611d3357611d33612e65565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110611d7257611d72612e65565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611da857600091505061169a565b80611db281612fdb565b915050611d18565b6060611dcf83611dca8685611ff5565b612022565b949350505050565b60606001836005811115611ded57611ded6129f3565b1415611e5257611e4b600283604051611e069190612e7b565b602060405180830381855afa158015611e23573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e469190612f8f565b6121b6565b905061169a565b6002836005811115611e6657611e666129f3565b1415611eb45760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e7465640000000000000000000060448201526064016107c7565b6004836005811115611ec857611ec86129f3565b1415611f1c57611e4b600383604051611ee19190612e7b565b602060405180830381855afa158015611efe573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff19166121b6565b6005836005811115611f3057611f306129f3565b1415611fad576000600283604051611f489190612e7b565b602060405180830381855afa158015611f65573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611f889190612f8f565b9050611fa56003611f98836121b6565b604051611ee19190612e7b565b91505061169a565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f70000000000000000000000000000060448201526064016107c7565b6060600083600581111561200b5761200b6129f3565b141561201857508061169a565b611cfa8383611dd7565b60606000836008811115612038576120386129f3565b141561204557508061169a565b6001836008811115612059576120596129f3565b14156120915761206982516121e0565b8260405160200161207b929190613044565b604051602081830303815290604052905061169a565b60078360088111156120a5576120a56129f3565b14156121035781516020146120fc5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420333220627974657300000000000000000000000000000060448201526064016107c7565b508061169a565b6008836008811115612117576121176129f3565b141561216e5781516040146120fc5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420363420627974657300000000000000000000000000000060448201526064016107c7565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f7000000000000000000000000060448201526064016107c7565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff16111561221e5760078267ffffffffffffffff16901c91506001816122179190613073565b90506121e6565b60008167ffffffffffffffff1667ffffffffffffffff811115612243576122436124cb565b6040519080825280601f01601f19166020018201604052801561226d576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff16101561230b5783607f1660801760f81b828267ffffffffffffffff16815181106122b8576122b8612e65565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c9350808061230390613096565b915050612276565b507f7f00000000000000000000000000000000000000000000000000000000000000816123396001856130be565b67ffffffffffffffff168151811061235357612353612e65565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528152602081016123d8612470565b815260200160008152602001600081525090565b8280546123f890612e2a565b90600052602060002090601f01602090048101928261241a5760008555612460565b82601f1061243357805160ff1916838001178555612460565b82800160010185558215612460579182015b82811115612460578251825591602001919060010190612445565b5061246c9291506124b6565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160608152602001600060058111156124b1576124b16129f3565b905290565b5b8082111561246c57600081556001016124b7565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612504576125046124cb565b60405290565b6040516080810167ffffffffffffffff81118282101715612504576125046124cb565b60405160a0810167ffffffffffffffff81118282101715612504576125046124cb565b604051601f8201601f1916810167ffffffffffffffff81118282101715612579576125796124cb565b604052919050565b600082601f83011261259257600080fd5b813567ffffffffffffffff8111156125ac576125ac6124cb565b6125bf601f8201601f1916602001612550565b8181528460208386010111156125d457600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561260357600080fd5b813567ffffffffffffffff81111561261a57600080fd5b611dcf84828501612581565b60005b83811015612641578181015183820152602001612629565b83811115612650576000848401525b50505050565b6000815180845261266e816020860160208601612626565b601f01601f19169290920160200192915050565b602081526000611cfa6020830184612656565b80151581146112f957600080fd5b80356126ae81612695565b919050565b8035600681106126ae57600080fd5b600060c082840312156126d457600080fd5b6126dc6124e1565b905081356126e981612695565b81526126f7602083016126b3565b6020820152612708604083016126b3565b6040820152612719606083016126b3565b606082015260808201356009811061273057600080fd5b608082015260a082013567ffffffffffffffff81111561274f57600080fd5b61275b84828501612581565b60a08301525092915050565b600067ffffffffffffffff821115612781576127816124cb565b5060051b60200190565b600082601f83011261279c57600080fd5b813560206127b16127ac83612767565b612550565b82815260059290921b840181019181810190868411156127d057600080fd5b8286015b8481101561289657803567ffffffffffffffff808211156127f55760008081fd5b908801906080828b03601f190181131561280f5760008081fd5b61281761250a565b8784013561282481612695565b815260406128338582016126b3565b898301526060808601358581111561284b5760008081fd5b6128598f8c838a0101612581565b848401525092850135928484111561287357600091508182fd5b6128818e8b86890101612581565b908301525086525050509183019183016127d4565b509695505050505050565b600060a082840312156128b357600080fd5b6128bb61252d565b90506128c6826126a3565b8152602082013567ffffffffffffffff808211156128e357600080fd5b6128ef85838601612581565b6020840152604084013591508082111561290857600080fd5b61291485838601612581565b6040840152606084013591508082111561292d57600080fd5b612939858386016126c2565b6060840152608084013591508082111561295257600080fd5b5061295f8482850161278b565b60808301525092915050565b60008060006060848603121561298057600080fd5b833567ffffffffffffffff8082111561299857600080fd5b6129a487838801612581565b945060208601359150808211156129ba57600080fd5b6129c687838801612581565b935060408601359150808211156129dc57600080fd5b506129e9868287016128a1565b9150509250925092565b634e487b7160e01b600052602160045260246000fd5b60068110612a1957612a196129f3565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b81811015612a5957835183529284019291840191600101612a3d565b505082850151838701526040850151604087015260608501516060870152608085015192508581036080870152612a908184612656565b9250505060a0830151612aa660a0860182612a09565b509392505050565b6020815260008251608060208401528051151560a08401526020810151612ad860c0850182612a09565b506040810151612aeb60e0850182612a09565b506060810151612aff610100850182612a09565b50608081015160098110612b1557612b156129f3565b61012084015260a0015160c0610140840152612b35610160840182612656565b90506020840151601f19848303016040850152612b528282612a1d565b91505060408401516060840152606084015160808401528091505092915050565b6001600160a01b03811681146112f957600080fd5b60008060408385031215612b9b57600080fd5b8235612ba681612b73565b91506020830135612bb681612b73565b809150509250929050565b600060208284031215612bd357600080fd5b8135611cfa81612b73565b600060208284031215612bf057600080fd5b5035919050565b600082601f830112612c0857600080fd5b81356020612c186127ac83612767565b82815260059290921b84018101918181019086841115612c3757600080fd5b8286015b848110156128965780358352918301918301612c3b565b600060808284031215612c6457600080fd5b612c6c61250a565b9050813567ffffffffffffffff80821115612c8657600080fd5b612c92858386016126c2565b83526020840135915080821115612ca857600080fd5b9083019060c08286031215612cbc57600080fd5b612cc46124e1565b823582811115612cd357600080fd5b612cdf87828601612bf7565b825250602083013560208201526040830135604082015260608301356060820152608083013582811115612d1257600080fd5b612d1e87828601612581565b608083015250612d3060a084016126b3565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a08688031215612d7057600080fd5b853567ffffffffffffffff80821115612d8857600080fd5b612d9489838a016128a1565b96506020880135915080821115612daa57600080fd5b612db689838a01612c52565b95506040880135915080821115612dcc57600080fd5b612dd889838a01612581565b94506060880135915080821115612dee57600080fd5b612dfa89838a01612581565b93506080880135915080821115612e1057600080fd5b50612e1d88828901612581565b9150509295509295909350565b600181811c90821680612e3e57607f821691505b60208210811415612e5f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251612e8d818460208701612626565b9190910192915050565b600080835481600182811c915080831680612eb357607f831692505b6020808410821415612ed357634e487b7160e01b86526022600452602486fd5b818015612ee75760018114612ef857612f25565b60ff19861689528489019650612f25565b60008a81526020902060005b86811015612f1d5781548b820152908501908301612f04565b505084890196505b509498975050505050505050565b8315158152606060208201526000612f4e6060830185612656565b8281036040840152612f608185612656565b9695505050505050565b604081526000612f7d6040830185612656565b8281036020840152611c498185612656565b600060208284031215612fa157600080fd5b5051919050565b600060208284031215612fba57600080fd5b8151611cfa81612695565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612fef57612fef612fc5565b5060010190565b60008282101561300857613008612fc5565b500390565b600081600019048311821515161561302757613027612fc5565b500290565b6000821982111561303f5761303f612fc5565b500190565b60008351613056818460208801612626565b83519083019061306a818360208801612626565b01949350505050565b600067ffffffffffffffff80831681851680830382111561306a5761306a612fc5565b600067ffffffffffffffff808316818114156130b4576130b4612fc5565b6001019392505050565b600067ffffffffffffffff838116908316818110156130df576130df612fc5565b03939250505056fea2646970667358221220fefed2f294df8d4d1eb09d51e6d16b17e88d736b57e121946bf67cb8b9b7e58364736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

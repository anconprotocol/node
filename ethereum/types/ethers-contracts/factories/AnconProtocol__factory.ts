/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_relayer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "hash",
        type: "bytes",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "ENROLL_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "SUBMIT_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "setPaymentToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setProtocolFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setAccountRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
];

const _bytecode =
  "0x60806040527faa38c8fcdb8500f6802157621989c44502acc94ca3eb31e1547a766ce91448b26001557fa8a7d14acee15b581bdc62c67a1b2711ec58a960850b336a002a03c0f3367b3b600255600060065560006007553480156200006357600080fd5b506040516200315838038062003158833981016040819052620000869162000107565b6200009133620000b7565b600380546001600160a01b0319166001600160a01b039290921691909117905562000139565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200011a57600080fd5b81516001600160a01b03811681146200013257600080fd5b9392505050565b61300f80620001496000396000f3fe6080604052600436106101a15760003560e01c8063787dce3d116100e1578063c935256b1161008a578063e9f49b5311610064578063e9f49b5314610481578063f2a4147a146104a1578063f2fde38b146104b6578063fc7ea420146104d657600080fd5b8063c935256b14610406578063d56a07e314610426578063e9cbd8221461046157600080fd5b80638da5cb5b116100bb5780638da5cb5b146103b2578063b0d264e7146103d0578063b0e21e8a146103f057600080fd5b8063787dce3d1461033a5780638406c0791461035a5780638b178bec1461039257600080fd5b8063410d0d841161014e578063693ac4fb11610128578063693ac4fb146102c55780636a326ab1146102e5578063715018a61461030557806373d157171461031a57600080fd5b8063410d0d841461027a57806351cff8d91461028f5780635dad28de146102af57600080fd5b8063354763d91161017f578063354763d9146102215780633aeac4e11461023457806340ae5ffa1461025657600080fd5b806301644028146101a657806327dcd78c146101dc57806332208491146101fe575b600080fd5b3480156101b257600080fd5b506101c66101c13660046124e3565b6104ec565b6040516101d39190612574565b60405180910390f35b3480156101e857600080fd5b506101f1610591565b6040516101d39190612642565b61021161020c3660046129dd565b6106a5565b60405190151581526020016101d3565b61021161022f3660046129dd565b61087b565b34801561024057600080fd5b5061025461024f366004612a7a565b61094e565b005b34801561026257600080fd5b5061026c60015481565b6040519081526020016101d3565b34801561028657600080fd5b506101c6610b50565b34801561029b57600080fd5b506102546102aa366004612ab3565b610b5d565b3480156102bb57600080fd5b5061026c60075481565b3480156102d157600080fd5b506101c66102e03660046124e3565b610bfb565b3480156102f157600080fd5b50610254610300366004612ab3565b610cab565b34801561031157600080fd5b50610254610d34565b34801561032657600080fd5b506101c6610335366004612ab3565b610d9a565b34801561034657600080fd5b50610254610355366004612ad0565b610db3565b34801561036657600080fd5b5060035461037a906001600160a01b031681565b6040516001600160a01b0390911681526020016101d3565b34801561039e57600080fd5b506102546103ad366004612ad0565b610e12565b3480156103be57600080fd5b506000546001600160a01b031661037a565b3480156103dc57600080fd5b506102546103eb366004612c4a565b610e71565b3480156103fc57600080fd5b5061026c60065481565b34801561041257600080fd5b506102546104213660046124e3565b610fe0565b34801561043257600080fd5b506102116104413660046124e3565b8051602081830181018051600a8252928201919093012091525460ff1681565b34801561046d57600080fd5b5060055461037a906001600160a01b031681565b34801561048d57600080fd5b5061021161049c3660046124e3565b611045565b3480156104ad57600080fd5b506101c6611070565b3480156104c257600080fd5b506102546104d1366004612ab3565b611102565b3480156104e257600080fd5b5061026c60025481565b80516020818301810180516008825292820191909301209152805461051090612d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461053c90612d1c565b80156105895780601f1061055e57610100808354040283529160200191610589565b820191906000526020600020905b81548152906001019060200180831161056c57829003601f168201915b505050505081565b610599612281565b6105a1612281565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106105d7576105d7612d57565b6020026020010181815250506001816001815181106105f8576105f8612d57565b6020026020010181815250506040518060c001604052806001151581526020016001600581111561062b5761062b612587565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b60008380519060200120826020015180519060200120146106fb5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064015b60405180910390fd5b610704826111e4565b6107505760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016106f2565b6008836040516107609190612d6d565b90815260405190819003602001812061077891612d89565b60405180910390208480519060200120146107d55760405162461bcd60e51b815260206004820152601760248201527f7573657220616c7265616479207265676973746572656400000000000000000060448201526064016106f2565b6107e160015433611294565b836008846040516107f29190612d6d565b908152602001604051809103902090805190602001906108139291906122de565b503360009081526009602090815260409091208551610834928701906122de565b507fdf285b75c61e111633bd9fdd496ccf9b449555e34d68ea7bf9db18e8f1977c706001858560405161086993929190612e25565b60405180910390a15060019392505050565b60008380519060200120826020015180519060200120146108cc5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064016106f2565b6108d5826111e4565b6108de57600080fd5b6001600a856040516108f09190612d6d565b908152604051908190036020019020805491151560ff1990921691909117905560025461091d9033611294565b7f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e8484604051610869929190612e5c565b6000546001600160a01b031633146109a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190612e81565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190612e9a565b610b085760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016106f2565b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610b4391815260200190565b60405180910390a2505050565b6004805461051090612d1c565b6000546001600160a01b03163314610bb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b60405147808252906001600160a01b038316907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b6060600882604051610c0d9190612d6d565b90815260200160405180910390208054610c2690612d1c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5290612d1c565b8015610c9f5780601f10610c7457610100808354040283529160200191610c9f565b820191906000526020600020905b815481529060010190602001808311610c8257829003601f168201915b50505050509050919050565b6000546001600160a01b03163314610d055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d8e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b610d9860006113d6565b565b6009602052600090815260409020805461051090612d1c565b6000546001600160a01b03163314610e0d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b600655565b6000546001600160a01b03163314610e6c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b600755565b610e7b8585611433565b610e8985602001518361155b565b610ed55760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064016106f2565b610ee385604001518261155b565b610f555760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f6600000000000000000000000000000000000000000000000000000000000060648201526084016106f2565b610f67610f6186611588565b8461155b565b610fd95760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f74000000000000000000000000000000000000000060648201526084016106f2565b5050505050565b6003546001600160a01b03163314610ff757600080fd5b805161100a9060049060208401906122de565b507fe0b001f59b54160030a2302b411d234315941c6c1d33a52bdb8f3c46a1dffeb88160405161103a9190612574565b60405180910390a150565b6000600a826040516110579190612d6d565b9081526040519081900360200190205460ff1692915050565b60606004805461107f90612d1c565b80601f01602080910402602001604051908101604052809291908181526020018280546110ab90612d1c565b80156110f85780601f106110cd576101008083540402835291602001916110f8565b820191906000526020600020905b8154815290600101906020018083116110db57829003601f168201915b5050505050905090565b6000546001600160a01b0316331461115c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b6001600160a01b0381166111d85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106f2565b6111e1816113d6565b50565b600061128c826111f2610591565b600480546111ff90612d1c565b80601f016020809104026020016040519081016040528092919081815260200182805461122b90612d1c565b80156112785780601f1061124d57610100808354040283529160200191611278565b820191906000526020600020905b81548152906001019060200180831161125b57829003601f168201915b505050505085602001518660400151610e71565b506001919050565b60006001548314156112a557506007545b6002548314156112b457506006545b6005546006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af1158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d9190612e9a565b6113995760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e7400000060448201526064016106f2565b816001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b3600654604051610b4391815260200190565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114418260600151826115f7565b6060810151158061145b5750806060015182608001515110155b6114a75760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106f2565b604081015115806114c15750806040015182608001515110155b61150d5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106f2565b60005b826080015151811015611556576115448360800151828151811061153657611536612d57565b602002602001015183611845565b8061154e81612ecd565b915050611510565b505050565b6000815183511461156e57506000611582565b508151602082810182902090840191909120145b92915050565b606060006115a3836060015184602001518560400151611a10565b905060005b8360800151518110156115f0576115dc846080015182815181106115ce576115ce612d57565b602002602001015183611b3a565b9150806115e881612ecd565b9150506115a8565b5092915050565b805160200151600581111561160e5761160e612587565b8260200151600581111561162457611624612587565b146116715760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106f2565b805160400151600581111561168857611688612587565b8260400151600581111561169e5761169e612587565b146116eb5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106f2565b805160600151600581111561170257611702612587565b8260600151600581111561171857611718612587565b146117655760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106f2565b805160800151600881111561177c5761177c612587565b8260800151600881111561179257611792612587565b146117df5760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f7000000000000060448201526064016106f2565b6117f58260a00151826000015160a00151611be9565b6118415760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e672070726566697800000000000000000060448201526064016106f2565b5050565b805160200151600581111561185c5761185c612587565b8260200151600581111561187257611872612587565b146118bf5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106f2565b6118d58260400151826000015160a00151611be9565b156119225760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e6720707265666978000000000000000060448201526064016106f2565b806020015160400151826040015151101561197f5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106f2565b602080820151908101519051516000919061199c90600190612ee8565b6119a69190612eff565b9050808260200151606001516119bc9190612f1e565b83604001515111156115565760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106f2565b60606000835111611a635760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b657900000000000000000000000000000060448201526064016106f2565b6000825111611ab45760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c75650000000000000000000000000060448201526064016106f2565b60008460a00151611ace8660400151876080015187611cac565b604051602001611adf929190612f36565b604051602081830303815290604052611b018660600151876080015186611cac565b604051602001611b12929190612f36565b6040516020818303038152906040529050611b31856020015182611cc9565b95945050505050565b60606000825111611b8d5760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c756500000000000060448201526064016106f2565b611be28360200151846040015184604051602001611bac929190612f36565b60408051601f19818403018152908290526060870151611bce92602001612f36565b604051602081830303815290604052611cc9565b9392505050565b6000815183511015611bfd57506000611582565b60005b8251811015611ca257828181518110611c1b57611c1b612d57565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110611c5a57611c5a612d57565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611c90576000915050611582565b80611c9a81612ecd565b915050611c00565b5060019392505050565b6060611cc183611cbc8685611ee7565b611f14565b949350505050565b60606001836005811115611cdf57611cdf612587565b1415611d4457611d3d600283604051611cf89190612d6d565b602060405180830381855afa158015611d15573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d389190612e81565b6120a8565b9050611582565b6002836005811115611d5857611d58612587565b1415611da65760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e7465640000000000000000000060448201526064016106f2565b6004836005811115611dba57611dba612587565b1415611e0e57611d3d600383604051611dd39190612d6d565b602060405180830381855afa158015611df0573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff19166120a8565b6005836005811115611e2257611e22612587565b1415611e9f576000600283604051611e3a9190612d6d565b602060405180830381855afa158015611e57573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e7a9190612e81565b9050611e976003611e8a836120a8565b604051611dd39190612d6d565b915050611582565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f70000000000000000000000000000060448201526064016106f2565b60606000836005811115611efd57611efd612587565b1415611f0a575080611582565b611be28383611cc9565b60606000836008811115611f2a57611f2a612587565b1415611f37575080611582565b6001836008811115611f4b57611f4b612587565b1415611f8357611f5b82516120d2565b82604051602001611f6d929190612f36565b6040516020818303038152906040529050611582565b6007836008811115611f9757611f97612587565b1415611ff5578151602014611fee5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420333220627974657300000000000000000000000000000060448201526064016106f2565b5080611582565b600883600881111561200957612009612587565b1415612060578151604014611fee5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420363420627974657300000000000000000000000000000060448201526064016106f2565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f7000000000000000000000000060448201526064016106f2565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156121105760078267ffffffffffffffff16901c91506001816121099190612f65565b90506120d8565b60008167ffffffffffffffff1667ffffffffffffffff811115612135576121356123bd565b6040519080825280601f01601f19166020018201604052801561215f576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156121fd5783607f1660801760f81b828267ffffffffffffffff16815181106121aa576121aa612d57565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806121f590612f88565b915050612168565b507f7f000000000000000000000000000000000000000000000000000000000000008161222b600185612fb0565b67ffffffffffffffff168151811061224557612245612d57565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528152602081016122ca612362565b815260200160008152602001600081525090565b8280546122ea90612d1c565b90600052602060002090601f01602090048101928261230c5760008555612352565b82601f1061232557805160ff1916838001178555612352565b82800160010185558215612352579182015b82811115612352578251825591602001919060010190612337565b5061235e9291506123a8565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160608152602001600060058111156123a3576123a3612587565b905290565b5b8082111561235e57600081556001016123a9565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156123f6576123f66123bd565b60405290565b6040516080810167ffffffffffffffff811182821017156123f6576123f66123bd565b60405160a0810167ffffffffffffffff811182821017156123f6576123f66123bd565b604051601f8201601f1916810167ffffffffffffffff8111828210171561246b5761246b6123bd565b604052919050565b600082601f83011261248457600080fd5b813567ffffffffffffffff81111561249e5761249e6123bd565b6124b1601f8201601f1916602001612442565b8181528460208386010111156124c657600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156124f557600080fd5b813567ffffffffffffffff81111561250c57600080fd5b611cc184828501612473565b60005b8381101561253357818101518382015260200161251b565b83811115612542576000848401525b50505050565b60008151808452612560816020860160208601612518565b601f01601f19169290920160200192915050565b602081526000611be26020830184612548565b634e487b7160e01b600052602160045260246000fd5b600681106125ad576125ad612587565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b818110156125ed578351835292840192918401916001016125d1565b5050828501518387015260408501516040870152606085015160608701526080850151925085810360808701526126248184612548565b9250505060a083015161263a60a086018261259d565b509392505050565b6020815260008251608060208401528051151560a0840152602081015161266c60c085018261259d565b50604081015161267f60e085018261259d565b50606081015161269361010085018261259d565b506080810151600981106126a9576126a9612587565b61012084015260a0015160c06101408401526126c9610160840182612548565b90506020840151601f198483030160408501526126e682826125b1565b91505060408401516060840152606084015160808401528091505092915050565b80151581146111e157600080fd5b803561272081612707565b919050565b80356006811061272057600080fd5b600060c0828403121561274657600080fd5b61274e6123d3565b9050813561275b81612707565b815261276960208301612725565b602082015261277a60408301612725565b604082015261278b60608301612725565b60608201526080820135600981106127a257600080fd5b608082015260a082013567ffffffffffffffff8111156127c157600080fd5b6127cd84828501612473565b60a08301525092915050565b600067ffffffffffffffff8211156127f3576127f36123bd565b5060051b60200190565b600082601f83011261280e57600080fd5b8135602061282361281e836127d9565b612442565b82815260059290921b8401810191818101908684111561284257600080fd5b8286015b8481101561290857803567ffffffffffffffff808211156128675760008081fd5b908801906080828b03601f19018113156128815760008081fd5b6128896123fc565b8784013561289681612707565b815260406128a5858201612725565b89830152606080860135858111156128bd5760008081fd5b6128cb8f8c838a0101612473565b84840152509285013592848411156128e557600091508182fd5b6128f38e8b86890101612473565b90830152508652505050918301918301612846565b509695505050505050565b600060a0828403121561292557600080fd5b61292d61241f565b905061293882612715565b8152602082013567ffffffffffffffff8082111561295557600080fd5b61296185838601612473565b6020840152604084013591508082111561297a57600080fd5b61298685838601612473565b6040840152606084013591508082111561299f57600080fd5b6129ab85838601612734565b606084015260808401359150808211156129c457600080fd5b506129d1848285016127fd565b60808301525092915050565b6000806000606084860312156129f257600080fd5b833567ffffffffffffffff80821115612a0a57600080fd5b612a1687838801612473565b94506020860135915080821115612a2c57600080fd5b612a3887838801612473565b93506040860135915080821115612a4e57600080fd5b50612a5b86828701612913565b9150509250925092565b6001600160a01b03811681146111e157600080fd5b60008060408385031215612a8d57600080fd5b8235612a9881612a65565b91506020830135612aa881612a65565b809150509250929050565b600060208284031215612ac557600080fd5b8135611be281612a65565b600060208284031215612ae257600080fd5b5035919050565b600082601f830112612afa57600080fd5b81356020612b0a61281e836127d9565b82815260059290921b84018101918181019086841115612b2957600080fd5b8286015b848110156129085780358352918301918301612b2d565b600060808284031215612b5657600080fd5b612b5e6123fc565b9050813567ffffffffffffffff80821115612b7857600080fd5b612b8485838601612734565b83526020840135915080821115612b9a57600080fd5b9083019060c08286031215612bae57600080fd5b612bb66123d3565b823582811115612bc557600080fd5b612bd187828601612ae9565b825250602083013560208201526040830135604082015260608301356060820152608083013582811115612c0457600080fd5b612c1087828601612473565b608083015250612c2260a08401612725565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a08688031215612c6257600080fd5b853567ffffffffffffffff80821115612c7a57600080fd5b612c8689838a01612913565b96506020880135915080821115612c9c57600080fd5b612ca889838a01612b44565b95506040880135915080821115612cbe57600080fd5b612cca89838a01612473565b94506060880135915080821115612ce057600080fd5b612cec89838a01612473565b93506080880135915080821115612d0257600080fd5b50612d0f88828901612473565b9150509295509295909350565b600181811c90821680612d3057607f821691505b60208210811415612d5157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251612d7f818460208701612518565b9190910192915050565b600080835481600182811c915080831680612da557607f831692505b6020808410821415612dc557634e487b7160e01b86526022600452602486fd5b818015612dd95760018114612dea57612e17565b60ff19861689528489019650612e17565b60008a81526020902060005b86811015612e0f5781548b820152908501908301612df6565b505084890196505b509498975050505050505050565b8315158152606060208201526000612e406060830185612548565b8281036040840152612e528185612548565b9695505050505050565b604081526000612e6f6040830185612548565b8281036020840152611b318185612548565b600060208284031215612e9357600080fd5b5051919050565b600060208284031215612eac57600080fd5b8151611be281612707565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612ee157612ee1612eb7565b5060010190565b600082821015612efa57612efa612eb7565b500390565b6000816000190483118215151615612f1957612f19612eb7565b500290565b60008219821115612f3157612f31612eb7565b500190565b60008351612f48818460208801612518565b835190830190612f5c818360208801612518565b01949350505050565b600067ffffffffffffffff808316818516808303821115612f5c57612f5c612eb7565b600067ffffffffffffffff80831681811415612fa657612fa6612eb7565b6001019392505050565b600067ffffffffffffffff83811690831681811015612fd157612fd1612eb7565b03939250505056fea26469706673582212209e0d41c3459a7f2478a7b8b29dcb98f0b5aad709165c52086a1120e40bfd01e764736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_relayer, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_relayer, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

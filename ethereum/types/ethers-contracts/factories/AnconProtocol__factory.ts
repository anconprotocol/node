/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_onlyOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "did",
        type: "string",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
    ],
    name: "convertProof",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620027373803806200273783398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b61269b806200009c6000396000f3fe6080604052600436106100d25760003560e01c806373d157171161007f578063c935256b11610059578063c935256b14610244578063d56a07e314610264578063d5a808261461029f578063e7a9f5a3146102b257600080fd5b806373d15717146101b05780638da5cb5b146101d0578063b0d264e71461022257600080fd5b8063410d0d84116100b0578063410d0d841461014e5780634ee123ea14610170578063506e44b51461019057600080fd5b8063032c568a146100d75780631366387a146100ff57806327dcd78c1461012c575b600080fd5b6100ea6100e5366004611cc9565b6102d2565b60405190151581526020015b60405180910390f35b34801561010b57600080fd5b5061011f61011a366004611d2d565b61033c565b6040516100f69190611efb565b34801561013857600080fd5b50610141610433565b6040516100f69190612002565b34801561015a57600080fd5b50610163610547565b6040516100f691906120de565b34801561017c57600080fd5b5061016361018b3660046120f1565b6105d5565b34801561019c57600080fd5b506100ea6101ab366004612126565b6105f9565b3480156101bc57600080fd5b506101636101cb36600461221b565b610631565b3480156101dc57600080fd5b506000546101fd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f6565b34801561022e57600080fd5b5061024261023d3660046123b2565b61064a565b005b34801561025057600080fd5b506100ea61025f3660046120f1565b6107be565b34801561027057600080fd5b506100ea61027f3660046120f1565b805160208183018101805160048252928201919093012091525460ff1681565b6100ea6102ad366004612410565b6107ff565b3480156102be57600080fd5b506101636102cd366004611d2d565b6108fc565b600081602001516002846040516102e99190612498565b9081526020016040518091039020908051906020019061030a929190611761565b506020808301513360009081526003835260409020815161033093919290910190611761565b50600190505b92915050565b6103446117e5565b6040805160c0810182526001808252602082018190526000828401819052606083018290526080830182905260a083018890528351828152808501909452919290816020015b604080516080810182526000808252602082015260609181018290528181019190915281526020019060019003908161038a57505060408051608081018252600180825260208201529081018790526060810186905281519192509082906000906103f7576103f76124b4565b6020908102919091018101919091526040805160a081018252600181529182019990995297880196909652606087015250505050608082015290565b61043b61181c565b61044361181c565b604080516002808252606082018352600092602083019080368337019050509050600081600081518110610479576104796124b4565b60200260200101818152505060018160018151811061049a5761049a6124b4565b6020026020010181815250506040518060c00160405280600115158152602001600160058111156104cd576104cd611e5b565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b60018054610554906124ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610580906124ca565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b805160208183018101805160028252928201919093012091528054610554906124ca565b600080610609888888888861033c565b905061062381610617610433565b858b856040015161064a565b506001979650505050505050565b60036020526000908152604090208054610554906124ca565b6106548585610923565b610662856020015183610a4b565b6106b35760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064015b60405180910390fd5b6106c1856040015182610a4b565b6107335760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f6600000000000000000000000000000000000000000000000000000000000060648201526084016106aa565b61074561073f86610a7b565b84610a4b565b6107b75760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f74000000000000000000000000000000000000000060648201526084016106aa565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146107e357600080fd5b81516107f6906001906020850190611761565b50600192915050565b60008280519060200120846040015180519060200120146108885760405162461bcd60e51b815260206004820152603560248201527f626164207061636b65743a207061636b6574206861736820697320646966666560448201527f72656e742066726f6d2069637332332076616c7565000000000000000000000060648201526084016106aa565b600160048360405161089a9190612498565b908152604051908190036020018120805492151560ff19909316929092179091557f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e906108ea9084908690612505565b60405180910390a15060019392505050565b6060600061090d848489898961033c565b905061091881610a7b565b979650505050505050565b610931826060015182610aea565b6060810151158061094b5750806060015182608001515110155b6109975760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106aa565b604081015115806109b15750806040015182608001515110155b6109fd5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106aa565b60005b826080015151811015610a4657610a3483608001518281518110610a2657610a266124b4565b602002602001015183610d38565b80610a3e81612540565b915050610a00565b505050565b60008151835114610a5e57506000610336565b825160208381018281209186019283209091145b95945050505050565b60606000610a96836060015184602001518560400151610f03565b905060005b836080015151811015610ae357610acf84608001518281518110610ac157610ac16124b4565b602002602001015183611024565b915080610adb81612540565b915050610a9b565b5092915050565b8051602001516005811115610b0157610b01611e5b565b82602001516005811115610b1757610b17611e5b565b14610b645760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106aa565b8051604001516005811115610b7b57610b7b611e5b565b82604001516005811115610b9157610b91611e5b565b14610bde5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106aa565b8051606001516005811115610bf557610bf5611e5b565b82606001516005811115610c0b57610c0b611e5b565b14610c585760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106aa565b8051608001516008811115610c6f57610c6f611e5b565b82608001516008811115610c8557610c85611e5b565b14610cd25760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f7000000000000060448201526064016106aa565b610ce88260a00151826000015160a001516110d3565b610d345760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e672070726566697800000000000000000060448201526064016106aa565b5050565b8051602001516005811115610d4f57610d4f611e5b565b82602001516005811115610d6557610d65611e5b565b14610db25760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106aa565b610dc88260400151826000015160a001516110d3565b15610e155760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e6720707265666978000000000000000060448201526064016106aa565b8060200151604001518260400151511015610e725760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106aa565b6020808201519081015190515160009190610e8f9060019061255b565b610e999190612572565b905080826020015160600151610eaf9190612591565b8360400151511115610a465760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106aa565b60606000835111610f565760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b657900000000000000000000000000000060448201526064016106aa565b6000825111610fa75760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c75650000000000000000000000000060448201526064016106aa565b60008460a00151610fc1866040015187608001518761118c565b604051602001610fd29291906125a9565b604051602081830303815290604052610ff4866060015187608001518661118c565b6040516020016110059291906125a9565b6040516020818303038152906040529050610a728560200151826111a9565b606060008251116110775760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c756500000000000060448201526064016106aa565b6110cc83602001518460400151846040516020016110969291906125a9565b60408051601f198184030181529082905260608701516110b8926020016125a9565b6040516020818303038152906040526111a9565b9392505050565b60008151835110156110e757506000610336565b60005b825181101561033057828181518110611105576111056124b4565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110611144576111446124b4565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461117a576000915050610336565b8061118481612540565b9150506110ea565b60606111a18361119c86856113c7565b6113f4565b949350505050565b606060018360058111156111bf576111bf611e5b565b14156112245761121d6002836040516111d89190612498565b602060405180830381855afa1580156111f5573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061121891906125d8565b611588565b9050610336565b600283600581111561123857611238611e5b565b14156112865760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e7465640000000000000000000060448201526064016106aa565b600483600581111561129a5761129a611e5b565b14156112ee5761121d6003836040516112b39190612498565b602060405180830381855afa1580156112d0573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916611588565b600583600581111561130257611302611e5b565b141561137f57600060028360405161131a9190612498565b602060405180830381855afa158015611337573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061135a91906125d8565b9050611377600361136a83611588565b6040516112b39190612498565b915050610336565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f70000000000000000000000000000060448201526064016106aa565b606060008360058111156113dd576113dd611e5b565b14156113ea575080610336565b6110cc83836111a9565b6060600083600881111561140a5761140a611e5b565b1415611417575080610336565b600183600881111561142b5761142b611e5b565b14156114635761143b82516115b2565b8260405160200161144d9291906125a9565b6040516020818303038152906040529050610336565b600783600881111561147757611477611e5b565b14156114d55781516020146114ce5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420333220627974657300000000000000000000000000000060448201526064016106aa565b5080610336565b60088360088111156114e9576114e9611e5b565b14156115405781516040146114ce5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420363420627974657300000000000000000000000000000060448201526064016106aa565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f7000000000000000000000000060448201526064016106aa565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156115f05760078267ffffffffffffffff16901c91506001816115e991906125f1565b90506115b8565b60008167ffffffffffffffff1667ffffffffffffffff811115611615576116156118da565b6040519080825280601f01601f19166020018201604052801561163f576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156116dd5783607f1660801760f81b828267ffffffffffffffff168151811061168a5761168a6124b4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806116d590612614565b915050611648565b507f7f000000000000000000000000000000000000000000000000000000000000008161170b60018561263c565b67ffffffffffffffff1681518110611725576117256124b4565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b82805461176d906124ca565b90600052602060002090601f01602090048101928261178f57600085556117d5565b82601f106117a857805160ff19168380011785556117d5565b828001600101855582156117d5579182015b828111156117d55782518255916020019190600101906117ba565b506117e1929150611850565b5090565b6040518060a00160405280600015158152602001606081526020016060815260200161180f611865565b8152602001606081525090565b604051806080016040528061182f611865565b815260200161183c611894565b815260200160008152602001600081525090565b5b808211156117e15760008155600101611851565b6040805160c081019091526000808252602082019081526020016000815260200160008152602001600061180f565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160608152602001600060058111156118d5576118d5611e5b565b905290565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715611913576119136118da565b60405290565b6040516080810167ffffffffffffffff81118282101715611913576119136118da565b60405160a0810167ffffffffffffffff81118282101715611913576119136118da565b604051601f8201601f1916810167ffffffffffffffff81118282101715611988576119886118da565b604052919050565b600082601f8301126119a157600080fd5b813567ffffffffffffffff8111156119bb576119bb6118da565b6119ce601f8201601f191660200161195f565b8181528460208386010111156119e357600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114611a1057600080fd5b919050565b803560068110611a1057600080fd5b600060c08284031215611a3657600080fd5b611a3e6118f0565b9050611a4982611a00565b8152611a5760208301611a15565b6020820152611a6860408301611a15565b6040820152611a7960608301611a15565b6060820152608082013560098110611a9057600080fd5b608082015260a082013567ffffffffffffffff811115611aaf57600080fd5b611abb84828501611990565b60a08301525092915050565b600067ffffffffffffffff821115611ae157611ae16118da565b5060051b60200190565b600082601f830112611afc57600080fd5b81356020611b11611b0c83611ac7565b61195f565b82815260059290921b84018101918181019086841115611b3057600080fd5b8286015b84811015611bf457803567ffffffffffffffff80821115611b555760008081fd5b908801906080828b03601f1901811315611b6f5760008081fd5b611b77611919565b611b82888501611a00565b81526040611b91818601611a15565b8983015260608086013585811115611ba95760008081fd5b611bb78f8c838a0101611990565b8484015250928501359284841115611bd157600091508182fd5b611bdf8e8b86890101611990565b90830152508652505050918301918301611b34565b509695505050505050565b600060a08284031215611c1157600080fd5b611c1961193c565b9050611c2482611a00565b8152602082013567ffffffffffffffff80821115611c4157600080fd5b611c4d85838601611990565b60208401526040840135915080821115611c6657600080fd5b611c7285838601611990565b60408401526060840135915080821115611c8b57600080fd5b611c9785838601611a24565b60608401526080840135915080821115611cb057600080fd5b50611cbd84828501611aeb565b60808301525092915050565b60008060408385031215611cdc57600080fd5b823567ffffffffffffffff80821115611cf457600080fd5b611d0086838701611990565b93506020850135915080821115611d1657600080fd5b50611d2385828601611bff565b9150509250929050565b600080600080600060a08688031215611d4557600080fd5b853567ffffffffffffffff80821115611d5d57600080fd5b611d6989838a01611990565b96506020880135915080821115611d7f57600080fd5b611d8b89838a01611990565b95506040880135915080821115611da157600080fd5b611dad89838a01611990565b94506060880135915080821115611dc357600080fd5b611dcf89838a01611990565b93506080880135915080821115611de557600080fd5b50611df288828901611990565b9150509295509295909350565b60005b83811015611e1a578181015183820152602001611e02565b83811115611e29576000848401525b50505050565b60008151808452611e47816020860160208601611dff565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60068110611e8157611e81611e5b565b9052565b80511515825260006020820151611e9f6020850182611e71565b506040820151611eb26040850182611e71565b506060820151611ec56060850182611e71565b50608082015160098110611edb57611edb611e5b565b8060808501525060a082015160c060a08501526111a160c0850182611e2f565b60006020808352835115158184015280840151604060a081860152611f2360c0860183611e2f565b915080860151601f196060818886030181890152611f418584611e2f565b945080890151925060808289870301818a0152611f5e8685611e85565b8a8201518a8203850160a08c015280518083529197508801945087870190600581901b8801890160005b82811015611ff157868a830301845287518051151583528b810151611faf8d850182611e71565b5089810151868b850152611fc587850182611e2f565b91880151848303858a0152919050611fdd8183611e2f565b998d0199958d019593505050600101611f88565b509c9b505050505050505050505050565b60006020808352835160808285015261201e60a0850182611e85565b85830151858203601f19016040870152805160c0808452815190840181905292935090919084019060009060e08501905b8083101561206f578351825292860192600192909201919086019061204f565b50858401518686015260408401516040860152606084015160608601526080840151955084810360808601526120a58187611e2f565b955050505060a081015190506120be60a0830182611e71565b505060408401516060840152606084015160808401528091505092915050565b6020815260006110cc6020830184611e2f565b60006020828403121561210357600080fd5b813567ffffffffffffffff81111561211a57600080fd5b6111a184828501611990565b60008060008060008060c0878903121561213f57600080fd5b863567ffffffffffffffff8082111561215757600080fd5b6121638a838b01611990565b9750602089013591508082111561217957600080fd5b6121858a838b01611990565b9650604089013591508082111561219b57600080fd5b6121a78a838b01611990565b955060608901359150808211156121bd57600080fd5b6121c98a838b01611990565b945060808901359150808211156121df57600080fd5b6121eb8a838b01611990565b935060a089013591508082111561220157600080fd5b5061220e89828a01611990565b9150509295509295509295565b60006020828403121561222d57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146110cc57600080fd5b600082601f83011261226257600080fd5b81356020612272611b0c83611ac7565b82815260059290921b8401810191818101908684111561229157600080fd5b8286015b84811015611bf45780358352918301918301612295565b6000608082840312156122be57600080fd5b6122c6611919565b9050813567ffffffffffffffff808211156122e057600080fd5b6122ec85838601611a24565b8352602084013591508082111561230257600080fd5b9083019060c0828603121561231657600080fd5b61231e6118f0565b82358281111561232d57600080fd5b61233987828601612251565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561236c57600080fd5b61237887828601611990565b60808301525061238a60a08401611a15565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a086880312156123ca57600080fd5b853567ffffffffffffffff808211156123e257600080fd5b6123ee89838a01611bff565b9650602088013591508082111561240457600080fd5b611d8b89838a016122ac565b60008060006060848603121561242557600080fd5b833567ffffffffffffffff8082111561243d57600080fd5b61244987838801611bff565b9450602086013591508082111561245f57600080fd5b61246b87838801611990565b9350604086013591508082111561248157600080fd5b5061248e86828701611990565b9150509250925092565b600082516124aa818460208701611dff565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806124de57607f821691505b602082108114156124ff57634e487b7160e01b600052602260045260246000fd5b50919050565b6040815260006125186040830185611e2f565b8281036020840152610a728185611e2f565b634e487b7160e01b600052601160045260246000fd5b60006000198214156125545761255461252a565b5060010190565b60008282101561256d5761256d61252a565b500390565b600081600019048311821515161561258c5761258c61252a565b500290565b600082198211156125a4576125a461252a565b500190565b600083516125bb818460208801611dff565b8351908301906125cf818360208801611dff565b01949350505050565b6000602082840312156125ea57600080fd5b5051919050565b600067ffffffffffffffff8083168185168083038211156125cf576125cf61252a565b600067ffffffffffffffff808316818114156126325761263261252a565b6001019392505050565b600067ffffffffffffffff8381169083168181101561265d5761265d61252a565b03939250505056fea26469706673582212201942762837afe35636b0cd304a29fdc0563f6a7e3385cd75bfd8148156a30d9064736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_onlyOwner, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_onlyOwner, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

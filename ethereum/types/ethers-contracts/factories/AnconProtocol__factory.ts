/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "network",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "starterFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startupFee",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "tier",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "TierAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "staked",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "includedBlocks",
        type: "uint256",
      },
    ],
    name: "TierUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "INCLUDED_BLOCKS_EPOCH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "dagGraphSubscriptions",
    outputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "includedBlocks",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "incentiveBlocksMonthly",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "incentivePercentageMonthly",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "includedBlocksStarted",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dagRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "latestRootHashTable",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "relayerHashTable",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "seq",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tiers",
    outputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "includedBlocks",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "incentiveBlocksMonthly",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "incentivePercentageMonthly",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "includedBlocksStarted",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalHeaderUpdatesByDagGraph",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalSubmittedByDagGraphUser",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "whitelistedDagGraph",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractIdentifier",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "usernonce",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "verifyContractIdentifier",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "dagAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "tier",
        type: "bytes32",
      },
    ],
    name: "registerDagGraphTier",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "height",
        type: "uint256",
      },
    ],
    name: "updateRelayerHeader",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "setPaymentToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "includedBlocks",
        type: "uint256",
      },
    ],
    name: "addTier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountStaked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "includedBlocks",
        type: "uint256",
      },
    ],
    name: "setTierSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "userProof",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProofWithKV",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060035560006004556000600555600060065562030d406013553480156200002c57600080fd5b50604051620041a3380380620041a38339810160408190526200004f9162000481565b60008054336001600160a01b0319918216178255600280549091166001600160a01b0387161790556006849055620000af907f41a42e79fd442e1d669deabe8f3fe32f1b542665aa85059cc1f8926cb82f7e9c908690859060646200019e565b620000e17fff36d9cf2b3ece1d72ede3685367f881f3c658f8552484d890f2402c99c41d31858360006101f46200019e565b6200010260008051602062004183833981519152856000806103e86200019e565b6200012f6000805160206200418383398151915285631dcd6500683635c9adc5dea000006103e862000353565b620001617f87ef372fa0bc18c38f3c64ff4da209c8dac3db34cdaf2b35aa10008cbe46579f856000806127106200019e565b620001947fbefd8c2da6d9b4da15fb731a7170809acade1d69be3360c680036bd7e08a9c7f85600080620186a06200019e565b50505050620004ce565b6000546001600160a01b03163314620001ee5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b60448201526064015b60405180910390fd5b6000858152600b6020526040902060040154851415620002515760405162461bcd60e51b815260206004820152601360248201527f7469657220616c726561647920696e20757365000000000000000000000000006044820152606401620001e5565b604051806101000160405280856001600160a01b03168152602001848152602001838152602001828152602001868152602001600081526020016000815260200143815250600b600087815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155905050847f16ef379f8f00f11ccad2cb44b63097f0f35273e2077b0c305a2c886a62c389ba60405160405180910390a25050505050565b6000546001600160a01b031633146200039f5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b6044820152606401620001e5565b6000858152600b60205260409020600401548514620003f05760405162461bcd60e51b815260206004820152600c60248201526b36b4b9b9b4b733903a34b2b960a11b6044820152606401620001e5565b6000858152600b602090815260409182902080546001600160a01b0319166001600160a01b03881690811782556001820187905560028201869055600390910184905582519081529081018590529081018390526060810182905285907f78464b89639a347f1d6ed1cb7af1b1dc50ad7fdaecae1fff5d93f3dcc65fd8379060800160405180910390a25050505050565b600080600080608085870312156200049857600080fd5b84516001600160a01b0381168114620004b057600080fd5b60208601516040870151606090970151919890975090945092505050565b613ca580620004de6000396000f3fe60806040526004361061026a5760003560e01c806370ae92d211610153578063a848e0ec116100cb578063d087d2881161007f578063d615657111610064578063d6156571146107e2578063e9cbd82214610802578063e9f49b531461082257600080fd5b8063d087d28814610785578063d56a07e3146107a757600080fd5b8063b0e21e8a116100b0578063b0e21e8a1461073a578063bb22914714610750578063c284bdf31461077057600080fd5b8063a848e0ec146106fa578063b0d264e71461071a57600080fd5b80638da5cb5b11610122578063998b32e811610107578063998b32e8146106a4578063a195c3e3146106c4578063a21c87d8146106e457600080fd5b80638da5cb5b1461066457806397554e8f1461068457600080fd5b806370ae92d21461058f57806373d15717146105bc5780638406c079146105dc57806389f902f6146105fc57600080fd5b806351ceefe7116101e65780635eccc371116101b55780636857ab401161019a5780636857ab4014610539578063693ac4fb1461054f5780636a326ab11461056f57600080fd5b80635eccc371146104f9578063634b87581461051957600080fd5b806351ceefe71461048057806351cff8d9146104b0578063590f862e146104d05780635dad28de146104e357600080fd5b806316afc7831161023d57806327dcd78c1161022257806327dcd78c146104295780633aeac4e11461044b5780634bf26de61461046d57600080fd5b806316afc783146103445780631e8e454c146103f157600080fd5b8063016440281461026f57806305c24853146102a55780630d358d75146102f357806314263b191461032e575b600080fd5b34801561027b57600080fd5b5061028f61028a366004612fa4565b610842565b60405161029c9190613035565b60405180910390f35b3480156102b157600080fd5b506102db6102c0366004613048565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161029c565b3480156102ff57600080fd5b5061032061030e366004613089565b600d6020526000908152604090205481565b60405190815260200161029c565b34801561033a57600080fd5b5061032060135481565b34801561035057600080fd5b506103ac61035f366004613089565b600c60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03909616969495939492939192909188565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161029c565b3480156103fd57600080fd5b5061032061040c3660046130a6565b600e60209081526000928352604080842090915290825290205481565b34801561043557600080fd5b5061043e6108e7565b60405161029c919061319a565b34801561045757600080fd5b5061046b6104663660046130a6565b6109fb565b005b61046b61047b36600461325f565b610ba6565b34801561048c57600080fd5b506104a061049b366004613580565b610fb4565b604051901515815260200161029c565b3480156104bc57600080fd5b5061046b6104cb366004613089565b61106b565b61046b6104de366004613612565b611171565b3480156104ef57600080fd5b5061032060045481565b34801561050557600080fd5b5061028f610514366004613048565b6112cb565b34801561052557600080fd5b5061046b61053436600461364a565b61136d565b34801561054557600080fd5b50610320600f5481565b34801561055b57600080fd5b5061028f61056a366004612fa4565b6114a4565b34801561057b57600080fd5b5061046b61058a366004613089565b6114cf565b34801561059b57600080fd5b506103206105aa366004613089565b60106020526000908152604090205481565b3480156105c857600080fd5b5061028f6105d7366004613089565b611515565b3480156105e857600080fd5b506001546102db906001600160a01b031681565b34801561060857600080fd5b506103ac610617366004613048565b600b60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03909616969495939492939192909188565b34801561067057600080fd5b506000546102db906001600160a01b031681565b34801561069057600080fd5b506104a061069f366004613692565b61152e565b3480156106b057600080fd5b506104a06106bf366004613580565b6117ca565b3480156106d057600080fd5b5061028f6106df366004613758565b6119fe565b3480156106f057600080fd5b5061032060055481565b34801561070657600080fd5b5061028f610715366004613048565b611a22565b34801561072657600080fd5b5061046b6107353660046138db565b611a3b565b34801561074657600080fd5b5061032060035481565b34801561075c57600080fd5b5061046b61076b36600461364a565b611baa565b34801561077c57600080fd5b50610320611d57565b34801561079157600080fd5b5033600090815260106020526040902054610320565b3480156107b357600080fd5b506104a06107c2366004612fa4565b805160208183018101805160098252928201919093012091525460ff1681565b3480156107ee57600080fd5b506104a06107fd366004613612565b611da4565b34801561080e57600080fd5b506002546102db906001600160a01b031681565b34801561082e57600080fd5b506104a061083d366004612fa4565b611e19565b805160208183018101805160078252928201919093012091528054610866906139ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610892906139ad565b80156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b505050505081565b6108ef612d42565b6108f7612d42565b60408051600280825260608201835260009260208301908036833701905050905060008160008151811061092d5761092d6139e8565b60200260200101818152505060018160018151811061094e5761094e6139e8565b6020026020010181815250506040518060c0016040528060011515815260200160016005811115610981576109816130df565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b6000546001600160a01b03163314610a1257600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d91906139fe565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d9190613a17565b610b5e5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064015b60405180910390fd5b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610b9991815260200190565b60405180910390a2505050565b6000838152600a60205260409020546001600160a01b03163314610c0c5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964207573657200000000000000000000000000000000000000006044820152606401610b55565b336000818152600c6020908152604080832081516101008101835281546001600160a01b0390811682526001830154828601526002830154828501526003830154606083015260048084015460808401819052600585015460a0850152600685015460c085015260079094015460e0840152928652600b9094528285205492516370a0823160e01b8152918201959095529116919082906370a0823190602401602060405180830381865afa158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced91906139fe565b11610d3a5760405162461bcd60e51b815260206004820152601160248201527f6e6f20656e6f7567682062616c616e63650000000000000000000000000000006044820152606401610b55565b606082015115610d5f5760018260600151610d559190613a4a565b6060830152610e54565b60808201516000908152600b6020526040908190206001015490517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101919091526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e089190613a17565b610e545760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e740000006044820152606401610b55565b60008260e0015143610e669190613a4a565b9050601354811115610e955760808301516000908152600b602052604090206003015460608401524360e08401525b600086815260126020908152604080832087845282529091208651610ebc92880190612d9f565b5060008681526011602090815260409091208651610edc92880190612d9f565b506080830180516000818152600b602090815260408083205494518352918290206001015482516001600160a01b039095168552908401529091889133917ffa3b66570e1859a499f11774a3c47f5bdcd4fc6b9fef49f47066729785ee180c910160405180910390a4600f54610f53906001613a61565b600f55336000908152600d6020526040902054610f71906001613a61565b336000908152600d602052604080822092909255905187917fc4c76143cbd497adc2b5bc159d932dcfa8483928a0d22661d1404ef1c68984a191a2505050505050565b600061106082610fc26108e7565b60008881526011602052604090208054610fdb906139ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611007906139ad565b80156110545780601f1061102957610100808354040283529160200191611054565b820191906000526020600020905b81548152906001019060200180831161103757829003601f168201915b50505050508787611a3b565b506001949350505050565b6000546001600160a01b0316331461108257600080fd5b604051479060009081906001600160a01b0385169084908381818185875af1925050503d80600081146110d1576040519150601f19603f3d011682016040523d82523d6000602084013e6110d6565b606091505b5091509150816111285760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606401610b55565b836001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58460405161116391815260200190565b60405180910390a250505050565b6000838152600a60205260409020546001600160a01b0316156111d65760405162461bcd60e51b815260206004820152600e60248201527f6d6f6e696b6572206578697374730000000000000000000000000000000000006044820152606401610b55565b6000818152600b602052604090206004015481146112255760405162461bcd60e51b815260206004820152600c60248201526b36b4b9b9b4b733903a34b2b960a11b6044820152606401610b55565b6000928352600a6020908152604080852080546001600160a01b0395861673ffffffffffffffffffffffffffffffffffffffff199182168117909255938652600b8352818620908652600c9092529093208354815490921691909216178155600182810154908201556002808301549082015560038083015490820155600480830154908201556005808301549082015560068083015490820155600791820154910155565b60008181526011602052604090208054606091906112e8906139ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611314906139ad565b80156113615780601f1061133657610100808354040283529160200191611361565b820191906000526020600020905b81548152906001019060200180831161134457829003601f168201915b50505050509050919050565b6000546001600160a01b031633146113b75760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b6044820152606401610b55565b6000858152600b602052604090206004015485146114065760405162461bcd60e51b815260206004820152600c60248201526b36b4b9b9b4b733903a34b2b960a11b6044820152606401610b55565b6000858152600b6020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03881690811782556001820187905560028201869055600390910184905582519081529081018590529081018390526060810182905285907f78464b89639a347f1d6ed1cb7af1b1dc50ad7fdaecae1fff5d93f3dcc65fd8379060800160405180910390a25050505050565b60606007826040516114b69190613a79565b908152602001604051809103902080546112e8906139ad565b6000546001600160a01b031633146114e657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60086020526000908152604090208054610866906139ad565b60006009846040516115409190613a79565b9081526040519081900360200190205460ff16156115c55760405162461bcd60e51b8152602060048201526024808201527f70726f6f6620686173206265656e207375626d69747465642028666f756e642060448201527f6b657929000000000000000000000000000000000000000000000000000000006064820152608401610b55565b8380519060200120826020015180519060200120146116145760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b6044820152606401610b55565b84602001518051906020012060086000886001600160a01b03166001600160a01b031681526020019081526020016000206040516116529190613a95565b6040518091039020146116a75760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642075736572206b6579000000000000000000000000000000006044820152606401610b55565b6116b18786611e44565b6116fd5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420757365722070726f6f6600000000000000000000000000006044820152606401610b55565b6117078783611e44565b61171057600080fd5b60016009856040516117229190613a79565b9081526040805160209281900383019020805460ff1916931515939093179092553360009081526010909152205461175b906001613a61565b3360009081526010602052604090819020919091555161177c908590613a79565b60405180910390207f6fc7f6a61226dca85dedfb3642afdfbd9aeca6b161137d0c9a09e01a5e4baeee84896040516117b5929190613b31565b60405180910390a25060019695505050505050565b600083805190602001208260200151805190602001201461181b5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b6044820152606401610b55565b6118258583611e44565b6118715760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610b55565b6007836040516118819190613a79565b90815260405190819003602001812061189991613a95565b6040518091039020848051906020012014156118f75760405162461bcd60e51b815260206004820152601760248201527f7573657220616c726561647920726567697374657265640000000000000000006044820152606401610b55565b6000858152600a60209081526040808320546001600160a01b03168352600e825280832033845290915290205461192f906001613a61565b6000868152600a60209081526040808320546001600160a01b03168352600e82528083203384529091529081902091909155518490600790611972908690613a79565b90815260200160405180910390209080519060200190611993929190612d9f565b5033600090815260086020908152604090912085516119b492870190612d9f565b507f7b72d06bd8ccc7a748cfdb8b1df6913a277497c808af0288d0d6c0eb06b3b7b660018585886040516119eb9493929190613b53565b60405180910390a1506001949350505050565b601260209081526000928352604080842090915290825290208054610866906139ad565b60116020526000908152604090208054610866906139ad565b611a458585611f02565b611a5385602001518361202a565b611a9f5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f666044820152606401610b55565b611aad85604001518261202a565b611b1f5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f660000000000000000000000000000000000000000000000000000000000006064820152608401610b55565b611b31611b2b8661205a565b8461202a565b611ba35760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f7400000000000000000000000000000000000000006064820152608401610b55565b5050505050565b6000546001600160a01b03163314611bf45760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b6044820152606401610b55565b6000858152600b6020526040902060040154851415611c555760405162461bcd60e51b815260206004820152601360248201527f7469657220616c726561647920696e20757365000000000000000000000000006044820152606401610b55565b604051806101000160405280856001600160a01b03168152602001848152602001838152602001828152602001868152602001600081526020016000815260200143815250600b600087815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155905050847f16ef379f8f00f11ccad2cb44b63097f0f35273e2077b0c305a2c886a62c389ba60405160405180910390a25050505050565b600060065430604051602001611d8992919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905090565b60008160065430604051602001611dd792919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120148015611e1157506001600160a01b03831660009081526010602052604090205484145b949350505050565b6000600982604051611e2b9190613a79565b9081526040519081900360200190205460ff1692915050565b6000611ef882611e526108e7565b60008681526011602052604090208054611e6b906139ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611e97906139ad565b8015611ee45780601f10611eb957610100808354040283529160200191611ee4565b820191906000526020600020905b815481529060010190602001808311611ec757829003601f168201915b505050505085602001518660400151611a3b565b5060015b92915050565b611f108260600151826120c9565b60608101511580611f2a5750806060015182608001515110155b611f765760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610b55565b60408101511580611f905750806040015182608001515110155b611fdc5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610b55565b60005b8260800151518110156120255761201383608001518281518110612005576120056139e8565b602002602001015183612317565b8061201d81613b92565b915050611fdf565b505050565b6000815183511461203d57506000611efc565b825160208381018281209186019283209091145b95945050505050565b606060006120758360600151846020015185604001516124e2565b905060005b8360800151518110156120c2576120ae846080015182815181106120a0576120a06139e8565b602002602001015183612603565b9150806120ba81613b92565b91505061207a565b5092915050565b80516020015160058111156120e0576120e06130df565b826020015160058111156120f6576120f66130df565b146121435760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610b55565b805160400151600581111561215a5761215a6130df565b82604001516005811115612170576121706130df565b146121bd5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610b55565b80516060015160058111156121d4576121d46130df565b826060015160058111156121ea576121ea6130df565b146122375760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610b55565b805160800151600881111561224e5761224e6130df565b82608001516008811115612264576122646130df565b146122b15760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f700000000000006044820152606401610b55565b6122c78260a00151826000015160a001516126b2565b6123135760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e67207072656669780000000000000000006044820152606401610b55565b5050565b805160200151600581111561232e5761232e6130df565b82602001516005811115612344576123446130df565b146123915760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610b55565b6123a78260400151826000015160a001516126b2565b156123f45760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e672070726566697800000000000000006044820152606401610b55565b80602001516040015182604001515110156124515760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610b55565b602080820151908101519051516000919061246e90600190613a4a565b6124789190613bad565b90508082602001516060015161248e9190613a61565b83604001515111156120255760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610b55565b606060008351116125355760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b65790000000000000000000000000000006044820152606401610b55565b60008251116125865760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c7565000000000000000000000000006044820152606401610b55565b60008460a001516125a08660400151876080015187612775565b6040516020016125b1929190613bcc565b6040516020818303038152906040526125d38660600151876080015186612775565b6040516020016125e4929190613bcc565b604051602081830303815290604052905061205185602001518261278a565b606060008251116126565760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c75650000000000006044820152606401610b55565b6126ab8360200151846040015184604051602001612675929190613bcc565b60408051601f1981840301815290829052606087015161269792602001613bcc565b60405160208183030381529060405261278a565b9392505050565b60008151835110156126c657506000611efc565b60005b825181101561276b578281815181106126e4576126e46139e8565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110612723576127236139e8565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614612759576000915050611efc565b8061276381613b92565b9150506126c9565b5060019392505050565b6060611e118361278586856129a8565b6129d5565b606060018360058111156127a0576127a06130df565b1415612805576127fe6002836040516127b99190613a79565b602060405180830381855afa1580156127d6573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127f991906139fe565b612b69565b9050611efc565b6002836005811115612819576128196130df565b14156128675760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e746564000000000000000000006044820152606401610b55565b600483600581111561287b5761287b6130df565b14156128cf576127fe6003836040516128949190613a79565b602060405180830381855afa1580156128b1573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916612b69565b60058360058111156128e3576128e36130df565b14156129605760006002836040516128fb9190613a79565b602060405180830381855afa158015612918573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061293b91906139fe565b9050612958600361294b83612b69565b6040516128949190613a79565b915050611efc565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f7000000000000000000000000000006044820152606401610b55565b606060008360058111156129be576129be6130df565b14156129cb575080611efc565b6126ab838361278a565b606060008360088111156129eb576129eb6130df565b14156129f8575080611efc565b6001836008811115612a0c57612a0c6130df565b1415612a4457612a1c8251612b93565b82604051602001612a2e929190613bcc565b6040516020818303038152906040529050611efc565b6007836008811115612a5857612a586130df565b1415612ab6578151602014612aaf5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642033322062797465730000000000000000000000000000006044820152606401610b55565b5080611efc565b6008836008811115612aca57612aca6130df565b1415612b21578151604014612aaf5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642036342062797465730000000000000000000000000000006044820152606401610b55565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f700000000000000000000000006044820152606401610b55565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff161115612bd15760078267ffffffffffffffff16901c9150600181612bca9190613bfb565b9050612b99565b60008167ffffffffffffffff1667ffffffffffffffff811115612bf657612bf6612e7e565b6040519080825280601f01601f191660200182016040528015612c20576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff161015612cbe5783607f1660801760f81b828267ffffffffffffffff1681518110612c6b57612c6b6139e8565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c93508080612cb690613c1e565b915050612c29565b507f7f0000000000000000000000000000000000000000000000000000000000000081612cec600185613c46565b67ffffffffffffffff1681518110612d0657612d066139e8565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e083018290526101008301919091526060610120830152815260208101612d8b612e23565b815260200160008152602001600081525090565b828054612dab906139ad565b90600052602060002090601f016020900481019282612dcd5760008555612e13565b82601f10612de657805160ff1916838001178555612e13565b82800160010185558215612e13579182015b82811115612e13578251825591602001919060010190612df8565b50612e1f929150612e69565b5090565b6040518060c00160405280606081526020016000815260200160008152602001600081526020016060815260200160006005811115612e6457612e646130df565b905290565b5b80821115612e1f5760008155600101612e6a565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612eb757612eb7612e7e565b60405290565b6040516080810167ffffffffffffffff81118282101715612eb757612eb7612e7e565b60405160a0810167ffffffffffffffff81118282101715612eb757612eb7612e7e565b604051601f8201601f1916810167ffffffffffffffff81118282101715612f2c57612f2c612e7e565b604052919050565b600082601f830112612f4557600080fd5b813567ffffffffffffffff811115612f5f57612f5f612e7e565b612f72601f8201601f1916602001612f03565b818152846020838601011115612f8757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612fb657600080fd5b813567ffffffffffffffff811115612fcd57600080fd5b611e1184828501612f34565b60005b83811015612ff4578181015183820152602001612fdc565b83811115613003576000848401525b50505050565b60008151808452613021816020860160208601612fd9565b601f01601f19169290920160200192915050565b6020815260006126ab6020830184613009565b60006020828403121561305a57600080fd5b5035919050565b6001600160a01b038116811461307657600080fd5b50565b803561308481613061565b919050565b60006020828403121561309b57600080fd5b81356126ab81613061565b600080604083850312156130b957600080fd5b82356130c481613061565b915060208301356130d481613061565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60068110613105576131056130df565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b8181101561314557835183529284019291840191600101613129565b50508285015183870152604085015160408701526060850151606087015260808501519250858103608087015261317c8184613009565b9250505060a083015161319260a08601826130f5565b509392505050565b6020815260008251608060208401528051151560a084015260208101516131c460c08501826130f5565b5060408101516131d760e08501826130f5565b5060608101516131eb6101008501826130f5565b50608081015160098110613201576132016130df565b61012084015260a0015160c0610140840152613221610160840182613009565b90506020840151601f1984830301604085015261323e8282613109565b91505060408401516060840152606084015160808401528091505092915050565b60008060006060848603121561327457600080fd5b83359250602084013567ffffffffffffffff81111561329257600080fd5b61329e86828701612f34565b925050604084013590509250925092565b801515811461307657600080fd5b8035613084816132af565b80356006811061308457600080fd5b600060c082840312156132e957600080fd5b6132f1612e94565b905081356132fe816132af565b815261330c602083016132c8565b602082015261331d604083016132c8565b604082015261332e606083016132c8565b606082015260808201356009811061334557600080fd5b608082015260a082013567ffffffffffffffff81111561336457600080fd5b61337084828501612f34565b60a08301525092915050565b600067ffffffffffffffff82111561339657613396612e7e565b5060051b60200190565b600082601f8301126133b157600080fd5b813560206133c66133c18361337c565b612f03565b82815260059290921b840181019181810190868411156133e557600080fd5b8286015b848110156134ab57803567ffffffffffffffff8082111561340a5760008081fd5b908801906080828b03601f19018113156134245760008081fd5b61342c612ebd565b87840135613439816132af565b815260406134488582016132c8565b89830152606080860135858111156134605760008081fd5b61346e8f8c838a0101612f34565b848401525092850135928484111561348857600091508182fd5b6134968e8b86890101612f34565b908301525086525050509183019183016133e9565b509695505050505050565b600060a082840312156134c857600080fd5b6134d0612ee0565b90506134db826132bd565b8152602082013567ffffffffffffffff808211156134f857600080fd5b61350485838601612f34565b6020840152604084013591508082111561351d57600080fd5b61352985838601612f34565b6040840152606084013591508082111561354257600080fd5b61354e858386016132d7565b6060840152608084013591508082111561356757600080fd5b50613574848285016133a0565b60808301525092915050565b6000806000806080858703121561359657600080fd5b84359350602085013567ffffffffffffffff808211156135b557600080fd5b6135c188838901612f34565b945060408701359150808211156135d757600080fd5b6135e388838901612f34565b935060608701359150808211156135f957600080fd5b50613606878288016134b6565b91505092959194509250565b60008060006060848603121561362757600080fd5b83359250602084013561363981613061565b929592945050506040919091013590565b600080600080600060a0868803121561366257600080fd5b85359450602086013561367481613061565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c087890312156136ab57600080fd5b863595506136bb60208801613079565b9450604087013567ffffffffffffffff808211156136d857600080fd5b6136e48a838b016134b6565b955060608901359150808211156136fa57600080fd5b6137068a838b01612f34565b9450608089013591508082111561371c57600080fd5b6137288a838b01612f34565b935060a089013591508082111561373e57600080fd5b5061374b89828a016134b6565b9150509295509295509295565b6000806040838503121561376b57600080fd5b50508035926020909101359150565b600082601f83011261378b57600080fd5b8135602061379b6133c18361337c565b82815260059290921b840181019181810190868411156137ba57600080fd5b8286015b848110156134ab57803583529183019183016137be565b6000608082840312156137e757600080fd5b6137ef612ebd565b9050813567ffffffffffffffff8082111561380957600080fd5b613815858386016132d7565b8352602084013591508082111561382b57600080fd5b9083019060c0828603121561383f57600080fd5b613847612e94565b82358281111561385657600080fd5b6138628782860161377a565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561389557600080fd5b6138a187828601612f34565b6080830152506138b360a084016132c8565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a086880312156138f357600080fd5b853567ffffffffffffffff8082111561390b57600080fd5b61391789838a016134b6565b9650602088013591508082111561392d57600080fd5b61393989838a016137d5565b9550604088013591508082111561394f57600080fd5b61395b89838a01612f34565b9450606088013591508082111561397157600080fd5b61397d89838a01612f34565b9350608088013591508082111561399357600080fd5b506139a088828901612f34565b9150509295509295909350565b600181811c908216806139c157607f821691505b602082108114156139e257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613a1057600080fd5b5051919050565b600060208284031215613a2957600080fd5b81516126ab816132af565b634e487b7160e01b600052601160045260246000fd5b600082821015613a5c57613a5c613a34565b500390565b60008219821115613a7457613a74613a34565b500190565b60008251613a8b818460208701612fd9565b9190910192915050565b600080835481600182811c915080831680613ab157607f831692505b6020808410821415613ad157634e487b7160e01b86526022600452602486fd5b818015613ae55760018114613af657613b23565b60ff19861689528489019650613b23565b60008a81526020902060005b86811015613b1b5781548b820152908501908301613b02565b505084890196505b509498975050505050505050565b604081526000613b446040830185613009565b90508260208301529392505050565b8415158152608060208201526000613b6e6080830186613009565b8281036040840152613b808186613009565b91505082606083015295945050505050565b6000600019821415613ba657613ba6613a34565b5060010190565b6000816000190483118215151615613bc757613bc7613a34565b500290565b60008351613bde818460208801612fd9565b835190830190613bf2818360208801612fd9565b01949350505050565b600067ffffffffffffffff808316818516808303821115613bf257613bf2613a34565b600067ffffffffffffffff80831681811415613c3c57613c3c613a34565b6001019392505050565b600067ffffffffffffffff83811690831681811015613c6757613c67613a34565b03939250505056fea264697066735822122016945211e8dfe56aa155820bb9bf880803b9b64a822cd70876490f740dd1920764736f6c634300080b00333b61c0fe064f998f32a3661de12f8ef66f69d3eed20df1d23c30fc57463ab9b2";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    tokenAddress: string,
    network: BigNumberish,
    starterFee: BigNumberish,
    startupFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(
      tokenAddress,
      network,
      starterFee,
      startupFee,
      overrides || {}
    ) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    tokenAddress: string,
    network: BigNumberish,
    starterFee: BigNumberish,
    startupFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenAddress,
      network,
      starterFee,
      startupFee,
      overrides || {}
    );
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_relayer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "hash",
        type: "bytes",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "ENROLL_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "SUBMIT_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setProtocolFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setAccountRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040527faa38c8fcdb8500f6802157621989c44502acc94ca3eb31e1547a766ce91448b26001557fa8a7d14acee15b581bdc62c67a1b2711ec58a960850b336a002a03c0f3367b3b600255600060065560006007553480156200006357600080fd5b506040516200310f3803806200310f833981016040819052620000869162000107565b6200009133620000b7565b600380546001600160a01b0319166001600160a01b039290921691909117905562000139565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200011a57600080fd5b81516001600160a01b03811681146200013257600080fd5b9392505050565b612fc680620001496000396000f3fe6080604052600436106101a15760003560e01c8063787dce3d116100e1578063c935256b1161008a578063e9f49b5311610064578063e9f49b5314610481578063f2a4147a146104a1578063f2fde38b146104b6578063fc7ea420146104d657600080fd5b8063c935256b14610406578063d56a07e314610426578063e9cbd8221461046157600080fd5b80638da5cb5b116100bb5780638da5cb5b146103b2578063b0d264e7146103d0578063b0e21e8a146103f057600080fd5b8063787dce3d1461033a5780638406c0791461035a5780638b178bec1461039257600080fd5b806340ae5ffa1161014e5780635dad28de116101285780635dad28de146102cf578063693ac4fb146102e5578063715018a61461030557806373d157171461031a57600080fd5b806340ae5ffa14610276578063410d0d841461029a57806351cff8d9146102af57600080fd5b8063354763d91161017f578063354763d914610221578063391506e5146102345780633aeac4e11461025457600080fd5b806301644028146101a657806327dcd78c146101dc57806332208491146101fe575b600080fd5b3480156101b257600080fd5b506101c66101c1366004612465565b6104ec565b6040516101d391906124f6565b60405180910390f35b3480156101e857600080fd5b506101f1610591565b6040516101d391906125c4565b61021161020c36600461295f565b6106a5565b60405190151581526020016101d3565b61021161022f36600461295f565b61087b565b34801561024057600080fd5b5061021161024f3660046129e7565b61094e565b34801561026057600080fd5b5061027461026f366004612a31565b6109fe565b005b34801561028257600080fd5b5061028c60015481565b6040519081526020016101d3565b3480156102a657600080fd5b506101c6610c00565b3480156102bb57600080fd5b506102746102ca366004612a6a565b610c0d565b3480156102db57600080fd5b5061028c60075481565b3480156102f157600080fd5b506101c6610300366004612465565b610cab565b34801561031157600080fd5b50610274610d5b565b34801561032657600080fd5b506101c6610335366004612a6a565b610dc1565b34801561034657600080fd5b50610274610355366004612a87565b610dda565b34801561036657600080fd5b5060035461037a906001600160a01b031681565b6040516001600160a01b0390911681526020016101d3565b34801561039e57600080fd5b506102746103ad366004612a87565b610e39565b3480156103be57600080fd5b506000546001600160a01b031661037a565b3480156103dc57600080fd5b506102746103eb366004612c01565b610e98565b3480156103fc57600080fd5b5061028c60065481565b34801561041257600080fd5b50610274610421366004612465565b611007565b34801561043257600080fd5b50610211610441366004612465565b8051602081830181018051600a8252928201919093012091525460ff1681565b34801561046d57600080fd5b5060055461037a906001600160a01b031681565b34801561048d57600080fd5b5061021161049c366004612465565b61106c565b3480156104ad57600080fd5b506101c6611097565b3480156104c257600080fd5b506102746104d1366004612a6a565b611129565b3480156104e257600080fd5b5061028c60025481565b80516020818301810180516008825292820191909301209152805461051090612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461053c90612cd3565b80156105895780601f1061055e57610100808354040283529160200191610589565b820191906000526020600020905b81548152906001019060200180831161056c57829003601f168201915b505050505081565b610599612203565b6105a1612203565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106105d7576105d7612d0e565b6020026020010181815250506001816001815181106105f8576105f8612d0e565b6020026020010181815250506040518060c001604052806001151581526020016001600581111561062b5761062b612509565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b60008380519060200120826020015180519060200120146106fb5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064015b60405180910390fd5b6107048261094e565b6107505760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016106f2565b6008836040516107609190612d24565b90815260405190819003602001812061077891612d40565b60405180910390208480519060200120146107d55760405162461bcd60e51b815260206004820152601760248201527f7573657220616c7265616479207265676973746572656400000000000000000060448201526064016106f2565b6107e16001543361120b565b836008846040516107f29190612d24565b90815260200160405180910390209080519060200190610813929190612260565b50336000908152600960209081526040909120855161083492870190612260565b507fdf285b75c61e111633bd9fdd496ccf9b449555e34d68ea7bf9db18e8f1977c706001858560405161086993929190612ddc565b60405180910390a15060019392505050565b60008380519060200120826020015180519060200120146108cc5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064016106f2565b6108d58261094e565b6108de57600080fd5b6001600a856040516108f09190612d24565b908152604051908190036020019020805491151560ff1990921691909117905560025461091d903361120b565b7f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e8484604051610869929190612e13565b60006109f68261095c610591565b6004805461096990612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461099590612cd3565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505085602001518660400151610e98565b506001919050565b6000546001600160a01b03163314610a585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc9190612e38565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190612e51565b610bb85760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016106f2565b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610bf391815260200190565b60405180910390a2505050565b6004805461051090612cd3565b6000546001600160a01b03163314610c675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b60405147808252906001600160a01b038316907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b6060600882604051610cbd9190612d24565b90815260200160405180910390208054610cd690612cd3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0290612cd3565b8015610d4f5780601f10610d2457610100808354040283529160200191610d4f565b820191906000526020600020905b815481529060010190602001808311610d3257829003601f168201915b50505050509050919050565b6000546001600160a01b03163314610db55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b610dbf600061134d565b565b6009602052600090815260409020805461051090612cd3565b6000546001600160a01b03163314610e345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b600655565b6000546001600160a01b03163314610e935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b600755565b610ea285856113b5565b610eb08560200151836114dd565b610efc5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064016106f2565b610f0a8560400151826114dd565b610f7c5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f6600000000000000000000000000000000000000000000000000000000000060648201526084016106f2565b610f8e610f888661150a565b846114dd565b6110005760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f74000000000000000000000000000000000000000060648201526084016106f2565b5050505050565b6003546001600160a01b0316331461101e57600080fd5b8051611031906004906020840190612260565b507fe0b001f59b54160030a2302b411d234315941c6c1d33a52bdb8f3c46a1dffeb88160405161106191906124f6565b60405180910390a150565b6000600a8260405161107e9190612d24565b9081526040519081900360200190205460ff1692915050565b6060600480546110a690612cd3565b80601f01602080910402602001604051908101604052809291908181526020018280546110d290612cd3565b801561111f5780601f106110f45761010080835404028352916020019161111f565b820191906000526020600020905b81548152906001019060200180831161110257829003601f168201915b5050505050905090565b6000546001600160a01b031633146111835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f2565b6001600160a01b0381166111ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106f2565b6112088161134d565b50565b600060015483141561121c57506007545b60025483141561122b57506006545b6005546006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af11580156112a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c49190612e51565b6113105760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e7400000060448201526064016106f2565b816001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b3600654604051610bf391815260200190565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6113c3826060015182611579565b606081015115806113dd5750806060015182608001515110155b6114295760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106f2565b604081015115806114435750806040015182608001515110155b61148f5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106f2565b60005b8260800151518110156114d8576114c6836080015182815181106114b8576114b8612d0e565b6020026020010151836117c7565b806114d081612e84565b915050611492565b505050565b600081518351146114f057506000611504565b508151602082810182902090840191909120145b92915050565b60606000611525836060015184602001518560400151611992565b905060005b8360800151518110156115725761155e8460800151828151811061155057611550612d0e565b602002602001015183611abc565b91508061156a81612e84565b91505061152a565b5092915050565b805160200151600581111561159057611590612509565b826020015160058111156115a6576115a6612509565b146115f35760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106f2565b805160400151600581111561160a5761160a612509565b8260400151600581111561162057611620612509565b1461166d5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106f2565b805160600151600581111561168457611684612509565b8260600151600581111561169a5761169a612509565b146116e75760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106f2565b80516080015160088111156116fe576116fe612509565b8260800151600881111561171457611714612509565b146117615760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f7000000000000060448201526064016106f2565b6117778260a00151826000015160a00151611b6b565b6117c35760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e672070726566697800000000000000000060448201526064016106f2565b5050565b80516020015160058111156117de576117de612509565b826020015160058111156117f4576117f4612509565b146118415760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106f2565b6118578260400151826000015160a00151611b6b565b156118a45760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e6720707265666978000000000000000060448201526064016106f2565b80602001516040015182604001515110156119015760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106f2565b602080820151908101519051516000919061191e90600190612e9f565b6119289190612eb6565b90508082602001516060015161193e9190612ed5565b83604001515111156114d85760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106f2565b606060008351116119e55760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b657900000000000000000000000000000060448201526064016106f2565b6000825111611a365760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c75650000000000000000000000000060448201526064016106f2565b60008460a00151611a508660400151876080015187611c2e565b604051602001611a61929190612eed565b604051602081830303815290604052611a838660600151876080015186611c2e565b604051602001611a94929190612eed565b6040516020818303038152906040529050611ab3856020015182611c4b565b95945050505050565b60606000825111611b0f5760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c756500000000000060448201526064016106f2565b611b648360200151846040015184604051602001611b2e929190612eed565b60408051601f19818403018152908290526060870151611b5092602001612eed565b604051602081830303815290604052611c4b565b9392505050565b6000815183511015611b7f57506000611504565b60005b8251811015611c2457828181518110611b9d57611b9d612d0e565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110611bdc57611bdc612d0e565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611c12576000915050611504565b80611c1c81612e84565b915050611b82565b5060019392505050565b6060611c4383611c3e8685611e69565b611e96565b949350505050565b60606001836005811115611c6157611c61612509565b1415611cc657611cbf600283604051611c7a9190612d24565b602060405180830381855afa158015611c97573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611cba9190612e38565b61202a565b9050611504565b6002836005811115611cda57611cda612509565b1415611d285760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e7465640000000000000000000060448201526064016106f2565b6004836005811115611d3c57611d3c612509565b1415611d9057611cbf600383604051611d559190612d24565b602060405180830381855afa158015611d72573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff191661202a565b6005836005811115611da457611da4612509565b1415611e21576000600283604051611dbc9190612d24565b602060405180830381855afa158015611dd9573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611dfc9190612e38565b9050611e196003611e0c8361202a565b604051611d559190612d24565b915050611504565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f70000000000000000000000000000060448201526064016106f2565b60606000836005811115611e7f57611e7f612509565b1415611e8c575080611504565b611b648383611c4b565b60606000836008811115611eac57611eac612509565b1415611eb9575080611504565b6001836008811115611ecd57611ecd612509565b1415611f0557611edd8251612054565b82604051602001611eef929190612eed565b6040516020818303038152906040529050611504565b6007836008811115611f1957611f19612509565b1415611f77578151602014611f705760405162461bcd60e51b815260206004820152601160248201527f457870656374656420333220627974657300000000000000000000000000000060448201526064016106f2565b5080611504565b6008836008811115611f8b57611f8b612509565b1415611fe2578151604014611f705760405162461bcd60e51b815260206004820152601160248201527f457870656374656420363420627974657300000000000000000000000000000060448201526064016106f2565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f7000000000000000000000000060448201526064016106f2565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156120925760078267ffffffffffffffff16901c915060018161208b9190612f1c565b905061205a565b60008167ffffffffffffffff1667ffffffffffffffff8111156120b7576120b761233f565b6040519080825280601f01601f1916602001820160405280156120e1576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff16101561217f5783607f1660801760f81b828267ffffffffffffffff168151811061212c5761212c612d0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c9350808061217790612f3f565b9150506120ea565b507f7f00000000000000000000000000000000000000000000000000000000000000816121ad600185612f67565b67ffffffffffffffff16815181106121c7576121c7612d0e565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e08301829052610100830191909152606061012083015281526020810161224c6122e4565b815260200160008152602001600081525090565b82805461226c90612cd3565b90600052602060002090601f01602090048101928261228e57600085556122d4565b82601f106122a757805160ff19168380011785556122d4565b828001600101855582156122d4579182015b828111156122d45782518255916020019190600101906122b9565b506122e092915061232a565b5090565b6040518060c0016040528060608152602001600081526020016000815260200160008152602001606081526020016000600581111561232557612325612509565b905290565b5b808211156122e0576000815560010161232b565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156123785761237861233f565b60405290565b6040516080810167ffffffffffffffff811182821017156123785761237861233f565b60405160a0810167ffffffffffffffff811182821017156123785761237861233f565b604051601f8201601f1916810167ffffffffffffffff811182821017156123ed576123ed61233f565b604052919050565b600082601f83011261240657600080fd5b813567ffffffffffffffff8111156124205761242061233f565b612433601f8201601f19166020016123c4565b81815284602083860101111561244857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561247757600080fd5b813567ffffffffffffffff81111561248e57600080fd5b611c43848285016123f5565b60005b838110156124b557818101518382015260200161249d565b838111156124c4576000848401525b50505050565b600081518084526124e281602086016020860161249a565b601f01601f19169290920160200192915050565b602081526000611b6460208301846124ca565b634e487b7160e01b600052602160045260246000fd5b6006811061252f5761252f612509565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b8181101561256f57835183529284019291840191600101612553565b5050828501518387015260408501516040870152606085015160608701526080850151925085810360808701526125a681846124ca565b9250505060a08301516125bc60a086018261251f565b509392505050565b6020815260008251608060208401528051151560a084015260208101516125ee60c085018261251f565b50604081015161260160e085018261251f565b50606081015161261561010085018261251f565b5060808101516009811061262b5761262b612509565b61012084015260a0015160c061014084015261264b6101608401826124ca565b90506020840151601f198483030160408501526126688282612533565b91505060408401516060840152606084015160808401528091505092915050565b801515811461120857600080fd5b80356126a281612689565b919050565b8035600681106126a257600080fd5b600060c082840312156126c857600080fd5b6126d0612355565b905081356126dd81612689565b81526126eb602083016126a7565b60208201526126fc604083016126a7565b604082015261270d606083016126a7565b606082015260808201356009811061272457600080fd5b608082015260a082013567ffffffffffffffff81111561274357600080fd5b61274f848285016123f5565b60a08301525092915050565b600067ffffffffffffffff8211156127755761277561233f565b5060051b60200190565b600082601f83011261279057600080fd5b813560206127a56127a08361275b565b6123c4565b82815260059290921b840181019181810190868411156127c457600080fd5b8286015b8481101561288a57803567ffffffffffffffff808211156127e95760008081fd5b908801906080828b03601f19018113156128035760008081fd5b61280b61237e565b8784013561281881612689565b815260406128278582016126a7565b898301526060808601358581111561283f5760008081fd5b61284d8f8c838a01016123f5565b848401525092850135928484111561286757600091508182fd5b6128758e8b868901016123f5565b908301525086525050509183019183016127c8565b509695505050505050565b600060a082840312156128a757600080fd5b6128af6123a1565b90506128ba82612697565b8152602082013567ffffffffffffffff808211156128d757600080fd5b6128e3858386016123f5565b602084015260408401359150808211156128fc57600080fd5b612908858386016123f5565b6040840152606084013591508082111561292157600080fd5b61292d858386016126b6565b6060840152608084013591508082111561294657600080fd5b506129538482850161277f565b60808301525092915050565b60008060006060848603121561297457600080fd5b833567ffffffffffffffff8082111561298c57600080fd5b612998878388016123f5565b945060208601359150808211156129ae57600080fd5b6129ba878388016123f5565b935060408601359150808211156129d057600080fd5b506129dd86828701612895565b9150509250925092565b6000602082840312156129f957600080fd5b813567ffffffffffffffff811115612a1057600080fd5b611c4384828501612895565b6001600160a01b038116811461120857600080fd5b60008060408385031215612a4457600080fd5b8235612a4f81612a1c565b91506020830135612a5f81612a1c565b809150509250929050565b600060208284031215612a7c57600080fd5b8135611b6481612a1c565b600060208284031215612a9957600080fd5b5035919050565b600082601f830112612ab157600080fd5b81356020612ac16127a08361275b565b82815260059290921b84018101918181019086841115612ae057600080fd5b8286015b8481101561288a5780358352918301918301612ae4565b600060808284031215612b0d57600080fd5b612b1561237e565b9050813567ffffffffffffffff80821115612b2f57600080fd5b612b3b858386016126b6565b83526020840135915080821115612b5157600080fd5b9083019060c08286031215612b6557600080fd5b612b6d612355565b823582811115612b7c57600080fd5b612b8887828601612aa0565b825250602083013560208201526040830135604082015260608301356060820152608083013582811115612bbb57600080fd5b612bc7878286016123f5565b608083015250612bd960a084016126a7565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a08688031215612c1957600080fd5b853567ffffffffffffffff80821115612c3157600080fd5b612c3d89838a01612895565b96506020880135915080821115612c5357600080fd5b612c5f89838a01612afb565b95506040880135915080821115612c7557600080fd5b612c8189838a016123f5565b94506060880135915080821115612c9757600080fd5b612ca389838a016123f5565b93506080880135915080821115612cb957600080fd5b50612cc6888289016123f5565b9150509295509295909350565b600181811c90821680612ce757607f821691505b60208210811415612d0857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251612d3681846020870161249a565b9190910192915050565b600080835481600182811c915080831680612d5c57607f831692505b6020808410821415612d7c57634e487b7160e01b86526022600452602486fd5b818015612d905760018114612da157612dce565b60ff19861689528489019650612dce565b60008a81526020902060005b86811015612dc65781548b820152908501908301612dad565b505084890196505b509498975050505050505050565b8315158152606060208201526000612df760608301856124ca565b8281036040840152612e0981856124ca565b9695505050505050565b604081526000612e2660408301856124ca565b8281036020840152611ab381856124ca565b600060208284031215612e4a57600080fd5b5051919050565b600060208284031215612e6357600080fd5b8151611b6481612689565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612e9857612e98612e6e565b5060010190565b600082821015612eb157612eb1612e6e565b500390565b6000816000190483118215151615612ed057612ed0612e6e565b500290565b60008219821115612ee857612ee8612e6e565b500190565b60008351612eff81846020880161249a565b835190830190612f1381836020880161249a565b01949350505050565b600067ffffffffffffffff808316818516808303821115612f1357612f13612e6e565b600067ffffffffffffffff80831681811415612f5d57612f5d612e6e565b6001019392505050565b600067ffffffffffffffff83811690831681811015612f8857612f88612e6e565b03939250505056fea264697066735822122025454046f7fd8d4ba7f5f3db259ab9b7663450ec6c260fb1c2aa1087ca9facb764736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_relayer, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_relayer, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

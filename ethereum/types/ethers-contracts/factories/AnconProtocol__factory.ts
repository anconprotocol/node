/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_onlyOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "did",
        type: "string",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "_leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
    ],
    name: "convertProof",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "_leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620029953803806200299583398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b6128f9806200009c6000396000f3fe6080604052600436106100d25760003560e01c806373d157171161007f578063b0d264e711610059578063b0d264e714610242578063c935256b14610264578063d56a07e314610284578063d5a80826146102bf57600080fd5b806373d15717146101a35780637946efce146101c35780638da5cb5b146101f057600080fd5b80634ee123ea116100b05780634ee123ea146101435780636441e42e146101635780636aa0a0c61461018357600080fd5b8063032c568a146100d757806327dcd78c146100ff578063410d0d8414610121575b600080fd5b6100ea6100e5366004611e7a565b6102d2565b60405190151581526020015b60405180910390f35b34801561010b57600080fd5b5061011461033c565b6040516100f69190611fda565b34801561012d57600080fd5b50610136610450565b6040516100f691906120b6565b34801561014f57600080fd5b5061013661015e3660046120c9565b6104de565b34801561016f57600080fd5b5061013661017e366004612159565b610502565b34801561018f57600080fd5b506100ea61019e366004612259565b61052d565b3480156101af57600080fd5b506101366101be366004612359565b6105f2565b3480156101cf57600080fd5b506101e36101de366004612259565b61060b565b6040516100f6919061238f565b3480156101fc57600080fd5b5060005461021d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f6565b34801561024e57600080fd5b5061026261025d36600461259c565b610822565b005b34801561027057600080fd5b506100ea61027f3660046120c9565b610996565b34801561029057600080fd5b506100ea61029f3660046120c9565b805160208183018101805160048252928201919093012091525460ff1681565b6100ea6102cd36600461266e565b6109d7565b600081602001516002846040516102e991906126f6565b9081526020016040518091039020908051906020019061030a929190611912565b506020808301513360009081526003835260409020815161033093919290910190611912565b50600190505b92915050565b610344611996565b61034c611996565b60408051600280825260608201835260009260208301908036833701905050905060008160008151811061038257610382612712565b6020026020010181815250506001816001815181106103a3576103a3612712565b6020026020010181815250506040518060c00160405280600115158152602001600160058111156103d6576103d6611ede565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b6001805461045d90612728565b80601f016020809104026020016040519081016040528092919081815260200182805461048990612728565b80156104d65780601f106104ab576101008083540402835291602001916104d6565b820191906000526020600020905b8154815290600101906020018083116104b957829003601f168201915b505050505081565b80516020818301810180516002825292820191909301209152805461045d90612728565b6060600061051584848a8c8b8b8b61060b565b905061052081610ad4565b9998505050505050505050565b60008061053f8989898989898961060b565b90506105e38161054d61033c565b6001805461055a90612728565b80601f016020809104026020016040519081016040528092919081815260200182805461058690612728565b80156105d35780601f106105a8576101008083540402835291602001916105d3565b820191906000526020600020905b8154815290600101906020018083116105b657829003601f168201915b50505050508c8560400151610822565b50600198975050505050505050565b6003602052600090815260409020805461045d90612728565b6106136119ca565b60006040518060c001604052806001151581526020018760008151811061063c5761063c612712565b6020026020010151600581111561065557610655611ede565b600581111561066657610666611ede565b81526020018760018151811061067e5761067e612712565b6020026020010151600581111561069757610697611ede565b60058111156106a8576106a8611ede565b8152602001876002815181106106c0576106c0612712565b602002602001015160058111156106d9576106d9611ede565b60058111156106ea576106ea611ede565b81526020018760038151811061070257610702612712565b6020026020010151600881111561071b5761071b611ede565b600881111561072c5761072c611ede565b815260200188905260408051600180825281830190925291925060009190816020015b604080516080810182526000808252602082015260609181018290528181019190915281526020019060019003908161074f57905050905060405180608001604052806001151581526020018560058111156107ad576107ad611ede565b60058111156107be576107be611ede565b815260200187815260200186815250816000815181106107e0576107e0612712565b6020908102919091018101919091526040805160a081018252600181529182018c905281018a9052606081019290925260808201529050979650505050505050565b61082c8585610b43565b61083a856020015183610c6b565b61088b5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064015b60405180910390fd5b610899856040015182610c6b565b61090b5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f660000000000000000000000000000000000000000000000000000000000006064820152608401610882565b61091d61091786610ad4565b84610c6b565b61098f5760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f7400000000000000000000000000000000000000006064820152608401610882565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146109bb57600080fd5b81516109ce906001906020850190611912565b50600192915050565b6000828051906020012084604001518051906020012014610a605760405162461bcd60e51b815260206004820152603560248201527f626164207061636b65743a207061636b6574206861736820697320646966666560448201527f72656e742066726f6d2069637332332076616c756500000000000000000000006064820152608401610882565b6001600483604051610a7291906126f6565b908152604051908190036020018120805492151560ff19909316929092179091557f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e90610ac29084908690612763565b60405180910390a15060019392505050565b60606000610aef836060015184602001518560400151610c9b565b905060005b836080015151811015610b3c57610b2884608001518281518110610b1a57610b1a612712565b602002602001015183610dbc565b915080610b348161279e565b915050610af4565b5092915050565b610b51826060015182610e6b565b60608101511580610b6b5750806060015182608001515110155b610bb75760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610882565b60408101511580610bd15750806040015182608001515110155b610c1d5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610882565b60005b826080015151811015610c6657610c5483608001518281518110610c4657610c46612712565b6020026020010151836110b9565b80610c5e8161279e565b915050610c20565b505050565b60008151835114610c7e57506000610336565b825160208381018281209186019283209091145b95945050505050565b60606000835111610cee5760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b65790000000000000000000000000000006044820152606401610882565b6000825111610d3f5760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c7565000000000000000000000000006044820152606401610882565b60008460a00151610d598660400151876080015187611284565b604051602001610d6a9291906127b9565b604051602081830303815290604052610d8c8660600151876080015186611284565b604051602001610d9d9291906127b9565b6040516020818303038152906040529050610c928560200151826112a1565b60606000825111610e0f5760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c75650000000000006044820152606401610882565b610e648360200151846040015184604051602001610e2e9291906127b9565b60408051601f19818403018152908290526060870151610e50926020016127b9565b6040516020818303038152906040526112a1565b9392505050565b8051602001516005811115610e8257610e82611ede565b82602001516005811115610e9857610e98611ede565b14610ee55760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610882565b8051604001516005811115610efc57610efc611ede565b82604001516005811115610f1257610f12611ede565b14610f5f5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610882565b8051606001516005811115610f7657610f76611ede565b82606001516005811115610f8c57610f8c611ede565b14610fd95760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610882565b8051608001516008811115610ff057610ff0611ede565b8260800151600881111561100657611006611ede565b146110535760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f700000000000006044820152606401610882565b6110698260a00151826000015160a001516114bf565b6110b55760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e67207072656669780000000000000000006044820152606401610882565b5050565b80516020015160058111156110d0576110d0611ede565b826020015160058111156110e6576110e6611ede565b146111335760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610882565b6111498260400151826000015160a001516114bf565b156111965760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e672070726566697800000000000000006044820152606401610882565b80602001516040015182604001515110156111f35760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610882565b6020808201519081015190515160009190611210906001906127e8565b61121a91906127ff565b905080826020015160600151611230919061281e565b8360400151511115610c665760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610882565b6060611299836112948685611578565b6115a5565b949350505050565b606060018360058111156112b7576112b7611ede565b141561131c576113156002836040516112d091906126f6565b602060405180830381855afa1580156112ed573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906113109190612836565b611739565b9050610336565b600283600581111561133057611330611ede565b141561137e5760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e746564000000000000000000006044820152606401610882565b600483600581111561139257611392611ede565b14156113e6576113156003836040516113ab91906126f6565b602060405180830381855afa1580156113c8573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916611739565b60058360058111156113fa576113fa611ede565b141561147757600060028360405161141291906126f6565b602060405180830381855afa15801561142f573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114529190612836565b905061146f600361146283611739565b6040516113ab91906126f6565b915050610336565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f7000000000000000000000000000006044820152606401610882565b60008151835110156114d357506000610336565b60005b8251811015610330578281815181106114f1576114f1612712565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684828151811061153057611530612712565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611566576000915050610336565b806115708161279e565b9150506114d6565b6060600083600581111561158e5761158e611ede565b141561159b575080610336565b610e6483836112a1565b606060008360088111156115bb576115bb611ede565b14156115c8575080610336565b60018360088111156115dc576115dc611ede565b1415611614576115ec8251611763565b826040516020016115fe9291906127b9565b6040516020818303038152906040529050610336565b600783600881111561162857611628611ede565b141561168657815160201461167f5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642033322062797465730000000000000000000000000000006044820152606401610882565b5080610336565b600883600881111561169a5761169a611ede565b14156116f157815160401461167f5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642036342062797465730000000000000000000000000000006044820152606401610882565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f700000000000000000000000006044820152606401610882565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156117a15760078267ffffffffffffffff16901c915060018161179a919061284f565b9050611769565b60008167ffffffffffffffff1667ffffffffffffffff8111156117c6576117c6611a8b565b6040519080825280601f01601f1916602001820160405280156117f0576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff16101561188e5783607f1660801760f81b828267ffffffffffffffff168151811061183b5761183b612712565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c9350808061188690612872565b9150506117f9565b507f7f00000000000000000000000000000000000000000000000000000000000000816118bc60018561289a565b67ffffffffffffffff16815181106118d6576118d6612712565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b82805461191e90612728565b90600052602060002090601f0160209004810192826119405760008555611986565b82601f1061195957805160ff1916838001178555611986565b82800160010185558215611986579182015b8281111561198657825182559160200191906001019061196b565b50611992929150611a01565b5090565b60405180608001604052806119a9611a16565b81526020016119b6611a45565b815260200160008152602001600081525090565b6040518060a0016040528060001515815260200160608152602001606081526020016119f4611a16565b8152602001606081525090565b5b808211156119925760008155600101611a02565b6040805160c08101909152600080825260208201908152602001600081526020016000815260200160006119f4565b6040518060c00160405280606081526020016000815260200160008152602001600081526020016060815260200160006005811115611a8657611a86611ede565b905290565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715611ac457611ac4611a8b565b60405290565b6040516080810167ffffffffffffffff81118282101715611ac457611ac4611a8b565b60405160a0810167ffffffffffffffff81118282101715611ac457611ac4611a8b565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b3957611b39611a8b565b604052919050565b600082601f830112611b5257600080fd5b813567ffffffffffffffff811115611b6c57611b6c611a8b565b611b7f601f8201601f1916602001611b10565b818152846020838601011115611b9457600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114611bc157600080fd5b919050565b803560068110611bc157600080fd5b600060c08284031215611be757600080fd5b611bef611aa1565b9050611bfa82611bb1565b8152611c0860208301611bc6565b6020820152611c1960408301611bc6565b6040820152611c2a60608301611bc6565b6060820152608082013560098110611c4157600080fd5b608082015260a082013567ffffffffffffffff811115611c6057600080fd5b611c6c84828501611b41565b60a08301525092915050565b600067ffffffffffffffff821115611c9257611c92611a8b565b5060051b60200190565b600082601f830112611cad57600080fd5b81356020611cc2611cbd83611c78565b611b10565b82815260059290921b84018101918181019086841115611ce157600080fd5b8286015b84811015611da557803567ffffffffffffffff80821115611d065760008081fd5b908801906080828b03601f1901811315611d205760008081fd5b611d28611aca565b611d33888501611bb1565b81526040611d42818601611bc6565b8983015260608086013585811115611d5a5760008081fd5b611d688f8c838a0101611b41565b8484015250928501359284841115611d8257600091508182fd5b611d908e8b86890101611b41565b90830152508652505050918301918301611ce5565b509695505050505050565b600060a08284031215611dc257600080fd5b611dca611aed565b9050611dd582611bb1565b8152602082013567ffffffffffffffff80821115611df257600080fd5b611dfe85838601611b41565b60208401526040840135915080821115611e1757600080fd5b611e2385838601611b41565b60408401526060840135915080821115611e3c57600080fd5b611e4885838601611bd5565b60608401526080840135915080821115611e6157600080fd5b50611e6e84828501611c9c565b60808301525092915050565b60008060408385031215611e8d57600080fd5b823567ffffffffffffffff80821115611ea557600080fd5b611eb186838701611b41565b93506020850135915080821115611ec757600080fd5b50611ed485828601611db0565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60068110611f0457611f04611ede565b9052565b60005b83811015611f23578181015183820152602001611f0b565b83811115611f32576000848401525b50505050565b60008151808452611f50816020860160208601611f08565b601f01601f19169290920160200192915050565b80511515825260006020820151611f7e6020850182611ef4565b506040820151611f916040850182611ef4565b506060820151611fa46060850182611ef4565b50608082015160098110611fba57611fba611ede565b8060808501525060a082015160c060a085015261129960c0850182611f38565b600060208083528351608082850152611ff660a0850182611f64565b85830151858203601f19016040870152805160c0808452815190840181905292935090919084019060009060e08501905b808310156120475783518252928601926001929092019190860190612027565b508584015186860152604084015160408601526060840151606086015260808401519550848103608086015261207d8187611f38565b955050505060a0810151905061209660a0830182611ef4565b505060408401516060840152606084015160808401528091505092915050565b602081526000610e646020830184611f38565b6000602082840312156120db57600080fd5b813567ffffffffffffffff8111156120f257600080fd5b61129984828501611b41565b600082601f83011261210f57600080fd5b8135602061211f611cbd83611c78565b82815260059290921b8401810191818101908684111561213e57600080fd5b8286015b84811015611da55780358352918301918301612142565b600080600080600080600060e0888a03121561217457600080fd5b873567ffffffffffffffff8082111561218c57600080fd5b6121988b838c016120fe565b985060208a01359150808211156121ae57600080fd5b6121ba8b838c01611b41565b975060408a01359150808211156121d057600080fd5b6121dc8b838c01611b41565b965060608a01359150808211156121f257600080fd5b6121fe8b838c01611b41565b955060808a0135945060a08a013591508082111561221b57600080fd5b6122278b838c01611b41565b935060c08a013591508082111561223d57600080fd5b5061224a8a828b01611b41565b91505092959891949750929550565b600080600080600080600060e0888a03121561227457600080fd5b873567ffffffffffffffff8082111561228c57600080fd5b6122988b838c01611b41565b985060208a01359150808211156122ae57600080fd5b6122ba8b838c01611b41565b975060408a01359150808211156122d057600080fd5b6122dc8b838c01611b41565b965060608a01359150808211156122f257600080fd5b6122fe8b838c016120fe565b955060808a013591508082111561231457600080fd5b6123208b838c01611b41565b945060a08a013591508082111561233657600080fd5b506123438a828b01611b41565b92505060c0880135905092959891949750929550565b60006020828403121561236b57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610e6457600080fd5b60006020808352835115158184015280840151604060a0818601526123b760c0860183611f38565b915080860151601f1960608188860301818901526123d58584611f38565b945080890151925060808289870301818a01526123f28685611f64565b8a8201518a8203850160a08c015280518083529197508801945087870190600581901b8801890160005b8281101561248557868a830301845287518051151583528b8101516124438d850182611ef4565b5089810151868b85015261245987850182611f38565b91880151848303858a01529190506124718183611f38565b998d0199958d01959350505060010161241c565b509c9b505050505050505050505050565b6000608082840312156124a857600080fd5b6124b0611aca565b9050813567ffffffffffffffff808211156124ca57600080fd5b6124d685838601611bd5565b835260208401359150808211156124ec57600080fd5b9083019060c0828603121561250057600080fd5b612508611aa1565b82358281111561251757600080fd5b612523878286016120fe565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561255657600080fd5b61256287828601611b41565b60808301525061257460a08401611bc6565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a086880312156125b457600080fd5b853567ffffffffffffffff808211156125cc57600080fd5b6125d889838a01611db0565b965060208801359150808211156125ee57600080fd5b6125fa89838a01612496565b9550604088013591508082111561261057600080fd5b61261c89838a01611b41565b9450606088013591508082111561263257600080fd5b61263e89838a01611b41565b9350608088013591508082111561265457600080fd5b5061266188828901611b41565b9150509295509295909350565b60008060006060848603121561268357600080fd5b833567ffffffffffffffff8082111561269b57600080fd5b6126a787838801611db0565b945060208601359150808211156126bd57600080fd5b6126c987838801611b41565b935060408601359150808211156126df57600080fd5b506126ec86828701611b41565b9150509250925092565b60008251612708818460208701611f08565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061273c57607f821691505b6020821081141561275d57634e487b7160e01b600052602260045260246000fd5b50919050565b6040815260006127766040830185611f38565b8281036020840152610c928185611f38565b634e487b7160e01b600052601160045260246000fd5b60006000198214156127b2576127b2612788565b5060010190565b600083516127cb818460208801611f08565b8351908301906127df818360208801611f08565b01949350505050565b6000828210156127fa576127fa612788565b500390565b600081600019048311821515161561281957612819612788565b500290565b6000821982111561283157612831612788565b500190565b60006020828403121561284857600080fd5b5051919050565b600067ffffffffffffffff8083168185168083038211156127df576127df612788565b600067ffffffffffffffff8083168181141561289057612890612788565b6001019392505050565b600067ffffffffffffffff838116908316818110156128bb576128bb612788565b03939250505056fea2646970667358221220fbf74621fe95bbddc8ba91bce32ec5040d374802e21ca03283cfa6f787c3e12264736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_onlyOwner, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_onlyOwner, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

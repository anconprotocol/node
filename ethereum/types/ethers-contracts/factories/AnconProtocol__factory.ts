/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_onlyOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "_innerOp",
        type: "bytes[][]",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "_innerOp",
        type: "bytes[][]",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "_innerOp",
        type: "bytes[][]",
      },
    ],
    name: "convertProof",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "_innerOp",
        type: "bytes[][]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "_innerOp",
        type: "bytes[][]",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200277b3803806200277b83398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b6126df806200009c6000396000f3fe6080604052600436106100d25760003560e01c80634a839d731161007f578063b0d264e711610059578063b0d264e714610239578063c935256b1461025b578063d56a07e31461027b578063e82ba41c146102b657600080fd5b80634a839d73146101a757806373d15717146101c75780638da5cb5b146101e757600080fd5b806327dcd78c116100b057806327dcd78c1461015d578063410d0d841461017f57806343b2516a1461019457600080fd5b806301644028146100d75780630db3d9dd1461010d57806313f85fee14610130575b600080fd5b3480156100e357600080fd5b506100f76100f2366004611ae1565b6102d6565b6040516101049190611b72565b60405180910390f35b61012061011b366004611ba9565b61037b565b6040519015158152602001610104565b34801561013c57600080fd5b5061015061014b366004611ba9565b610407565b6040516101049190611df0565b34801561016957600080fd5b506101726105b7565b6040516101049190611ef7565b34801561018b57600080fd5b506100f76106cb565b6101206101a2366004611ba9565b6106d8565b3480156101b357600080fd5b506101206101c2366004611ba9565b61074e565b3480156101d357600080fd5b506100f76101e2366004611fd3565b610801565b3480156101f357600080fd5b506000546102149073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610104565b34801561024557600080fd5b5061025961025436600461240a565b61081a565b005b34801561026757600080fd5b50610120610276366004611ae1565b61098e565b34801561028757600080fd5b50610120610296366004611ae1565b805160208183018101805160048252928201919093012091525460ff1681565b3480156102c257600080fd5b506100f76102d1366004611ba9565b6109cf565b8051602081830181018051600282529282019190930120915280546102fa906124dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610326906124dc565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b505050505081565b60006103898585858561074e565b61039257600080fd5b60016004866040516103a49190612517565b908152604051908190036020018120805492151560ff19909316929092179091557f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e906103f49087908790612533565b60405180910390a1506001949350505050565b61040f611842565b6040805160c081018252600180825260208201819052600092820183905260608201819052608082015260a08101859052835190919067ffffffffffffffff81111561045d5761045d6119bb565b6040519080825280602002602001820160405280156104b157816020015b604080516080810182526000808252602082015260609181018290528181019190915281526020019060019003908161047b5790505b50905060005b845181101561058a5760008582815181106104d4576104d4612558565b6020026020010151905060405180608001604052806001151581526020016001600581111561050557610505611d50565b600581111561051657610516611d50565b81526020018260008151811061052e5761052e612558565b602002602001015181526020018260018151811061054e5761054e612558565b602002602001015181525083838151811061056b5761056b612558565b602002602001018190525050808061058290612584565b9150506104b7565b506040805160a0810182526001815260208101989098528701959095526060860152505050608082015290565b6105bf611879565b6105c7611879565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106105fd576105fd612558565b60200260200101818152505060018160018151811061061e5761061e612558565b6020026020010181815250506040518060c001604052806001151581526020016001600581111561065157610651611d50565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b600180546102fa906124dc565b60006106e68585858561074e565b6106ef57600080fd5b846002856040516107009190612517565b908152602001604051809103902090805190602001906107219291906118ad565b503360009081526003602090815260409091208651610742928801906118ad565b50600195945050505050565b60008061075d86868686610407565b90506107428161076b6105b7565b60018054610778906124dc565b80601f01602080910402602001604051908101604052809291908181526020018280546107a4906124dc565b80156107f15780601f106107c6576101008083540402835291602001916107f1565b820191906000526020600020905b8154815290600101906020018083116107d457829003601f168201915b505050505089856040015161081a565b600360205260009081526040902080546102fa906124dc565b61082485856109f4565b610832856020015183610b1c565b6108835760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064015b60405180910390fd5b610891856040015182610b1c565b6109035760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f66000000000000000000000000000000000000000000000000000000000000606482015260840161087a565b61091561090f86610b49565b84610b1c565b6109875760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f740000000000000000000000000000000000000000606482015260840161087a565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146109b357600080fd5b81516109c69060019060208501906118ad565b50600192915050565b606060006109df85858886610407565b90506109ea81610b49565b9695505050505050565b610a02826060015182610bb8565b60608101511580610a1c5750806060015182608001515110155b610a685760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f72740000000000000000604482015260640161087a565b60408101511580610a825750806040015182608001515110155b610ace5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f72740000000000000000604482015260640161087a565b60005b826080015151811015610b1757610b0583608001518281518110610af757610af7612558565b602002602001015183610e06565b80610b0f81612584565b915050610ad1565b505050565b60008151835114610b2f57506000610b43565b508151602082810182902090840191909120145b92915050565b60606000610b64836060015184602001518560400151610fd1565b905060005b836080015151811015610bb157610b9d84608001518281518110610b8f57610b8f612558565b6020026020010151836110fb565b915080610ba981612584565b915050610b69565b5092915050565b8051602001516005811115610bcf57610bcf611d50565b82602001516005811115610be557610be5611d50565b14610c325760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f70000000000000000000000000000000604482015260640161087a565b8051604001516005811115610c4957610c49611d50565b82604001516005811115610c5f57610c5f611d50565b14610cac5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b65790000000000000000000000604482015260640161087a565b8051606001516005811115610cc357610cc3611d50565b82606001516005811115610cd957610cd9611d50565b14610d265760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b65790000000000000000000000604482015260640161087a565b8051608001516008811115610d3d57610d3d611d50565b82608001516008811115610d5357610d53611d50565b14610da05760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f70000000000000604482015260640161087a565b610db68260a00151826000015160a001516111aa565b610e025760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e6720707265666978000000000000000000604482015260640161087a565b5050565b8051602001516005811115610e1d57610e1d611d50565b82602001516005811115610e3357610e33611d50565b14610e805760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f70000000000000000000000000000000604482015260640161087a565b610e968260400151826000015160a001516111aa565b15610ee35760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e67207072656669780000000000000000604482015260640161087a565b8060200151604001518260400151511015610f405760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f72740000000000000000604482015260640161087a565b6020808201519081015190515160009190610f5d9060019061259f565b610f6791906125b6565b905080826020015160600151610f7d91906125d5565b8360400151511115610b175760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f72740000000000000000604482015260640161087a565b606060008351116110245760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b6579000000000000000000000000000000604482015260640161087a565b60008251116110755760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c756500000000000000000000000000604482015260640161087a565b60008460a0015161108f866040015187608001518761126d565b6040516020016110a09291906125ed565b6040516020818303038152906040526110c2866060015187608001518661126d565b6040516020016110d39291906125ed565b60405160208183030381529060405290506110f285602001518261128a565b95945050505050565b6060600082511161114e5760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c7565000000000000604482015260640161087a565b6111a3836020015184604001518460405160200161116d9291906125ed565b60408051601f1981840301815290829052606087015161118f926020016125ed565b60405160208183030381529060405261128a565b9392505050565b60008151835110156111be57506000610b43565b60005b8251811015611263578281815181106111dc576111dc612558565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684828151811061121b5761121b612558565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611251576000915050610b43565b8061125b81612584565b9150506111c1565b5060019392505050565b60606112828361127d86856114a8565b6114d5565b949350505050565b606060018360058111156112a0576112a0611d50565b1415611305576112fe6002836040516112b99190612517565b602060405180830381855afa1580156112d6573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112f9919061261c565b611669565b9050610b43565b600283600581111561131957611319611d50565b14156113675760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e74656400000000000000000000604482015260640161087a565b600483600581111561137b5761137b611d50565b14156113cf576112fe6003836040516113949190612517565b602060405180830381855afa1580156113b1573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916611669565b60058360058111156113e3576113e3611d50565b14156114605760006002836040516113fb9190612517565b602060405180830381855afa158015611418573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061143b919061261c565b9050611458600361144b83611669565b6040516113949190612517565b915050610b43565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f700000000000000000000000000000604482015260640161087a565b606060008360058111156114be576114be611d50565b14156114cb575080610b43565b6111a3838361128a565b606060008360088111156114eb576114eb611d50565b14156114f8575080610b43565b600183600881111561150c5761150c611d50565b14156115445761151c8251611693565b8260405160200161152e9291906125ed565b6040516020818303038152906040529050610b43565b600783600881111561155857611558611d50565b14156115b65781516020146115af5760405162461bcd60e51b815260206004820152601160248201527f4578706563746564203332206279746573000000000000000000000000000000604482015260640161087a565b5080610b43565b60088360088111156115ca576115ca611d50565b14156116215781516040146115af5760405162461bcd60e51b815260206004820152601160248201527f4578706563746564203634206279746573000000000000000000000000000000604482015260640161087a565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f70000000000000000000000000604482015260640161087a565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156116d15760078267ffffffffffffffff16901c91506001816116ca9190612635565b9050611699565b60008167ffffffffffffffff1667ffffffffffffffff8111156116f6576116f66119bb565b6040519080825280601f01601f191660200182016040528015611720576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156117be5783607f1660801760f81b828267ffffffffffffffff168151811061176b5761176b612558565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806117b690612658565b915050611729565b507f7f00000000000000000000000000000000000000000000000000000000000000816117ec600185612680565b67ffffffffffffffff168151811061180657611806612558565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b6040518060a00160405280600015158152602001606081526020016060815260200161186c611931565b8152602001606081525090565b604051806080016040528061188c611931565b8152602001611899611960565b815260200160008152602001600081525090565b8280546118b9906124dc565b90600052602060002090601f0160209004810192826118db5760008555611921565b82601f106118f457805160ff1916838001178555611921565b82800160010185558215611921579182015b82811115611921578251825591602001919060010190611906565b5061192d9291506119a6565b5090565b6040805160c081019091526000808252602082019081526020016000815260200160008152602001600061186c565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160608152602001600060058111156119a1576119a1611d50565b905290565b5b8082111561192d57600081556001016119a7565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156119f4576119f46119bb565b60405290565b6040516080810167ffffffffffffffff811182821017156119f4576119f46119bb565b60405160a0810167ffffffffffffffff811182821017156119f4576119f46119bb565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6957611a696119bb565b604052919050565b600082601f830112611a8257600080fd5b813567ffffffffffffffff811115611a9c57611a9c6119bb565b611aaf601f8201601f1916602001611a40565b818152846020838601011115611ac457600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611af357600080fd5b813567ffffffffffffffff811115611b0a57600080fd5b61128284828501611a71565b60005b83811015611b31578181015183820152602001611b19565b83811115611b40576000848401525b50505050565b60008151808452611b5e816020860160208601611b16565b601f01601f19169290920160200192915050565b6020815260006111a36020830184611b46565b600067ffffffffffffffff821115611b9f57611b9f6119bb565b5060051b60200190565b60008060008060808587031215611bbf57600080fd5b67ffffffffffffffff8086351115611bd657600080fd5b611be38787358801611a71565b94508060208701351115611bf657600080fd5b611c068760208801358801611a71565b93508060408701351115611c1957600080fd5b611c298760408801358801611a71565b92508060608701351115611c3c57600080fd5b6060860135860187601f820112611c5257600080fd5b611c64611c5f8235611b85565b611a40565b81358082526020808301929160051b8401018a1015611c8257600080fd5b602083015b6020843560051b850101811015611d41578481351115611ca657600080fd5b803584018b603f820112611cb957600080fd5b611cc9611c5f6020830135611b85565b602082810135808352908201919060051b83016040018e1015611ceb57600080fd5b604083015b6040602085013560051b850101811015611d30578881351115611d1257600080fd5b611d228f60408335870101611a71565b835260209283019201611cf0565b508552505060209283019201611c87565b50969995985093965050505050565b634e487b7160e01b600052602160045260246000fd5b60068110611d7657611d76611d50565b9052565b80511515825260006020820151611d946020850182611d66565b506040820151611da76040850182611d66565b506060820151611dba6060850182611d66565b50608082015160098110611dd057611dd0611d50565b8060808501525060a082015160c060a085015261128260c0850182611b46565b60006020808352835115158184015280840151604060a081860152611e1860c0860183611b46565b915080860151601f196060818886030181890152611e368584611b46565b945080890151925060808289870301818a0152611e538685611d7a565b8a8201518a8203850160a08c015280518083529197508801945087870190600581901b8801890160005b82811015611ee657868a830301845287518051151583528b810151611ea48d850182611d66565b5089810151868b850152611eba87850182611b46565b91880151848303858a0152919050611ed28183611b46565b998d0199958d019593505050600101611e7d565b509c9b505050505050505050505050565b600060208083528351608082850152611f1360a0850182611d7a565b85830151858203601f19016040870152805160c0808452815190840181905292935090919084019060009060e08501905b80831015611f645783518252928601926001929092019190860190611f44565b5085840151868601526040840151604086015260608401516060860152608084015195508481036080860152611f9a8187611b46565b955050505060a08101519050611fb360a0830182611d66565b505060408401516060840152606084015160808401528091505092915050565b600060208284031215611fe557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146111a357600080fd5b8035801515811461201957600080fd5b919050565b80356006811061201957600080fd5b600060c0828403121561203f57600080fd5b6120476119d1565b905061205282612009565b81526120606020830161201e565b60208201526120716040830161201e565b60408201526120826060830161201e565b606082015260808201356009811061209957600080fd5b608082015260a082013567ffffffffffffffff8111156120b857600080fd5b6120c484828501611a71565b60a08301525092915050565b600082601f8301126120e157600080fd5b813560206120f1611c5f83611b85565b82815260059290921b8401810191818101908684111561211057600080fd5b8286015b848110156121d457803567ffffffffffffffff808211156121355760008081fd5b908801906080828b03601f190181131561214f5760008081fd5b6121576119fa565b612162888501612009565b8152604061217181860161201e565b89830152606080860135858111156121895760008081fd5b6121978f8c838a0101611a71565b84840152509285013592848411156121b157600091508182fd5b6121bf8e8b86890101611a71565b90830152508652505050918301918301612114565b509695505050505050565b600060a082840312156121f157600080fd5b6121f9611a1d565b905061220482612009565b8152602082013567ffffffffffffffff8082111561222157600080fd5b61222d85838601611a71565b6020840152604084013591508082111561224657600080fd5b61225285838601611a71565b6040840152606084013591508082111561226b57600080fd5b6122778583860161202d565b6060840152608084013591508082111561229057600080fd5b5061229d848285016120d0565b60808301525092915050565b600082601f8301126122ba57600080fd5b813560206122ca611c5f83611b85565b82815260059290921b840181019181810190868411156122e957600080fd5b8286015b848110156121d457803583529183019183016122ed565b60006080828403121561231657600080fd5b61231e6119fa565b9050813567ffffffffffffffff8082111561233857600080fd5b6123448583860161202d565b8352602084013591508082111561235a57600080fd5b9083019060c0828603121561236e57600080fd5b6123766119d1565b82358281111561238557600080fd5b612391878286016122a9565b8252506020830135602082015260408301356040820152606083013560608201526080830135828111156123c457600080fd5b6123d087828601611a71565b6080830152506123e260a0840161201e565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a0868803121561242257600080fd5b853567ffffffffffffffff8082111561243a57600080fd5b61244689838a016121df565b9650602088013591508082111561245c57600080fd5b61246889838a01612304565b9550604088013591508082111561247e57600080fd5b61248a89838a01611a71565b945060608801359150808211156124a057600080fd5b6124ac89838a01611a71565b935060808801359150808211156124c257600080fd5b506124cf88828901611a71565b9150509295509295909350565b600181811c908216806124f057607f821691505b6020821081141561251157634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612529818460208701611b16565b9190910192915050565b6040815260006125466040830185611b46565b82810360208401526110f28185611b46565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156125985761259861256e565b5060010190565b6000828210156125b1576125b161256e565b500390565b60008160001904831182151516156125d0576125d061256e565b500290565b600082198211156125e8576125e861256e565b500190565b600083516125ff818460208801611b16565b835190830190612613818360208801611b16565b01949350505050565b60006020828403121561262e57600080fd5b5051919050565b600067ffffffffffffffff8083168185168083038211156126135761261361256e565b600067ffffffffffffffff808316818114156126765761267661256e565b6001019392505050565b600067ffffffffffffffff838116908316818110156126a1576126a161256e565b03939250505056fea2646970667358221220ae650468c3d32427db36e076ba081a3611e095e11c96b17e4d8a18d446a61bb164736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_onlyOwner, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_onlyOwner, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_onlyOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
    ],
    name: "EnrollL2Account",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes[][]",
        name: "_innerOp",
        type: "bytes[][]",
      },
    ],
    name: "convertProof",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620028393803806200283983398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b61279d806200009c6000396000f3fe6080604052600436106100d25760003560e01c8063410d0d841161007f578063b0d264e711610059578063b0d264e714610239578063c935256b1461025b578063d4f3237c1461027b578063d56a07e31461029b57600080fd5b8063410d0d84146101b257806373d15717146101c75780638da5cb5b146101e757600080fd5b806332208491116100b0578063322084911461015c578063354763d91461017f578063391506e51461019257600080fd5b806301644028146100d757806313f85fee1461010d57806327dcd78c1461013a575b600080fd5b3480156100e357600080fd5b506100f76100f2366004611ae2565b6102d6565b6040516101049190611b73565b60405180910390f35b34801561011957600080fd5b5061012d610128366004611baa565b61037b565b6040516101049190611df1565b34801561014657600080fd5b5061014f61052b565b6040516101049190611ef8565b61016f61016a366004612274565b61063f565b6040519015158152602001610104565b61016f61018d366004612274565b6106e6565b34801561019e57600080fd5b5061016f6101ad3660046122fc565b61075c565b3480156101be57600080fd5b506100f761080c565b3480156101d357600080fd5b506100f76101e2366004612331565b610819565b3480156101f357600080fd5b506000546102149073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610104565b34801561024557600080fd5b506102596102543660046124c8565b610832565b005b34801561026757600080fd5b5061016f610276366004611ae2565b6109a6565b34801561028757600080fd5b506100f76102963660046122fc565b6109e7565b3480156102a757600080fd5b5061016f6102b6366004611ae2565b805160208183018101805160048252928201919093012091525460ff1681565b8051602081830181018051600282529282019190930120915280546102fa9061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546103269061259a565b80156103735780601f1061034857610100808354040283529160200191610373565b820191906000526020600020905b81548152906001019060200180831161035657829003601f168201915b505050505081565b610383611843565b6040805160c081018252600180825260208201819052600092820183905260608201819052608082015260a08101859052835190919067ffffffffffffffff8111156103d1576103d16119bc565b60405190808252806020026020018201604052801561042557816020015b60408051608081018252600080825260208201526060918101829052818101919091528152602001906001900390816103ef5790505b50905060005b84518110156104fe576000858281518110610448576104486125d5565b6020026020010151905060405180608001604052806001151581526020016001600581111561047957610479611d51565b600581111561048a5761048a611d51565b8152602001826000815181106104a2576104a26125d5565b60200260200101518152602001826001815181106104c2576104c26125d5565b60200260200101518152508383815181106104df576104df6125d5565b60200260200101819052505080806104f690612601565b91505061042b565b506040805160a0810182526001815260208101989098528701959095526060860152505050608082015290565b61053361187a565b61053b61187a565b604080516002808252606082018352600092602083019080368337019050509050600081600081518110610571576105716125d5565b602002602001018181525050600181600181518110610592576105926125d5565b6020026020010181815250506040518060c00160405280600115158152602001600160058111156105c5576105c5611d51565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b600061064a8261075c565b61065357600080fd5b83600284604051610664919061261c565b908152602001604051809103902090805190602001906106859291906118ae565b5033600090815260036020908152604090912085516106a6928701906118ae565b50604051600181527f77bd6c3c083c151bec10c526dd0d5cdefaa0cca2178635d1990aee60c6bc5b9b906020015b60405180910390a15060019392505050565b60006106f18261075c565b6106fa57600080fd5b600160048560405161070c919061261c565b908152604051908190036020018120805492151560ff19909316929092179091557f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e906106d49086908690612638565b60006108048261076a61052b565b600180546107779061259a565b80601f01602080910402602001604051908101604052809291908181526020018280546107a39061259a565b80156107f05780601f106107c5576101008083540402835291602001916107f0565b820191906000526020600020905b8154815290600101906020018083116107d357829003601f168201915b505050505085602001518660400151610832565b506001919050565b600180546102fa9061259a565b600360205260009081526040902080546102fa9061259a565b61083c85856109f8565b61084a856020015183610b20565b61089b5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064015b60405180910390fd5b6108a9856040015182610b20565b61091b5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f660000000000000000000000000000000000000000000000000000000000006064820152608401610892565b61092d61092786610b4a565b84610b20565b61099f5760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f7400000000000000000000000000000000000000006064820152608401610892565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633146109cb57600080fd5b81516109de9060019060208501906118ae565b50600192915050565b60606109f282610b4a565b92915050565b610a06826060015182610bb9565b60608101511580610a205750806060015182608001515110155b610a6c5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610892565b60408101511580610a865750806040015182608001515110155b610ad25760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610892565b60005b826080015151811015610b1b57610b0983608001518281518110610afb57610afb6125d5565b602002602001015183610e07565b80610b1381612601565b915050610ad5565b505050565b60008151835114610b33575060006109f2565b508151602091820181902091909201919091201490565b60606000610b65836060015184602001518560400151610fd2565b905060005b836080015151811015610bb257610b9e84608001518281518110610b9057610b906125d5565b6020026020010151836110fc565b915080610baa81612601565b915050610b6a565b5092915050565b8051602001516005811115610bd057610bd0611d51565b82602001516005811115610be657610be6611d51565b14610c335760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610892565b8051604001516005811115610c4a57610c4a611d51565b82604001516005811115610c6057610c60611d51565b14610cad5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610892565b8051606001516005811115610cc457610cc4611d51565b82606001516005811115610cda57610cda611d51565b14610d275760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610892565b8051608001516008811115610d3e57610d3e611d51565b82608001516008811115610d5457610d54611d51565b14610da15760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f700000000000006044820152606401610892565b610db78260a00151826000015160a001516111ab565b610e035760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e67207072656669780000000000000000006044820152606401610892565b5050565b8051602001516005811115610e1e57610e1e611d51565b82602001516005811115610e3457610e34611d51565b14610e815760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610892565b610e978260400151826000015160a001516111ab565b15610ee45760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e672070726566697800000000000000006044820152606401610892565b8060200151604001518260400151511015610f415760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610892565b6020808201519081015190515160009190610f5e9060019061265d565b610f689190612674565b905080826020015160600151610f7e9190612693565b8360400151511115610b1b5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610892565b606060008351116110255760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b65790000000000000000000000000000006044820152606401610892565b60008251116110765760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c7565000000000000000000000000006044820152606401610892565b60008460a00151611090866040015187608001518761126e565b6040516020016110a19291906126ab565b6040516020818303038152906040526110c3866060015187608001518661126e565b6040516020016110d49291906126ab565b60405160208183030381529060405290506110f385602001518261128b565b95945050505050565b6060600082511161114f5760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c75650000000000006044820152606401610892565b6111a4836020015184604001518460405160200161116e9291906126ab565b60408051601f19818403018152908290526060870151611190926020016126ab565b60405160208183030381529060405261128b565b9392505050565b60008151835110156111bf575060006109f2565b60005b8251811015611264578281815181106111dd576111dd6125d5565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684828151811061121c5761121c6125d5565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016146112525760009150506109f2565b8061125c81612601565b9150506111c2565b5060019392505050565b60606112838361127e86856114a9565b6114d6565b949350505050565b606060018360058111156112a1576112a1611d51565b1415611306576112ff6002836040516112ba919061261c565b602060405180830381855afa1580156112d7573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112fa91906126da565b61166a565b90506109f2565b600283600581111561131a5761131a611d51565b14156113685760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e746564000000000000000000006044820152606401610892565b600483600581111561137c5761137c611d51565b14156113d0576112ff600383604051611395919061261c565b602060405180830381855afa1580156113b2573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff191661166a565b60058360058111156113e4576113e4611d51565b14156114615760006002836040516113fc919061261c565b602060405180830381855afa158015611419573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061143c91906126da565b9050611459600361144c8361166a565b604051611395919061261c565b9150506109f2565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f7000000000000000000000000000006044820152606401610892565b606060008360058111156114bf576114bf611d51565b14156114cc5750806109f2565b6111a4838361128b565b606060008360088111156114ec576114ec611d51565b14156114f95750806109f2565b600183600881111561150d5761150d611d51565b14156115455761151d8251611694565b8260405160200161152f9291906126ab565b60405160208183030381529060405290506109f2565b600783600881111561155957611559611d51565b14156115b75781516020146115b05760405162461bcd60e51b815260206004820152601160248201527f45787065637465642033322062797465730000000000000000000000000000006044820152606401610892565b50806109f2565b60088360088111156115cb576115cb611d51565b14156116225781516040146115b05760405162461bcd60e51b815260206004820152601160248201527f45787065637465642036342062797465730000000000000000000000000000006044820152606401610892565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f700000000000000000000000006044820152606401610892565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156116d25760078267ffffffffffffffff16901c91506001816116cb91906126f3565b905061169a565b60008167ffffffffffffffff1667ffffffffffffffff8111156116f7576116f76119bc565b6040519080825280601f01601f191660200182016040528015611721576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156117bf5783607f1660801760f81b828267ffffffffffffffff168151811061176c5761176c6125d5565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806117b790612716565b91505061172a565b507f7f00000000000000000000000000000000000000000000000000000000000000816117ed60018561273e565b67ffffffffffffffff1681518110611807576118076125d5565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b6040518060a00160405280600015158152602001606081526020016060815260200161186d611932565b8152602001606081525090565b604051806080016040528061188d611932565b815260200161189a611961565b815260200160008152602001600081525090565b8280546118ba9061259a565b90600052602060002090601f0160209004810192826118dc5760008555611922565b82601f106118f557805160ff1916838001178555611922565b82800160010185558215611922579182015b82811115611922578251825591602001919060010190611907565b5061192e9291506119a7565b5090565b6040805160c081019091526000808252602082019081526020016000815260200160008152602001600061186d565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160608152602001600060058111156119a2576119a2611d51565b905290565b5b8082111561192e57600081556001016119a8565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156119f5576119f56119bc565b60405290565b6040516080810167ffffffffffffffff811182821017156119f5576119f56119bc565b60405160a0810167ffffffffffffffff811182821017156119f5576119f56119bc565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6a57611a6a6119bc565b604052919050565b600082601f830112611a8357600080fd5b813567ffffffffffffffff811115611a9d57611a9d6119bc565b611ab0601f8201601f1916602001611a41565b818152846020838601011115611ac557600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611af457600080fd5b813567ffffffffffffffff811115611b0b57600080fd5b61128384828501611a72565b60005b83811015611b32578181015183820152602001611b1a565b83811115611b41576000848401525b50505050565b60008151808452611b5f816020860160208601611b17565b601f01601f19169290920160200192915050565b6020815260006111a46020830184611b47565b600067ffffffffffffffff821115611ba057611ba06119bc565b5060051b60200190565b60008060008060808587031215611bc057600080fd5b67ffffffffffffffff8086351115611bd757600080fd5b611be48787358801611a72565b94508060208701351115611bf757600080fd5b611c078760208801358801611a72565b93508060408701351115611c1a57600080fd5b611c2a8760408801358801611a72565b92508060608701351115611c3d57600080fd5b6060860135860187601f820112611c5357600080fd5b611c65611c608235611b86565b611a41565b81358082526020808301929160051b8401018a1015611c8357600080fd5b602083015b6020843560051b850101811015611d42578481351115611ca757600080fd5b803584018b603f820112611cba57600080fd5b611cca611c606020830135611b86565b602082810135808352908201919060051b83016040018e1015611cec57600080fd5b604083015b6040602085013560051b850101811015611d31578881351115611d1357600080fd5b611d238f60408335870101611a72565b835260209283019201611cf1565b508552505060209283019201611c88565b50969995985093965050505050565b634e487b7160e01b600052602160045260246000fd5b60068110611d7757611d77611d51565b9052565b80511515825260006020820151611d956020850182611d67565b506040820151611da86040850182611d67565b506060820151611dbb6060850182611d67565b50608082015160098110611dd157611dd1611d51565b8060808501525060a082015160c060a085015261128360c0850182611b47565b60006020808352835115158184015280840151604060a081860152611e1960c0860183611b47565b915080860151601f196060818886030181890152611e378584611b47565b945080890151925060808289870301818a0152611e548685611d7b565b8a8201518a8203850160a08c015280518083529197508801945087870190600581901b8801890160005b82811015611ee757868a830301845287518051151583528b810151611ea58d850182611d67565b5089810151868b850152611ebb87850182611b47565b91880151848303858a0152919050611ed38183611b47565b998d0199958d019593505050600101611e7e565b509c9b505050505050505050505050565b600060208083528351608082850152611f1460a0850182611d7b565b85830151858203601f19016040870152805160c0808452815190840181905292935090919084019060009060e08501905b80831015611f655783518252928601926001929092019190860190611f45565b5085840151868601526040840151604086015260608401516060860152608084015195508481036080860152611f9b8187611b47565b955050505060a08101519050611fb460a0830182611d67565b505060408401516060840152606084015160808401528091505092915050565b80358015158114611fe457600080fd5b919050565b803560068110611fe457600080fd5b600060c0828403121561200a57600080fd5b6120126119d2565b905061201d82611fd4565b815261202b60208301611fe9565b602082015261203c60408301611fe9565b604082015261204d60608301611fe9565b606082015260808201356009811061206457600080fd5b608082015260a082013567ffffffffffffffff81111561208357600080fd5b61208f84828501611a72565b60a08301525092915050565b600082601f8301126120ac57600080fd5b813560206120bc611c6083611b86565b82815260059290921b840181019181810190868411156120db57600080fd5b8286015b8481101561219f57803567ffffffffffffffff808211156121005760008081fd5b908801906080828b03601f190181131561211a5760008081fd5b6121226119fb565b61212d888501611fd4565b8152604061213c818601611fe9565b89830152606080860135858111156121545760008081fd5b6121628f8c838a0101611a72565b848401525092850135928484111561217c57600091508182fd5b61218a8e8b86890101611a72565b908301525086525050509183019183016120df565b509695505050505050565b600060a082840312156121bc57600080fd5b6121c4611a1e565b90506121cf82611fd4565b8152602082013567ffffffffffffffff808211156121ec57600080fd5b6121f885838601611a72565b6020840152604084013591508082111561221157600080fd5b61221d85838601611a72565b6040840152606084013591508082111561223657600080fd5b61224285838601611ff8565b6060840152608084013591508082111561225b57600080fd5b506122688482850161209b565b60808301525092915050565b60008060006060848603121561228957600080fd5b833567ffffffffffffffff808211156122a157600080fd5b6122ad87838801611a72565b945060208601359150808211156122c357600080fd5b6122cf87838801611a72565b935060408601359150808211156122e557600080fd5b506122f2868287016121aa565b9150509250925092565b60006020828403121561230e57600080fd5b813567ffffffffffffffff81111561232557600080fd5b611283848285016121aa565b60006020828403121561234357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146111a457600080fd5b600082601f83011261237857600080fd5b81356020612388611c6083611b86565b82815260059290921b840181019181810190868411156123a757600080fd5b8286015b8481101561219f57803583529183019183016123ab565b6000608082840312156123d457600080fd5b6123dc6119fb565b9050813567ffffffffffffffff808211156123f657600080fd5b61240285838601611ff8565b8352602084013591508082111561241857600080fd5b9083019060c0828603121561242c57600080fd5b6124346119d2565b82358281111561244357600080fd5b61244f87828601612367565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561248257600080fd5b61248e87828601611a72565b6080830152506124a060a08401611fe9565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a086880312156124e057600080fd5b853567ffffffffffffffff808211156124f857600080fd5b61250489838a016121aa565b9650602088013591508082111561251a57600080fd5b61252689838a016123c2565b9550604088013591508082111561253c57600080fd5b61254889838a01611a72565b9450606088013591508082111561255e57600080fd5b61256a89838a01611a72565b9350608088013591508082111561258057600080fd5b5061258d88828901611a72565b9150509295509295909350565b600181811c908216806125ae57607f821691505b602082108114156125cf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612615576126156125eb565b5060010190565b6000825161262e818460208701611b17565b9190910192915050565b60408152600061264b6040830185611b47565b82810360208401526110f38185611b47565b60008282101561266f5761266f6125eb565b500390565b600081600019048311821515161561268e5761268e6125eb565b500290565b600082198211156126a6576126a66125eb565b500190565b600083516126bd818460208801611b17565b8351908301906126d1818360208801611b17565b01949350505050565b6000602082840312156126ec57600080fd5b5051919050565b600067ffffffffffffffff8083168185168083038211156126d1576126d16125eb565b600067ffffffffffffffff80831681811415612734576127346125eb565b6001019392505050565b600067ffffffffffffffff8381169083168181101561275f5761275f6125eb565b03939250505056fea2646970667358221220296df0e9453ab35b823ff6da4c8715cc6b21faffa0bb48d26b3f8f29c873a15c64736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_onlyOwner, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_onlyOwner, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

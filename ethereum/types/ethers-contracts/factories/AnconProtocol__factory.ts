/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "network",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "ENROLL_DAG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "ENROLL_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "SUBMIT_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "dagRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "latestRootHashTable",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "relayerHashTable",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "seq",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "whitelistedDagGraph",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getContractIdentifier",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "usernonce",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "verifyContractIdentifier",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "dagAddress",
        type: "address",
      },
    ],
    name: "setWhitelistedDagGraph",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "height",
        type: "uint256",
      },
    ],
    name: "updateRelayerHeader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "setPaymentToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setProtocolFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setAccountRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setDagGraphFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
    ],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "userProof",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moniker",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProofWithKV",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040527faa38c8fcdb8500f6802157621989c44502acc94ca3eb31e1547a766ce91448b26000557f2f6bb624cb316ab670df79a1530a1105c05bdac88a2221c0a2c3efa065e294666001557fa8a7d14acee15b581bdc62c67a1b2711ec58a960850b336a002a03c0f3367b3b60025560006006556000600755600060085560006009553480156200009157600080fd5b50604051620039db380380620039db833981016040819052620000b491620000ec565b60038054336001600160a01b031991821617909155600580549091166001600160a01b03939093169290921790915560095562000128565b600080604083850312156200010057600080fd5b82516001600160a01b03811681146200011857600080fd5b6020939093015192949293505050565b6138a380620001386000396000f3fe60806040526004361061024f5760003560e01c80638da5cb5b11610138578063c284bdf3116100b0578063d7c9b5691161007f578063e9f49b5311610064578063e9f49b53146106a0578063ee983e8c146106c0578063fc7ea420146106d657600080fd5b8063d7c9b56914610660578063e9cbd8221461068057600080fd5b8063c284bdf3146105ce578063d087d288146105e3578063d56a07e314610605578063d61565711461064057600080fd5b8063a21c87d811610107578063a848e0ec116100ec578063a848e0ec14610578578063b0d264e714610598578063b0e21e8a146105b857600080fd5b8063a21c87d81461054f578063a5aa7bd31461056557600080fd5b80638da5cb5b146104e957806397554e8f14610509578063998b32e81461051c578063a195c3e31461052f57600080fd5b80635eccc371116101cb57806370ae92d21161019a578063787dce3d1161017f578063787dce3d146104895780638406c079146104a95780638b178bec146104c957600080fd5b806370ae92d21461043c57806373d157171461046957600080fd5b80635eccc371146103c65780636857ab40146103e6578063693ac4fb146103fc5780636a326ab11461041c57600080fd5b806340ae5ffa1161022257806351ceefe71161020757806351ceefe71461036057806351cff8d9146103905780635dad28de146103b057600080fd5b806340ae5ffa1461031c5780634bf26de61461034057600080fd5b8063016440281461025457806305c248531461028a57806327dcd78c146102d85780633aeac4e1146102fa575b600080fd5b34801561026057600080fd5b5061027461026f366004612bb1565b6106ec565b6040516102819190612c42565b60405180910390f35b34801561029657600080fd5b506102c06102a5366004612c55565b600d602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610281565b3480156102e457600080fd5b506102ed610791565b6040516102819190612d29565b34801561030657600080fd5b5061031a610315366004612e16565b6108a5565b005b34801561032857600080fd5b5061033260005481565b604051908152602001610281565b34801561034c57600080fd5b5061031a61035b366004612e4f565b610a50565b34801561036c57600080fd5b5061038061037b366004613170565b610b3f565b6040519015158152602001610281565b34801561039c57600080fd5b5061031a6103ab366004613202565b610bf6565b3480156103bc57600080fd5b5061033260075481565b3480156103d257600080fd5b506102746103e1366004612c55565b610cfc565b3480156103f257600080fd5b50610332600e5481565b34801561040857600080fd5b50610274610417366004612bb1565b610d9e565b34801561042857600080fd5b5061031a610437366004613202565b610dc9565b34801561044857600080fd5b50610332610457366004613202565b600f6020526000908152604090205481565b34801561047557600080fd5b50610274610484366004613202565b610e0f565b34801561049557600080fd5b5061031a6104a4366004612c55565b610e28565b3480156104b557600080fd5b506004546102c0906001600160a01b031681565b3480156104d557600080fd5b5061031a6104e4366004612c55565b610e44565b3480156104f557600080fd5b506003546102c0906001600160a01b031681565b61038061051736600461321f565b610e60565b61038061052a366004613170565b6110c9565b34801561053b57600080fd5b5061027461054a3660046132e5565b61129f565b34801561055b57600080fd5b5061033260085481565b61031a610573366004613307565b6112c3565b34801561058457600080fd5b50610274610593366004612c55565b61136f565b3480156105a457600080fd5b5061031a6105b336600461348d565b611388565b3480156105c457600080fd5b5061033260065481565b3480156105da57600080fd5b506103326114f7565b3480156105ef57600080fd5b50336000908152600f6020526040902054610332565b34801561061157600080fd5b50610380610620366004612bb1565b8051602081830181018051600c8252928201919093012091525460ff1681565b34801561064c57600080fd5b5061038061065b36600461355f565b611544565b34801561066c57600080fd5b5061031a61067b366004612c55565b6115b9565b34801561068c57600080fd5b506005546102c0906001600160a01b031681565b3480156106ac57600080fd5b506103806106bb366004612bb1565b6115d5565b3480156106cc57600080fd5b5061033260015481565b3480156106e257600080fd5b5061033260025481565b8051602081830181018051600a825292820191909301209152805461071090613597565b80601f016020809104026020016040519081016040528092919081815260200182805461073c90613597565b80156107895780601f1061075e57610100808354040283529160200191610789565b820191906000526020600020905b81548152906001019060200180831161076c57829003601f168201915b505050505081565b61079961294f565b6107a161294f565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106107d7576107d76135d2565b6020026020010181815250506001816001815181106107f8576107f86135d2565b6020026020010181815250506040518060c001604052806001151581526020016001600581111561082b5761082b612c6e565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b6003546001600160a01b031633146108bc57600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092791906135e8565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190613601565b610a085760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064015b60405180910390fd5b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610a4391815260200190565b60405180910390a2505050565b6000838152600d60205260409020546001600160a01b03163314610ab65760405162461bcd60e51b815260206004820152600c60248201527f696e76616c69642075736572000000000000000000000000000000000000000060448201526064016109ff565b600083815260116020908152604080832084845282529091208351610add928501906129ac565b5060008381526010602090815260409091208351610afd928501906129ac565b50600e54610b0c906001613634565b600e5560405183907fc4c76143cbd497adc2b5bc159d932dcfa8483928a0d22661d1404ef1c68984a190600090a2505050565b6000610beb82610b4d610791565b60008881526010602052604090208054610b6690613597565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9290613597565b8015610bdf5780601f10610bb457610100808354040283529160200191610bdf565b820191906000526020600020905b815481529060010190602001808311610bc257829003601f168201915b50505050508787611388565b506001949350505050565b6003546001600160a01b03163314610c0d57600080fd5b604051479060009081906001600160a01b0385169084908381818185875af1925050503d8060008114610c5c576040519150601f19603f3d011682016040523d82523d6000602084013e610c61565b606091505b509150915081610cb35760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e6420457468657200000000000000000000000060448201526064016109ff565b836001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d584604051610cee91815260200190565b60405180910390a250505050565b6000818152601060205260409020805460609190610d1990613597565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4590613597565b8015610d925780601f10610d6757610100808354040283529160200191610d92565b820191906000526020600020905b815481529060010190602001808311610d7557829003601f168201915b50505050509050919050565b6060600a82604051610db0919061364c565b90815260200160405180910390208054610d1990613597565b6003546001600160a01b03163314610de057600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600b602052600090815260409020805461071090613597565b6003546001600160a01b03163314610e3f57600080fd5b600655565b6003546001600160a01b03163314610e5b57600080fd5b600755565b6000600c84604051610e72919061364c565b9081526040519081900360200190205460ff1615610ef75760405162461bcd60e51b8152602060048201526024808201527f70726f6f6620686173206265656e207375626d69747465642028666f756e642060448201527f6b6579290000000000000000000000000000000000000000000000000000000060648201526084016109ff565b838051906020012082602001518051906020012014610f465760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064016109ff565b846020015180519060200120600b6000886001600160a01b03166001600160a01b03168152602001908152602001600020604051610f849190613668565b604051809103902014610fd95760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642075736572206b65790000000000000000000000000000000060448201526064016109ff565b610fe38786611600565b61102f5760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420757365722070726f6f66000000000000000000000000000060448201526064016109ff565b6110398783611600565b61104257600080fd5b6001600c85604051611054919061364c565b908152604051908190036020019020805491151560ff1990921691909117905560025461108190876116be565b7f6fc7f6a61226dca85dedfb3642afdfbd9aeca6b161137d0c9a09e01a5e4baeee8484896040516110b493929190613704565b60405180910390a15060019695505050505050565b600083805190602001208260200151805190602001201461111a5760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b60448201526064016109ff565b6111248583611600565b6111705760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016109ff565b600a83604051611180919061364c565b90815260405190819003602001812061119891613668565b6040518091039020848051906020012014156111f65760405162461bcd60e51b815260206004820152601760248201527f7573657220616c7265616479207265676973746572656400000000000000000060448201526064016109ff565b611202600054336116be565b83600a84604051611213919061364c565b908152602001604051809103902090805190602001906112349291906129ac565b50336000908152600b602090815260409091208551611255928701906129ac565b507f7b72d06bd8ccc7a748cfdb8b1df6913a277497c808af0288d0d6c0eb06b3b7b6600185858860405161128c949392919061373a565b60405180910390a1506001949350505050565b60116020908152600092835260408084209091529082529020805461071090613597565b6000828152600d60205260409020546001600160a01b0316156113285760405162461bcd60e51b815260206004820152600660248201527f657869737473000000000000000000000000000000000000000000000000000060448201526064016109ff565b611334600154336116be565b6000918252600d6020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b6010602052600090815260409020805461071090613597565b6113928585611b0f565b6113a0856020015183611c37565b6113ec5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064016109ff565b6113fa856040015182611c37565b61146c5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f6600000000000000000000000000000000000000000000000000000000000060648201526084016109ff565b61147e61147886611c67565b84611c37565b6114f05760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f74000000000000000000000000000000000000000060648201526084016109ff565b5050505050565b60006009543060405160200161152992919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60405160208183030381529060405280519060200120905090565b6000816009543060405160200161157792919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b604051602081830303815290604052805190602001201480156115b157506001600160a01b0383166000908152600f602052604090205484145b949350505050565b6003546001600160a01b031633146115d057600080fd5b600855565b6000600c826040516115e7919061364c565b9081526040519081900360200190205460ff1692915050565b60006116b48261160e610791565b6000868152601060205260409020805461162790613597565b80601f016020809104026020016040519081016040528092919081815260200182805461165390613597565b80156116a05780601f10611675576101008083540402835291602001916116a0565b820191906000526020600020905b81548152906001019060200180831161168357829003601f168201915b505050505085602001518660400151611388565b5060015b92915050565b6005546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d91906135e8565b1161177a5760405162461bcd60e51b815260206004820152601160248201527f6e6f20656e6f7567682062616c616e636500000000000000000000000000000060448201526064016109ff565b600154821415611896576005546008546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af11580156117e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118049190613601565b6118505760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e7400000060448201526064016109ff565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b360085460405161188d91815260200190565b60405180910390a25b6000548214156119b2576005546007546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af11580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190613601565b61196c5760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e7400000060448201526064016109ff565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b36007546040516119a991815260200190565b60405180910390a25b600254821415611ace576005546006546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af1158015611a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3c9190613601565b611a885760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e7400000060448201526064016109ff565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b3600654604051611ac591815260200190565b60405180910390a25b6001600160a01b0381166000908152600f6020526040902054611af2906001613634565b6001600160a01b039091166000908152600f602052604090205550565b611b1d826060015182611cd6565b60608101511580611b375750806060015182608001515110155b611b835760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016109ff565b60408101511580611b9d5750806040015182608001515110155b611be95760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016109ff565b60005b826080015151811015611c3257611c2083608001518281518110611c1257611c126135d2565b602002602001015183611f24565b80611c2a81613779565b915050611bec565b505050565b60008151835114611c4a575060006116b8565b825160208381018281209186019283209091145b95945050505050565b60606000611c828360600151846020015185604001516120ef565b905060005b836080015151811015611ccf57611cbb84608001518281518110611cad57611cad6135d2565b602002602001015183612210565b915080611cc781613779565b915050611c87565b5092915050565b8051602001516005811115611ced57611ced612c6e565b82602001516005811115611d0357611d03612c6e565b14611d505760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016109ff565b8051604001516005811115611d6757611d67612c6e565b82604001516005811115611d7d57611d7d612c6e565b14611dca5760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016109ff565b8051606001516005811115611de157611de1612c6e565b82606001516005811115611df757611df7612c6e565b14611e445760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016109ff565b8051608001516008811115611e5b57611e5b612c6e565b82608001516008811115611e7157611e71612c6e565b14611ebe5760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f7000000000000060448201526064016109ff565b611ed48260a00151826000015160a001516122bf565b611f205760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e672070726566697800000000000000000060448201526064016109ff565b5050565b8051602001516005811115611f3b57611f3b612c6e565b82602001516005811115611f5157611f51612c6e565b14611f9e5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016109ff565b611fb48260400151826000015160a001516122bf565b156120015760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e6720707265666978000000000000000060448201526064016109ff565b806020015160400151826040015151101561205e5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016109ff565b602080820151908101519051516000919061207b90600190613794565b61208591906137ab565b90508082602001516060015161209b9190613634565b8360400151511115611c325760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016109ff565b606060008351116121425760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b657900000000000000000000000000000060448201526064016109ff565b60008251116121935760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c75650000000000000000000000000060448201526064016109ff565b60008460a001516121ad8660400151876080015187612382565b6040516020016121be9291906137ca565b6040516020818303038152906040526121e08660600151876080015186612382565b6040516020016121f19291906137ca565b6040516020818303038152906040529050611c5e856020015182612397565b606060008251116122635760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c756500000000000060448201526064016109ff565b6122b883602001518460400151846040516020016122829291906137ca565b60408051601f198184030181529082905260608701516122a4926020016137ca565b604051602081830303815290604052612397565b9392505050565b60008151835110156122d3575060006116b8565b60005b8251811015612378578281815181106122f1576122f16135d2565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110612330576123306135d2565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016146123665760009150506116b8565b8061237081613779565b9150506122d6565b5060019392505050565b60606115b18361239286856125b5565b6125e2565b606060018360058111156123ad576123ad612c6e565b14156124125761240b6002836040516123c6919061364c565b602060405180830381855afa1580156123e3573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061240691906135e8565b612776565b90506116b8565b600283600581111561242657612426612c6e565b14156124745760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e7465640000000000000000000060448201526064016109ff565b600483600581111561248857612488612c6e565b14156124dc5761240b6003836040516124a1919061364c565b602060405180830381855afa1580156124be573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916612776565b60058360058111156124f0576124f0612c6e565b141561256d576000600283604051612508919061364c565b602060405180830381855afa158015612525573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061254891906135e8565b9050612565600361255883612776565b6040516124a1919061364c565b9150506116b8565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f70000000000000000000000000000060448201526064016109ff565b606060008360058111156125cb576125cb612c6e565b14156125d85750806116b8565b6122b88383612397565b606060008360088111156125f8576125f8612c6e565b14156126055750806116b8565b600183600881111561261957612619612c6e565b14156126515761262982516127a0565b8260405160200161263b9291906137ca565b60405160208183030381529060405290506116b8565b600783600881111561266557612665612c6e565b14156126c35781516020146126bc5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420333220627974657300000000000000000000000000000060448201526064016109ff565b50806116b8565b60088360088111156126d7576126d7612c6e565b141561272e5781516040146126bc5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420363420627974657300000000000000000000000000000060448201526064016109ff565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f7000000000000000000000000060448201526064016109ff565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156127de5760078267ffffffffffffffff16901c91506001816127d791906137f9565b90506127a6565b60008167ffffffffffffffff1667ffffffffffffffff81111561280357612803612a8b565b6040519080825280601f01601f19166020018201604052801561282d576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156128cb5783607f1660801760f81b828267ffffffffffffffff1681518110612878576128786135d2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806128c39061381c565b915050612836565b507f7f00000000000000000000000000000000000000000000000000000000000000816128f9600185613844565b67ffffffffffffffff1681518110612913576129136135d2565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e083018290526101008301919091526060610120830152815260208101612998612a30565b815260200160008152602001600081525090565b8280546129b890613597565b90600052602060002090601f0160209004810192826129da5760008555612a20565b82601f106129f357805160ff1916838001178555612a20565b82800160010185558215612a20579182015b82811115612a20578251825591602001919060010190612a05565b50612a2c929150612a76565b5090565b6040518060c00160405280606081526020016000815260200160008152602001600081526020016060815260200160006005811115612a7157612a71612c6e565b905290565b5b80821115612a2c5760008155600101612a77565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612ac457612ac4612a8b565b60405290565b6040516080810167ffffffffffffffff81118282101715612ac457612ac4612a8b565b60405160a0810167ffffffffffffffff81118282101715612ac457612ac4612a8b565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b3957612b39612a8b565b604052919050565b600082601f830112612b5257600080fd5b813567ffffffffffffffff811115612b6c57612b6c612a8b565b612b7f601f8201601f1916602001612b10565b818152846020838601011115612b9457600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612bc357600080fd5b813567ffffffffffffffff811115612bda57600080fd5b6115b184828501612b41565b60005b83811015612c01578181015183820152602001612be9565b83811115612c10576000848401525b50505050565b60008151808452612c2e816020860160208601612be6565b601f01601f19169290920160200192915050565b6020815260006122b86020830184612c16565b600060208284031215612c6757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60068110612c9457612c94612c6e565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b81811015612cd457835183529284019291840191600101612cb8565b505082850151838701526040850151604087015260608501516060870152608085015192508581036080870152612d0b8184612c16565b9250505060a0830151612d2160a0860182612c84565b509392505050565b6020815260008251608060208401528051151560a08401526020810151612d5360c0850182612c84565b506040810151612d6660e0850182612c84565b506060810151612d7a610100850182612c84565b50608081015160098110612d9057612d90612c6e565b61012084015260a0015160c0610140840152612db0610160840182612c16565b90506020840151601f19848303016040850152612dcd8282612c98565b91505060408401516060840152606084015160808401528091505092915050565b6001600160a01b0381168114612e0357600080fd5b50565b8035612e1181612dee565b919050565b60008060408385031215612e2957600080fd5b8235612e3481612dee565b91506020830135612e4481612dee565b809150509250929050565b600080600060608486031215612e6457600080fd5b83359250602084013567ffffffffffffffff811115612e8257600080fd5b612e8e86828701612b41565b925050604084013590509250925092565b8015158114612e0357600080fd5b8035612e1181612e9f565b803560068110612e1157600080fd5b600060c08284031215612ed957600080fd5b612ee1612aa1565b90508135612eee81612e9f565b8152612efc60208301612eb8565b6020820152612f0d60408301612eb8565b6040820152612f1e60608301612eb8565b6060820152608082013560098110612f3557600080fd5b608082015260a082013567ffffffffffffffff811115612f5457600080fd5b612f6084828501612b41565b60a08301525092915050565b600067ffffffffffffffff821115612f8657612f86612a8b565b5060051b60200190565b600082601f830112612fa157600080fd5b81356020612fb6612fb183612f6c565b612b10565b82815260059290921b84018101918181019086841115612fd557600080fd5b8286015b8481101561309b57803567ffffffffffffffff80821115612ffa5760008081fd5b908801906080828b03601f19018113156130145760008081fd5b61301c612aca565b8784013561302981612e9f565b81526040613038858201612eb8565b89830152606080860135858111156130505760008081fd5b61305e8f8c838a0101612b41565b848401525092850135928484111561307857600091508182fd5b6130868e8b86890101612b41565b90830152508652505050918301918301612fd9565b509695505050505050565b600060a082840312156130b857600080fd5b6130c0612aed565b90506130cb82612ead565b8152602082013567ffffffffffffffff808211156130e857600080fd5b6130f485838601612b41565b6020840152604084013591508082111561310d57600080fd5b61311985838601612b41565b6040840152606084013591508082111561313257600080fd5b61313e85838601612ec7565b6060840152608084013591508082111561315757600080fd5b5061316484828501612f90565b60808301525092915050565b6000806000806080858703121561318657600080fd5b84359350602085013567ffffffffffffffff808211156131a557600080fd5b6131b188838901612b41565b945060408701359150808211156131c757600080fd5b6131d388838901612b41565b935060608701359150808211156131e957600080fd5b506131f6878288016130a6565b91505092959194509250565b60006020828403121561321457600080fd5b81356122b881612dee565b60008060008060008060c0878903121561323857600080fd5b8635955061324860208801612e06565b9450604087013567ffffffffffffffff8082111561326557600080fd5b6132718a838b016130a6565b9550606089013591508082111561328757600080fd5b6132938a838b01612b41565b945060808901359150808211156132a957600080fd5b6132b58a838b01612b41565b935060a08901359150808211156132cb57600080fd5b506132d889828a016130a6565b9150509295509295509295565b600080604083850312156132f857600080fd5b50508035926020909101359150565b6000806040838503121561331a57600080fd5b823591506020830135612e4481612dee565b600082601f83011261333d57600080fd5b8135602061334d612fb183612f6c565b82815260059290921b8401810191818101908684111561336c57600080fd5b8286015b8481101561309b5780358352918301918301613370565b60006080828403121561339957600080fd5b6133a1612aca565b9050813567ffffffffffffffff808211156133bb57600080fd5b6133c785838601612ec7565b835260208401359150808211156133dd57600080fd5b9083019060c082860312156133f157600080fd5b6133f9612aa1565b82358281111561340857600080fd5b6134148782860161332c565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561344757600080fd5b61345387828601612b41565b60808301525061346560a08401612eb8565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a086880312156134a557600080fd5b853567ffffffffffffffff808211156134bd57600080fd5b6134c989838a016130a6565b965060208801359150808211156134df57600080fd5b6134eb89838a01613387565b9550604088013591508082111561350157600080fd5b61350d89838a01612b41565b9450606088013591508082111561352357600080fd5b61352f89838a01612b41565b9350608088013591508082111561354557600080fd5b5061355288828901612b41565b9150509295509295909350565b60008060006060848603121561357457600080fd5b83359250602084013561358681612dee565b929592945050506040919091013590565b600181811c908216806135ab57607f821691505b602082108114156135cc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156135fa57600080fd5b5051919050565b60006020828403121561361357600080fd5b81516122b881612e9f565b634e487b7160e01b600052601160045260246000fd5b600082198211156136475761364761361e565b500190565b6000825161365e818460208701612be6565b9190910192915050565b600080835481600182811c91508083168061368457607f831692505b60208084108214156136a457634e487b7160e01b86526022600452602486fd5b8180156136b857600181146136c9576136f6565b60ff198616895284890196506136f6565b60008a81526020902060005b868110156136ee5781548b8201529085019083016136d5565b505084890196505b509498975050505050505050565b6060815260006137176060830186612c16565b82810360208401526137298186612c16565b915050826040830152949350505050565b84151581526080602082015260006137556080830186612c16565b82810360408401526137678186612c16565b91505082606083015295945050505050565b600060001982141561378d5761378d61361e565b5060010190565b6000828210156137a6576137a661361e565b500390565b60008160001904831182151516156137c5576137c561361e565b500290565b600083516137dc818460208801612be6565b8351908301906137f0818360208801612be6565b01949350505050565b600067ffffffffffffffff8083168185168083038211156137f0576137f061361e565b600067ffffffffffffffff8083168181141561383a5761383a61361e565b6001019392505050565b600067ffffffffffffffff838116908316818110156138655761386561361e565b03939250505056fea26469706673582212207094a2eb1d799aa4cc01a8fb4a01d4a2e4ecfb94e8f3be628d4efb166b2928ff64736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    tokenAddress: string,
    network: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(
      tokenAddress,
      network,
      overrides || {}
    ) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    tokenAddress: string,
    network: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenAddress, network, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_relayer",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenERC20",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "hash",
        type: "bytes",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "ENROLL_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SUBMIT_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdrawBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setProtocolFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setAccountRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040527faa38c8fcdb8500f6802157621989c44502acc94ca3eb31e1547a766ce91448b26001557fa8a7d14acee15b581bdc62c67a1b2711ec58a960850b336a002a03c0f3367b3b600255600060065560006007553480156200006357600080fd5b5060405162002fef38038062002fef833981016040819052620000869162000130565b6200009133620000c3565b600380546001600160a01b039384166001600160a01b0319918216179091556005805492909316911617905562000168565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200012b57600080fd5b919050565b600080604083850312156200014457600080fd5b6200014f8362000113565b91506200015f6020840162000113565b90509250929050565b612e7780620001786000396000f3fe6080604052600436106101a15760003560e01c80638406c079116100e1578063d4f3237c1161008a578063e9f49b5311610064578063e9f49b5314610481578063f2a4147a146104a1578063f2fde38b146104b6578063fc7ea420146104d657600080fd5b8063d4f3237c14610406578063d56a07e314610426578063e9cbd8221461046157600080fd5b8063b0d264e7116100bb578063b0d264e7146103b0578063b0e21e8a146103d0578063c935256b146103e657600080fd5b80638406c0791461033a5780638b178bec146103725780638da5cb5b1461039257600080fd5b8063410d0d841161014e578063715018a611610128578063715018a6146102c357806373d15717146102da578063756af45f146102fa578063787dce3d1461031a57600080fd5b8063410d0d84146102785780635dad28de1461028d578063693ac4fb146102a357600080fd5b8063354763d91161017f578063354763d914610221578063391506e51461023457806340ae5ffa1461025457600080fd5b806301644028146101a657806327dcd78c146101dc57806332208491146101fe575b600080fd5b3480156101b257600080fd5b506101c66101c136600461234f565b6104ec565b6040516101d391906123e0565b60405180910390f35b3480156101e857600080fd5b506101f1610591565b6040516101d391906124ae565b61021161020c366004612849565b6106a5565b60405190151581526020016101d3565b61021161022f366004612849565b61082c565b34801561024057600080fd5b5061021161024f3660046128d1565b6108b0565b34801561026057600080fd5b5061026a60015481565b6040519081526020016101d3565b34801561028457600080fd5b506101c6610960565b34801561029957600080fd5b5061026a60075481565b3480156102af57600080fd5b506101c66102be36600461234f565b61096d565b3480156102cf57600080fd5b506102d8610a1d565b005b3480156102e657600080fd5b506101c66102f536600461291b565b610a83565b34801561030657600080fd5b506102d861031536600461291b565b610a9c565b34801561032657600080fd5b506102d8610335366004612938565b610ca1565b34801561034657600080fd5b5060035461035a906001600160a01b031681565b6040516001600160a01b0390911681526020016101d3565b34801561037e57600080fd5b506102d861038d366004612938565b610d00565b34801561039e57600080fd5b506000546001600160a01b031661035a565b3480156103bc57600080fd5b506102d86103cb366004612ab2565b610d5f565b3480156103dc57600080fd5b5061026a60065481565b3480156103f257600080fd5b5061021161040136600461234f565b610ece565b34801561041257600080fd5b506101c66104213660046128d1565b610f3b565b34801561043257600080fd5b5061021161044136600461234f565b8051602081830181018051600a8252928201919093012091525460ff1681565b34801561046d57600080fd5b5060055461035a906001600160a01b031681565b34801561048d57600080fd5b5061021161049c36600461234f565b610f4c565b3480156104ad57600080fd5b506101c6610f77565b3480156104c257600080fd5b506102d86104d136600461291b565b611009565b3480156104e257600080fd5b5061026a60025481565b80516020818301810180516008825292820191909301209152805461051090612b84565b80601f016020809104026020016040519081016040528092919081815260200182805461053c90612b84565b80156105895780601f1061055e57610100808354040283529160200191610589565b820191906000526020600020905b81548152906001019060200180831161056c57829003601f168201915b505050505081565b6105996120ed565b6105a16120ed565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106105d7576105d7612bbf565b6020026020010181815250506001816001815181106105f8576105f8612bbf565b6020026020010181815250506040518060c001604052806001151581526020016001600581111561062b5761062b6123f3565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b60006106b0826108b0565b6107015760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064015b60405180910390fd5b6008836040516107119190612bd5565b90815260405190819003602001812061072991612bf1565b60405180910390208480519060200120146107865760405162461bcd60e51b815260206004820152601760248201527f7573657220616c7265616479207265676973746572656400000000000000000060448201526064016106f8565b610792600154336110eb565b836008846040516107a39190612bd5565b908152602001604051809103902090805190602001906107c492919061214a565b5033600090815260096020908152604090912085516107e59287019061214a565b507fdf285b75c61e111633bd9fdd496ccf9b449555e34d68ea7bf9db18e8f1977c706001858560405161081a93929190612c8d565b60405180910390a15060019392505050565b6000610837826108b0565b61084057600080fd5b6001600a856040516108529190612bd5565b908152604051908190036020019020805491151560ff1990921691909117905560025461087f90336110eb565b7f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e848460405161081a929190612cc4565b6000610958826108be610591565b600480546108cb90612b84565b80601f01602080910402602001604051908101604052809291908181526020018280546108f790612b84565b80156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b505050505085602001518660400151610d5f565b506001919050565b6004805461051090612b84565b606060088260405161097f9190612bd5565b9081526020016040518091039020805461099890612b84565b80601f01602080910402602001604051908101604052809291908181526020018280546109c490612b84565b8015610a115780601f106109e657610100808354040283529160200191610a11565b820191906000526020600020905b8154815290600101906020018083116109f457829003601f168201915b50505050509050919050565b6000546001600160a01b03163314610a775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b610a81600061123a565b565b6009602052600090815260409020805461051090612b84565b6000546001600160a01b03163314610af65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6005546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c9190612ce9565b6005546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e9190612d02565b610c5a5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016106f8565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610c9591815260200190565b60405180910390a25050565b6000546001600160a01b03163314610cfb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b600655565b6000546001600160a01b03163314610d5a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b600755565b610d6985856112a2565b610d778560200151836113ca565b610dc35760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064016106f8565b610dd18560400151826113ca565b610e435760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f6600000000000000000000000000000000000000000000000000000000000060648201526084016106f8565b610e55610e4f866113f4565b846113ca565b610ec75760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f74000000000000000000000000000000000000000060648201526084016106f8565b5050505050565b6003546000906001600160a01b03163314610ee857600080fd5b8151610efb90600490602085019061214a565b507fe0b001f59b54160030a2302b411d234315941c6c1d33a52bdb8f3c46a1dffeb882604051610f2b91906123e0565b60405180910390a1506001919050565b6060610f46826113f4565b92915050565b6000600a82604051610f5e9190612bd5565b9081526040519081900360200190205460ff1692915050565b606060048054610f8690612b84565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb290612b84565b8015610fff5780601f10610fd457610100808354040283529160200191610fff565b820191906000526020600020905b815481529060010190602001808311610fe257829003601f168201915b5050505050905090565b6000546001600160a01b031633146110635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b6001600160a01b0381166110df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106f8565b6110e88161123a565b50565b60006001548314156110fc57506007545b60025483141561110b57506006545b6005546006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af1158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a49190612d02565b6111f05760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e7400000060448201526064016106f8565b816001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b360065460405161122d91815260200190565b60405180910390a2505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112b0826060015182611463565b606081015115806112ca5750806060015182608001515110155b6113165760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106f8565b604081015115806113305750806040015182608001515110155b61137c5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016106f8565b60005b8260800151518110156113c5576113b3836080015182815181106113a5576113a5612bbf565b6020026020010151836116b1565b806113bd81612d35565b91505061137f565b505050565b600081518351146113dd57506000610f46565b508151602091820181902091909201919091201490565b6060600061140f83606001518460200151856040015161187c565b905060005b83608001515181101561145c576114488460800151828151811061143a5761143a612bbf565b6020026020010151836119a6565b91508061145481612d35565b915050611414565b5092915050565b805160200151600581111561147a5761147a6123f3565b82602001516005811115611490576114906123f3565b146114dd5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106f8565b80516040015160058111156114f4576114f46123f3565b8260400151600581111561150a5761150a6123f3565b146115575760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106f8565b805160600151600581111561156e5761156e6123f3565b82606001516005811115611584576115846123f3565b146115d15760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016106f8565b80516080015160088111156115e8576115e86123f3565b826080015160088111156115fe576115fe6123f3565b1461164b5760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f7000000000000060448201526064016106f8565b6116618260a00151826000015160a00151611a55565b6116ad5760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e672070726566697800000000000000000060448201526064016106f8565b5050565b80516020015160058111156116c8576116c86123f3565b826020015160058111156116de576116de6123f3565b1461172b5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016106f8565b6117418260400151826000015160a00151611a55565b1561178e5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e6720707265666978000000000000000060448201526064016106f8565b80602001516040015182604001515110156117eb5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106f8565b602080820151908101519051516000919061180890600190612d50565b6118129190612d67565b9050808260200151606001516118289190612d86565b83604001515111156113c55760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016106f8565b606060008351116118cf5760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b657900000000000000000000000000000060448201526064016106f8565b60008251116119205760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c75650000000000000000000000000060448201526064016106f8565b60008460a0015161193a8660400151876080015187611b18565b60405160200161194b929190612d9e565b60405160208183030381529060405261196d8660600151876080015186611b18565b60405160200161197e929190612d9e565b604051602081830303815290604052905061199d856020015182611b35565b95945050505050565b606060008251116119f95760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c756500000000000060448201526064016106f8565b611a4e8360200151846040015184604051602001611a18929190612d9e565b60408051601f19818403018152908290526060870151611a3a92602001612d9e565b604051602081830303815290604052611b35565b9392505050565b6000815183511015611a6957506000610f46565b60005b8251811015611b0e57828181518110611a8757611a87612bbf565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110611ac657611ac6612bbf565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611afc576000915050610f46565b80611b0681612d35565b915050611a6c565b5060019392505050565b6060611b2d83611b288685611d53565b611d80565b949350505050565b60606001836005811115611b4b57611b4b6123f3565b1415611bb057611ba9600283604051611b649190612bd5565b602060405180830381855afa158015611b81573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ba49190612ce9565b611f14565b9050610f46565b6002836005811115611bc457611bc46123f3565b1415611c125760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e7465640000000000000000000060448201526064016106f8565b6004836005811115611c2657611c266123f3565b1415611c7a57611ba9600383604051611c3f9190612bd5565b602060405180830381855afa158015611c5c573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916611f14565b6005836005811115611c8e57611c8e6123f3565b1415611d0b576000600283604051611ca69190612bd5565b602060405180830381855afa158015611cc3573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ce69190612ce9565b9050611d036003611cf683611f14565b604051611c3f9190612bd5565b915050610f46565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f70000000000000000000000000000060448201526064016106f8565b60606000836005811115611d6957611d696123f3565b1415611d76575080610f46565b611a4e8383611b35565b60606000836008811115611d9657611d966123f3565b1415611da3575080610f46565b6001836008811115611db757611db76123f3565b1415611def57611dc78251611f3e565b82604051602001611dd9929190612d9e565b6040516020818303038152906040529050610f46565b6007836008811115611e0357611e036123f3565b1415611e61578151602014611e5a5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420333220627974657300000000000000000000000000000060448201526064016106f8565b5080610f46565b6008836008811115611e7557611e756123f3565b1415611ecc578151604014611e5a5760405162461bcd60e51b815260206004820152601160248201527f457870656374656420363420627974657300000000000000000000000000000060448201526064016106f8565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f7000000000000000000000000060448201526064016106f8565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff161115611f7c5760078267ffffffffffffffff16901c9150600181611f759190612dcd565b9050611f44565b60008167ffffffffffffffff1667ffffffffffffffff811115611fa157611fa1612229565b6040519080825280601f01601f191660200182016040528015611fcb576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156120695783607f1660801760f81b828267ffffffffffffffff168151811061201657612016612bbf565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c9350808061206190612df0565b915050611fd4565b507f7f0000000000000000000000000000000000000000000000000000000000000081612097600185612e18565b67ffffffffffffffff16815181106120b1576120b1612bbf565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528152602081016121366121ce565b815260200160008152602001600081525090565b82805461215690612b84565b90600052602060002090601f01602090048101928261217857600085556121be565b82601f1061219157805160ff19168380011785556121be565b828001600101855582156121be579182015b828111156121be5782518255916020019190600101906121a3565b506121ca929150612214565b5090565b6040518060c0016040528060608152602001600081526020016000815260200160008152602001606081526020016000600581111561220f5761220f6123f3565b905290565b5b808211156121ca5760008155600101612215565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561226257612262612229565b60405290565b6040516080810167ffffffffffffffff8111828210171561226257612262612229565b60405160a0810167ffffffffffffffff8111828210171561226257612262612229565b604051601f8201601f1916810167ffffffffffffffff811182821017156122d7576122d7612229565b604052919050565b600082601f8301126122f057600080fd5b813567ffffffffffffffff81111561230a5761230a612229565b61231d601f8201601f19166020016122ae565b81815284602083860101111561233257600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561236157600080fd5b813567ffffffffffffffff81111561237857600080fd5b611b2d848285016122df565b60005b8381101561239f578181015183820152602001612387565b838111156123ae576000848401525b50505050565b600081518084526123cc816020860160208601612384565b601f01601f19169290920160200192915050565b602081526000611a4e60208301846123b4565b634e487b7160e01b600052602160045260246000fd5b60068110612419576124196123f3565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b818110156124595783518352928401929184019160010161243d565b50508285015183870152604085015160408701526060850151606087015260808501519250858103608087015261249081846123b4565b9250505060a08301516124a660a0860182612409565b509392505050565b6020815260008251608060208401528051151560a084015260208101516124d860c0850182612409565b5060408101516124eb60e0850182612409565b5060608101516124ff610100850182612409565b50608081015160098110612515576125156123f3565b61012084015260a0015160c06101408401526125356101608401826123b4565b90506020840151601f19848303016040850152612552828261241d565b91505060408401516060840152606084015160808401528091505092915050565b80151581146110e857600080fd5b803561258c81612573565b919050565b80356006811061258c57600080fd5b600060c082840312156125b257600080fd5b6125ba61223f565b905081356125c781612573565b81526125d560208301612591565b60208201526125e660408301612591565b60408201526125f760608301612591565b606082015260808201356009811061260e57600080fd5b608082015260a082013567ffffffffffffffff81111561262d57600080fd5b612639848285016122df565b60a08301525092915050565b600067ffffffffffffffff82111561265f5761265f612229565b5060051b60200190565b600082601f83011261267a57600080fd5b8135602061268f61268a83612645565b6122ae565b82815260059290921b840181019181810190868411156126ae57600080fd5b8286015b8481101561277457803567ffffffffffffffff808211156126d35760008081fd5b908801906080828b03601f19018113156126ed5760008081fd5b6126f5612268565b8784013561270281612573565b81526040612711858201612591565b89830152606080860135858111156127295760008081fd5b6127378f8c838a01016122df565b848401525092850135928484111561275157600091508182fd5b61275f8e8b868901016122df565b908301525086525050509183019183016126b2565b509695505050505050565b600060a0828403121561279157600080fd5b61279961228b565b90506127a482612581565b8152602082013567ffffffffffffffff808211156127c157600080fd5b6127cd858386016122df565b602084015260408401359150808211156127e657600080fd5b6127f2858386016122df565b6040840152606084013591508082111561280b57600080fd5b612817858386016125a0565b6060840152608084013591508082111561283057600080fd5b5061283d84828501612669565b60808301525092915050565b60008060006060848603121561285e57600080fd5b833567ffffffffffffffff8082111561287657600080fd5b612882878388016122df565b9450602086013591508082111561289857600080fd5b6128a4878388016122df565b935060408601359150808211156128ba57600080fd5b506128c78682870161277f565b9150509250925092565b6000602082840312156128e357600080fd5b813567ffffffffffffffff8111156128fa57600080fd5b611b2d8482850161277f565b6001600160a01b03811681146110e857600080fd5b60006020828403121561292d57600080fd5b8135611a4e81612906565b60006020828403121561294a57600080fd5b5035919050565b600082601f83011261296257600080fd5b8135602061297261268a83612645565b82815260059290921b8401810191818101908684111561299157600080fd5b8286015b848110156127745780358352918301918301612995565b6000608082840312156129be57600080fd5b6129c6612268565b9050813567ffffffffffffffff808211156129e057600080fd5b6129ec858386016125a0565b83526020840135915080821115612a0257600080fd5b9083019060c08286031215612a1657600080fd5b612a1e61223f565b823582811115612a2d57600080fd5b612a3987828601612951565b825250602083013560208201526040830135604082015260608301356060820152608083013582811115612a6c57600080fd5b612a78878286016122df565b608083015250612a8a60a08401612591565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a08688031215612aca57600080fd5b853567ffffffffffffffff80821115612ae257600080fd5b612aee89838a0161277f565b96506020880135915080821115612b0457600080fd5b612b1089838a016129ac565b95506040880135915080821115612b2657600080fd5b612b3289838a016122df565b94506060880135915080821115612b4857600080fd5b612b5489838a016122df565b93506080880135915080821115612b6a57600080fd5b50612b77888289016122df565b9150509295509295909350565b600181811c90821680612b9857607f821691505b60208210811415612bb957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251612be7818460208701612384565b9190910192915050565b600080835481600182811c915080831680612c0d57607f831692505b6020808410821415612c2d57634e487b7160e01b86526022600452602486fd5b818015612c415760018114612c5257612c7f565b60ff19861689528489019650612c7f565b60008a81526020902060005b86811015612c775781548b820152908501908301612c5e565b505084890196505b509498975050505050505050565b8315158152606060208201526000612ca860608301856123b4565b8281036040840152612cba81856123b4565b9695505050505050565b604081526000612cd760408301856123b4565b828103602084015261199d81856123b4565b600060208284031215612cfb57600080fd5b5051919050565b600060208284031215612d1457600080fd5b8151611a4e81612573565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d4957612d49612d1f565b5060010190565b600082821015612d6257612d62612d1f565b500390565b6000816000190483118215151615612d8157612d81612d1f565b500290565b60008219821115612d9957612d99612d1f565b500190565b60008351612db0818460208801612384565b835190830190612dc4818360208801612384565b01949350505050565b600067ffffffffffffffff808316818516808303821115612dc457612dc4612d1f565b600067ffffffffffffffff80831681811415612e0e57612e0e612d1f565b6001019392505050565b600067ffffffffffffffff83811690831681811015612e3957612e39612d1f565b03939250505056fea2646970667358221220cf5ec3aa8d50b22808dc201c63279a518ac4d5c89959947929850a1f7deb7b9264736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _relayer: string,
    tokenERC20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(
      _relayer,
      tokenERC20,
      overrides || {}
    ) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _relayer: string,
    tokenERC20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_relayer, tokenERC20, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "hash",
        type: "bytes",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "ServiceFeePaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymentAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "ENROLL_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "SUBMIT_PAYMENT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "accountRegistrationFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "protocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "stablecoin",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct Ics23Helper.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct Ics23Helper.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "setPaymentToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "payee",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setProtocolFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setAccountRegistrationFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "userProof",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum Ics23Helper.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum Ics23Helper.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct Ics23Helper.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct Ics23Helper.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProofWithKV",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040527faa38c8fcdb8500f6802157621989c44502acc94ca3eb31e1547a766ce91448b26000557fa8a7d14acee15b581bdc62c67a1b2711ec58a960850b336a002a03c0f3367b3b600155600060065560006007553480156200006357600080fd5b50604051620032f1380380620032f18339810160408190526200008691620000ba565b60028054336001600160a01b031991821617909155600580549091166001600160a01b0392909216919091179055620000ec565b600060208284031215620000cd57600080fd5b81516001600160a01b0381168114620000e557600080fd5b9392505050565b6131f580620000fc6000396000f3fe6080604052600436106101965760003560e01c8063787dce3d116100e1578063bb893b6f1161008a578063e9cbd82211610064578063e9cbd82214610463578063e9f49b5314610483578063f2a4147a146104a3578063fc7ea420146104b857600080fd5b8063bb893b6f146103f5578063c935256b14610408578063d56a07e31461042857600080fd5b80638da5cb5b116100bb5780638da5cb5b1461039f578063b0d264e7146103bf578063b0e21e8a146103df57600080fd5b8063787dce3d146103275780638406c079146103475780638b178bec1461037f57600080fd5b8063410d0d8411610143578063693ac4fb1161011d578063693ac4fb146102c75780636a326ab1146102e757806373d157171461030757600080fd5b8063410d0d841461027c57806351cff8d9146102915780635dad28de146102b157600080fd5b8063322084911161017457806332208491146102235780633aeac4e11461023657806340ae5ffa1461025857600080fd5b8063016440281461019b57806301b3239e146101d157806327dcd78c14610201575b600080fd5b3480156101a757600080fd5b506101bb6101b6366004612613565b6104ce565b6040516101c891906126a4565b60405180910390f35b3480156101dd57600080fd5b506101f16101ec366004612990565b610573565b60405190151581526020016101c8565b34801561020d57600080fd5b5061021661061d565b6040516101c89190612ad3565b6101f1610231366004612990565b610731565b34801561024257600080fd5b50610256610251366004612bad565b6108b9565b005b34801561026457600080fd5b5061026e60005481565b6040519081526020016101c8565b34801561028857600080fd5b506101bb610a5f565b34801561029d57600080fd5b506102566102ac366004612be6565b610a6c565b3480156102bd57600080fd5b5061026e60075481565b3480156102d357600080fd5b506101bb6102e2366004612613565b610b72565b3480156102f357600080fd5b50610256610302366004612be6565b610c22565b34801561031357600080fd5b506101bb610322366004612be6565b610c73565b34801561033357600080fd5b50610256610342366004612c03565b610c8c565b34801561035357600080fd5b50600354610367906001600160a01b031681565b6040516001600160a01b0390911681526020016101c8565b34801561038b57600080fd5b5061025661039a366004612c03565b610ca8565b3480156103ab57600080fd5b50600254610367906001600160a01b031681565b3480156103cb57600080fd5b506102566103da366004612d7d565b610cc4565b3480156103eb57600080fd5b5061026e60065481565b6101f1610403366004612e4f565b610e33565b34801561041457600080fd5b50610256610423366004612613565b6110a9565b34801561043457600080fd5b506101f1610443366004612613565b8051602081830181018051600a8252928201919093012091525460ff1681565b34801561046f57600080fd5b50600554610367906001600160a01b031681565b34801561048f57600080fd5b506101f161049e366004612613565b61110e565b3480156104af57600080fd5b506101bb611139565b3480156104c457600080fd5b5061026e60015481565b8051602081830181018051600882529282019190930120915280546104f290612f02565b80601f016020809104026020016040519081016040528092919081815260200182805461051e90612f02565b801561056b5780601f106105405761010080835404028352916020019161056b565b820191906000526020600020905b81548152906001019060200180831161054e57829003601f168201915b505050505081565b60006106138261058161061d565b6004805461058e90612f02565b80601f01602080910402602001604051908101604052809291908181526020018280546105ba90612f02565b80156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b50505050508787610cc4565b5060019392505050565b6106256123b1565b61062d6123b1565b60408051600280825260608201835260009260208301908036833701905050905060008160008151811061066357610663612f3d565b60200260200101818152505060018160018151811061068457610684612f3d565b6020026020010181815250506040518060c00160405280600115158152602001600160058111156106b7576106b7612a18565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b600061073c826111cb565b61078d5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064015b60405180910390fd5b60088360405161079d9190612f53565b9081526040519081900360200181206107b591612f6f565b6040518091039020848051906020012014156108135760405162461bcd60e51b815260206004820152601760248201527f7573657220616c726561647920726567697374657265640000000000000000006044820152606401610784565b61081f6000543361127b565b836008846040516108309190612f53565b9081526020016040518091039020908051906020019061085192919061240e565b5033600090815260096020908152604090912085516108729287019061240e565b507fdf285b75c61e111633bd9fdd496ccf9b449555e34d68ea7bf9db18e8f1977c70600185856040516108a79392919061300b565b60405180910390a15060019392505050565b6002546001600160a01b031633146108d057600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190613042565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af11580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb919061305b565b610a175760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610784565b826001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610a5291815260200190565b60405180910390a2505050565b600480546104f290612f02565b6002546001600160a01b03163314610a8357600080fd5b604051479060009081906001600160a01b0385169084908381818185875af1925050503d8060008114610ad2576040519150601f19603f3d011682016040523d82523d6000602084013e610ad7565b606091505b509150915081610b295760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606401610784565b836001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d584604051610b6491815260200190565b60405180910390a250505050565b6060600882604051610b849190612f53565b90815260200160405180910390208054610b9d90612f02565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc990612f02565b8015610c165780601f10610beb57610100808354040283529160200191610c16565b820191906000526020600020905b815481529060010190602001808311610bf957829003601f168201915b50505050509050919050565b6002546001600160a01b03163314610c3957600080fd5b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600960205260009081526040902080546104f290612f02565b6002546001600160a01b03163314610ca357600080fd5b600655565b6002546001600160a01b03163314610cbf57600080fd5b600755565b610cce8585611571565b610cdc856020015183611699565b610d285760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f666044820152606401610784565b610d36856040015182611699565b610da85760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f660000000000000000000000000000000000000000000000000000000000006064820152608401610784565b610dba610db4866116c6565b84611699565b610e2c5760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f7400000000000000000000000000000000000000006064820152608401610784565b5050505050565b6000600a84604051610e459190612f53565b9081526040519081900360200190205460ff1615610eca5760405162461bcd60e51b8152602060048201526024808201527f70726f6f6620686173206265656e207375626d69747465642028666f756e642060448201527f6b657929000000000000000000000000000000000000000000000000000000006064820152608401610784565b838051906020012082602001518051906020012014610f2b5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206b65790000000000000000000000000000000000000000006044820152606401610784565b84602001518051906020012060096000886001600160a01b03166001600160a01b03168152602001908152602001600020604051610f699190612f6f565b604051809103902014610fbe5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642075736572206b6579000000000000000000000000000000006044820152606401610784565b610fc7856111cb565b6110135760405162461bcd60e51b815260206004820152601260248201527f696e76616c696420757365722070726f6f6600000000000000000000000000006044820152606401610784565b61101c826111cb565b61102557600080fd5b6001600a856040516110379190612f53565b908152604051908190036020019020805491151560ff19909216919091179055600154611064908761127b565b7f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e8484604051611095929190613078565b60405180910390a150600195945050505050565b6002546001600160a01b031633146110c057600080fd5b80516110d390600490602084019061240e565b507fe0b001f59b54160030a2302b411d234315941c6c1d33a52bdb8f3c46a1dffeb88160405161110391906126a4565b60405180910390a150565b6000600a826040516111209190612f53565b9081526040519081900360200190205460ff1692915050565b60606004805461114890612f02565b80601f016020809104026020016040519081016040528092919081815260200182805461117490612f02565b80156111c15780601f10611196576101008083540402835291602001916111c1565b820191906000526020600020905b8154815290600101906020018083116111a457829003601f168201915b5050505050905090565b6000611273826111d961061d565b600480546111e690612f02565b80601f016020809104026020016040519081016040528092919081815260200182805461121290612f02565b801561125f5780601f106112345761010080835404028352916020019161125f565b820191906000526020600020905b81548152906001019060200180831161124257829003601f168201915b505050505085602001518660400151610cc4565b506001919050565b6005546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e89190613042565b116113355760405162461bcd60e51b815260206004820152601160248201527f6e6f20656e6f7567682062616c616e63650000000000000000000000000000006044820152606401610784565b600054821415611451576005546007546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf919061305b565b61140b5760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e740000006044820152606401610784565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b360075460405161144891815260200190565b60405180910390a25b60015482141561156d576005546006546040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064016020604051808303816000875af11580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db919061305b565b6115275760405162461bcd60e51b815260206004820152601d60248201527f7472616e73666572206661696c656420666f7220726563697069656e740000006044820152606401610784565b806001600160a01b03167fa70c9ef1994019c7c70e8134256a652460b545755ed8aad140daeaccc30446b360065460405161156491815260200190565b60405180910390a25b5050565b61157f826060015182611735565b606081015115806115995750806060015182608001515110155b6115e55760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610784565b604081015115806115ff5750806040015182608001515110155b61164b5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610784565b60005b826080015151811015611694576116828360800151828151811061167457611674612f3d565b60200260200101518361197f565b8061168c816130b3565b91505061164e565b505050565b600081518351146116ac575060006116c0565b508151602082810182902090840191909120145b92915050565b606060006116e1836060015184602001518560400151611b4a565b905060005b83608001515181101561172e5761171a8460800151828151811061170c5761170c612f3d565b602002602001015183611c74565b915080611726816130b3565b9150506116e6565b5092915050565b805160200151600581111561174c5761174c612a18565b8260200151600581111561176257611762612a18565b146117af5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610784565b80516040015160058111156117c6576117c6612a18565b826040015160058111156117dc576117dc612a18565b146118295760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610784565b805160600151600581111561184057611840612a18565b8260600151600581111561185657611856612a18565b146118a35760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610784565b80516080015160088111156118ba576118ba612a18565b826080015160088111156118d0576118d0612a18565b1461191d5760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f700000000000006044820152606401610784565b6119338260a00151826000015160a00151611d23565b61156d5760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e67207072656669780000000000000000006044820152606401610784565b805160200151600581111561199657611996612a18565b826020015160058111156119ac576119ac612a18565b146119f95760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610784565b611a0f8260400151826000015160a00151611d23565b15611a5c5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e672070726566697800000000000000006044820152606401610784565b8060200151604001518260400151511015611ab95760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610784565b6020808201519081015190515160009190611ad6906001906130ce565b611ae091906130e5565b905080826020015160600151611af69190613104565b83604001515111156116945760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610784565b60606000835111611b9d5760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b65790000000000000000000000000000006044820152606401610784565b6000825111611bee5760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c7565000000000000000000000000006044820152606401610784565b60008460a00151611c088660400151876080015187611ddc565b604051602001611c1992919061311c565b604051602081830303815290604052611c3b8660600151876080015186611ddc565b604051602001611c4c92919061311c565b6040516020818303038152906040529050611c6b856020015182611df9565b95945050505050565b60606000825111611cc75760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c75650000000000006044820152606401610784565b611d1c8360200151846040015184604051602001611ce692919061311c565b60408051601f19818403018152908290526060870151611d089260200161311c565b604051602081830303815290604052611df9565b9392505050565b6000815183511015611d37575060006116c0565b60005b825181101561061357828181518110611d5557611d55612f3d565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110611d9457611d94612f3d565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611dca5760009150506116c0565b80611dd4816130b3565b915050611d3a565b6060611df183611dec8685612017565b612044565b949350505050565b60606001836005811115611e0f57611e0f612a18565b1415611e7457611e6d600283604051611e289190612f53565b602060405180830381855afa158015611e45573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e689190613042565b6121d8565b90506116c0565b6002836005811115611e8857611e88612a18565b1415611ed65760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e746564000000000000000000006044820152606401610784565b6004836005811115611eea57611eea612a18565b1415611f3e57611e6d600383604051611f039190612f53565b602060405180830381855afa158015611f20573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff19166121d8565b6005836005811115611f5257611f52612a18565b1415611fcf576000600283604051611f6a9190612f53565b602060405180830381855afa158015611f87573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611faa9190613042565b9050611fc76003611fba836121d8565b604051611f039190612f53565b9150506116c0565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f7000000000000000000000000000006044820152606401610784565b6060600083600581111561202d5761202d612a18565b141561203a5750806116c0565b611d1c8383611df9565b6060600083600881111561205a5761205a612a18565b14156120675750806116c0565b600183600881111561207b5761207b612a18565b14156120b35761208b8251612202565b8260405160200161209d92919061311c565b60405160208183030381529060405290506116c0565b60078360088111156120c7576120c7612a18565b141561212557815160201461211e5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642033322062797465730000000000000000000000000000006044820152606401610784565b50806116c0565b600883600881111561213957612139612a18565b141561219057815160401461211e5760405162461bcd60e51b815260206004820152601160248201527f45787065637465642036342062797465730000000000000000000000000000006044820152606401610784565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f700000000000000000000000006044820152606401610784565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff1611156122405760078267ffffffffffffffff16901c9150600181612239919061314b565b9050612208565b60008167ffffffffffffffff1667ffffffffffffffff811115612265576122656124ed565b6040519080825280601f01601f19166020018201604052801561228f576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff16101561232d5783607f1660801760f81b828267ffffffffffffffff16815181106122da576122da612f3d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806123259061316e565b915050612298565b507f7f000000000000000000000000000000000000000000000000000000000000008161235b600185613196565b67ffffffffffffffff168151811061237557612375612f3d565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528152602081016123fa612492565b815260200160008152602001600081525090565b82805461241a90612f02565b90600052602060002090601f01602090048101928261243c5760008555612482565b82601f1061245557805160ff1916838001178555612482565b82800160010185558215612482579182015b82811115612482578251825591602001919060010190612467565b5061248e9291506124d8565b5090565b6040518060c001604052806060815260200160008152602001600081526020016000815260200160608152602001600060058111156124d3576124d3612a18565b905290565b5b8082111561248e57600081556001016124d9565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612526576125266124ed565b60405290565b6040516080810167ffffffffffffffff81118282101715612526576125266124ed565b60405160a0810167ffffffffffffffff81118282101715612526576125266124ed565b604051601f8201601f1916810167ffffffffffffffff8111828210171561259b5761259b6124ed565b604052919050565b600082601f8301126125b457600080fd5b813567ffffffffffffffff8111156125ce576125ce6124ed565b6125e1601f8201601f1916602001612572565b8181528460208386010111156125f657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561262557600080fd5b813567ffffffffffffffff81111561263c57600080fd5b611df1848285016125a3565b60005b8381101561266357818101518382015260200161264b565b83811115612672576000848401525b50505050565b60008151808452612690816020860160208601612648565b601f01601f19169290920160200192915050565b602081526000611d1c6020830184612678565b80151581146126c557600080fd5b50565b80356126d3816126b7565b919050565b8035600681106126d357600080fd5b600060c082840312156126f957600080fd5b612701612503565b9050813561270e816126b7565b815261271c602083016126d8565b602082015261272d604083016126d8565b604082015261273e606083016126d8565b606082015260808201356009811061275557600080fd5b608082015260a082013567ffffffffffffffff81111561277457600080fd5b612780848285016125a3565b60a08301525092915050565b600067ffffffffffffffff8211156127a6576127a66124ed565b5060051b60200190565b600082601f8301126127c157600080fd5b813560206127d66127d18361278c565b612572565b82815260059290921b840181019181810190868411156127f557600080fd5b8286015b848110156128bb57803567ffffffffffffffff8082111561281a5760008081fd5b908801906080828b03601f19018113156128345760008081fd5b61283c61252c565b87840135612849816126b7565b815260406128588582016126d8565b89830152606080860135858111156128705760008081fd5b61287e8f8c838a01016125a3565b848401525092850135928484111561289857600091508182fd5b6128a68e8b868901016125a3565b908301525086525050509183019183016127f9565b509695505050505050565b600060a082840312156128d857600080fd5b6128e061254f565b90506128eb826126c8565b8152602082013567ffffffffffffffff8082111561290857600080fd5b612914858386016125a3565b6020840152604084013591508082111561292d57600080fd5b612939858386016125a3565b6040840152606084013591508082111561295257600080fd5b61295e858386016126e7565b6060840152608084013591508082111561297757600080fd5b50612984848285016127b0565b60808301525092915050565b6000806000606084860312156129a557600080fd5b833567ffffffffffffffff808211156129bd57600080fd5b6129c9878388016125a3565b945060208601359150808211156129df57600080fd5b6129eb878388016125a3565b93506040860135915080821115612a0157600080fd5b50612a0e868287016128c6565b9150509250925092565b634e487b7160e01b600052602160045260246000fd5b60068110612a3e57612a3e612a18565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b81811015612a7e57835183529284019291840191600101612a62565b505082850151838701526040850151604087015260608501516060870152608085015192508581036080870152612ab58184612678565b9250505060a0830151612acb60a0860182612a2e565b509392505050565b6020815260008251608060208401528051151560a08401526020810151612afd60c0850182612a2e565b506040810151612b1060e0850182612a2e565b506060810151612b24610100850182612a2e565b50608081015160098110612b3a57612b3a612a18565b61012084015260a0015160c0610140840152612b5a610160840182612678565b90506020840151601f19848303016040850152612b778282612a42565b91505060408401516060840152606084015160808401528091505092915050565b6001600160a01b03811681146126c557600080fd5b60008060408385031215612bc057600080fd5b8235612bcb81612b98565b91506020830135612bdb81612b98565b809150509250929050565b600060208284031215612bf857600080fd5b8135611d1c81612b98565b600060208284031215612c1557600080fd5b5035919050565b600082601f830112612c2d57600080fd5b81356020612c3d6127d18361278c565b82815260059290921b84018101918181019086841115612c5c57600080fd5b8286015b848110156128bb5780358352918301918301612c60565b600060808284031215612c8957600080fd5b612c9161252c565b9050813567ffffffffffffffff80821115612cab57600080fd5b612cb7858386016126e7565b83526020840135915080821115612ccd57600080fd5b9083019060c08286031215612ce157600080fd5b612ce9612503565b823582811115612cf857600080fd5b612d0487828601612c1c565b825250602083013560208201526040830135604082015260608301356060820152608083013582811115612d3757600080fd5b612d43878286016125a3565b608083015250612d5560a084016126d8565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a08688031215612d9557600080fd5b853567ffffffffffffffff80821115612dad57600080fd5b612db989838a016128c6565b96506020880135915080821115612dcf57600080fd5b612ddb89838a01612c77565b95506040880135915080821115612df157600080fd5b612dfd89838a016125a3565b94506060880135915080821115612e1357600080fd5b612e1f89838a016125a3565b93506080880135915080821115612e3557600080fd5b50612e42888289016125a3565b9150509295509295909350565b600080600080600060a08688031215612e6757600080fd5b8535612e7281612b98565b9450602086013567ffffffffffffffff80821115612e8f57600080fd5b612e9b89838a016128c6565b95506040880135915080821115612eb157600080fd5b612ebd89838a016125a3565b94506060880135915080821115612ed357600080fd5b612edf89838a016125a3565b93506080880135915080821115612ef557600080fd5b50612e42888289016128c6565b600181811c90821680612f1657607f821691505b60208210811415612f3757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251612f65818460208701612648565b9190910192915050565b600080835481600182811c915080831680612f8b57607f831692505b6020808410821415612fab57634e487b7160e01b86526022600452602486fd5b818015612fbf5760018114612fd057612ffd565b60ff19861689528489019650612ffd565b60008a81526020902060005b86811015612ff55781548b820152908501908301612fdc565b505084890196505b509498975050505050505050565b83151581526060602082015260006130266060830185612678565b82810360408401526130388185612678565b9695505050505050565b60006020828403121561305457600080fd5b5051919050565b60006020828403121561306d57600080fd5b8151611d1c816126b7565b60408152600061308b6040830185612678565b8281036020840152611c6b8185612678565b634e487b7160e01b600052601160045260246000fd5b60006000198214156130c7576130c761309d565b5060010190565b6000828210156130e0576130e061309d565b500390565b60008160001904831182151516156130ff576130ff61309d565b500290565b600082198211156131175761311761309d565b500190565b6000835161312e818460208801612648565b835190830190613142818360208801612648565b01949350505050565b600067ffffffffffffffff8083168185168083038211156131425761314261309d565b600067ffffffffffffffff8083168181141561318c5761318c61309d565b6001019392505050565b600067ffffffffffffffff838116908316818110156131b7576131b761309d565b03939250505056fea2646970667358221220af56677617bb50957c94bdfce447b8352ad885d5e7dc2f52f8a243a48e9ffed764736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(
      tokenAddress,
      overrides || {}
    ) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenAddress, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

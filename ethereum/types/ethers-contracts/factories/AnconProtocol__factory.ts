/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_onlyOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "did",
        type: "string",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
    ],
    name: "convertProof",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_prefix",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "_leafOpUint",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "existenceProofInnerOpHash",
        type: "uint256",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "prefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpPrefix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_innerOpSuffix",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "existenceProofValue",
        type: "bytes",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620027cd380380620027cd83398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612731806200009c6000396000f3fe6080604052600436106100d25760003560e01c806373d157171161007f578063c935256b11610059578063c935256b14610244578063d56a07e314610264578063d5a808261461029f578063e7a9f5a3146102b257600080fd5b806373d15717146101b05780638da5cb5b146101d0578063b0d264e71461022257600080fd5b8063410d0d84116100b0578063410d0d841461014e5780634ee123ea146101705780636aa0a0c61461019057600080fd5b8063032c568a146100d75780631366387a146100ff57806327dcd78c1461012c575b600080fd5b6100ea6100e5366004611d54565b6102d2565b60405190151581526020015b60405180910390f35b34801561010b57600080fd5b5061011f61011a366004611db8565b61033c565b6040516100f69190611f86565b34801561013857600080fd5b50610141610433565b6040516100f6919061208d565b34801561015a57600080fd5b50610163610547565b6040516100f69190612169565b34801561017c57600080fd5b5061016361018b36600461217c565b6105d5565b34801561019c57600080fd5b506100ea6101ab36600461220c565b6105f9565b3480156101bc57600080fd5b506101636101cb36600461230c565b6106bc565b3480156101dc57600080fd5b506000546101fd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f6565b34801561022e57600080fd5b5061024261023d366004612448565b6106d5565b005b34801561025057600080fd5b506100ea61025f36600461217c565b610849565b34801561027057600080fd5b506100ea61027f36600461217c565b805160208183018101805160048252928201919093012091525460ff1681565b6100ea6102ad3660046124a6565b61088a565b3480156102be57600080fd5b506101636102cd366004611db8565b610987565b600081602001516002846040516102e9919061252e565b9081526020016040518091039020908051906020019061030a9291906117ec565b5060208083015133600090815260038352604090208151610330939192909101906117ec565b50600190505b92915050565b610344611870565b6040805160c0810182526001808252602082018190526000828401819052606083018290526080830182905260a083018890528351828152808501909452919290816020015b604080516080810182526000808252602082015260609181018290528181019190915281526020019060019003908161038a57505060408051608081018252600180825260208201529081018790526060810186905281519192509082906000906103f7576103f761254a565b6020908102919091018101919091526040805160a081018252600181529182019990995297880196909652606087015250505050608082015290565b61043b6118a7565b6104436118a7565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106104795761047961254a565b60200260200101818152505060018160018151811061049a5761049a61254a565b6020026020010181815250506040518060c00160405280600115158152602001600160058111156104cd576104cd611ee6565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b6001805461055490612560565b80601f016020809104026020016040519081016040528092919081815260200182805461058090612560565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b80516020818301810180516002825292820191909301209152805461055490612560565b600080610609898989888861033c565b90506106ad81610617610433565b6001805461062490612560565b80601f016020809104026020016040519081016040528092919081815260200182805461065090612560565b801561069d5780601f106106725761010080835404028352916020019161069d565b820191906000526020600020905b81548152906001019060200180831161068057829003601f168201915b50505050508c85604001516106d5565b50600198975050505050505050565b6003602052600090815260409020805461055490612560565b6106df85856109ae565b6106ed856020015183610ad6565b61073e5760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064015b60405180910390fd5b61074c856040015182610ad6565b6107be5760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f660000000000000000000000000000000000000000000000000000000000006064820152608401610735565b6107d06107ca86610b06565b84610ad6565b6108425760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f7400000000000000000000000000000000000000006064820152608401610735565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461086e57600080fd5b81516108819060019060208501906117ec565b50600192915050565b60008280519060200120846040015180519060200120146109135760405162461bcd60e51b815260206004820152603560248201527f626164207061636b65743a207061636b6574206861736820697320646966666560448201527f72656e742066726f6d2069637332332076616c756500000000000000000000006064820152608401610735565b6001600483604051610925919061252e565b908152604051908190036020018120805492151560ff19909316929092179091557f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e90610975908490869061259b565b60405180910390a15060019392505050565b60606000610998848489898961033c565b90506109a381610b06565b979650505050505050565b6109bc826060015182610b75565b606081015115806109d65750806060015182608001515110155b610a225760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610735565b60408101511580610a3c5750806040015182608001515110155b610a885760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f727400000000000000006044820152606401610735565b60005b826080015151811015610ad157610abf83608001518281518110610ab157610ab161254a565b602002602001015183610dc3565b80610ac9816125d6565b915050610a8b565b505050565b60008151835114610ae957506000610336565b825160208381018281209186019283209091145b95945050505050565b60606000610b21836060015184602001518560400151610f8e565b905060005b836080015151811015610b6e57610b5a84608001518281518110610b4c57610b4c61254a565b6020026020010151836110af565b915080610b66816125d6565b915050610b26565b5092915050565b8051602001516005811115610b8c57610b8c611ee6565b82602001516005811115610ba257610ba2611ee6565b14610bef5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610735565b8051604001516005811115610c0657610c06611ee6565b82604001516005811115610c1c57610c1c611ee6565b14610c695760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610735565b8051606001516005811115610c8057610c80611ee6565b82606001516005811115610c9657610c96611ee6565b14610ce35760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b657900000000000000000000006044820152606401610735565b8051608001516008811115610cfa57610cfa611ee6565b82608001516008811115610d1057610d10611ee6565b14610d5d5760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f700000000000006044820152606401610735565b610d738260a00151826000015160a0015161115e565b610dbf5760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e67207072656669780000000000000000006044820152606401610735565b5050565b8051602001516005811115610dda57610dda611ee6565b82602001516005811115610df057610df0611ee6565b14610e3d5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f700000000000000000000000000000006044820152606401610735565b610e538260400151826000015160a0015161115e565b15610ea05760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e672070726566697800000000000000006044820152606401610735565b8060200151604001518260400151511015610efd5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610735565b6020808201519081015190515160009190610f1a906001906125f1565b610f249190612608565b905080826020015160600151610f3a9190612627565b8360400151511115610ad15760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f727400000000000000006044820152606401610735565b60606000835111610fe15760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b65790000000000000000000000000000006044820152606401610735565b60008251116110325760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c7565000000000000000000000000006044820152606401610735565b60008460a0015161104c8660400151876080015187611217565b60405160200161105d92919061263f565b60405160208183030381529060405261107f8660600151876080015186611217565b60405160200161109092919061263f565b6040516020818303038152906040529050610afd856020015182611234565b606060008251116111025760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c75650000000000006044820152606401610735565b611157836020015184604001518460405160200161112192919061263f565b60408051601f198184030181529082905260608701516111439260200161263f565b604051602081830303815290604052611234565b9392505050565b600081518351101561117257506000610336565b60005b8251811015610330578281815181106111905761119061254a565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106111cf576111cf61254a565b01602001517fff000000000000000000000000000000000000000000000000000000000000001614611205576000915050610336565b8061120f816125d6565b915050611175565b606061122c836112278685611452565b61147f565b949350505050565b6060600183600581111561124a5761124a611ee6565b14156112af576112a8600283604051611263919061252e565b602060405180830381855afa158015611280573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112a3919061266e565b611613565b9050610336565b60028360058111156112c3576112c3611ee6565b14156113115760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e746564000000000000000000006044820152606401610735565b600483600581111561132557611325611ee6565b1415611379576112a860038360405161133e919061252e565b602060405180830381855afa15801561135b573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff1916611613565b600583600581111561138d5761138d611ee6565b141561140a5760006002836040516113a5919061252e565b602060405180830381855afa1580156113c2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906113e5919061266e565b905061140260036113f583611613565b60405161133e919061252e565b915050610336565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f7000000000000000000000000000006044820152606401610735565b6060600083600581111561146857611468611ee6565b1415611475575080610336565b6111578383611234565b6060600083600881111561149557611495611ee6565b14156114a2575080610336565b60018360088111156114b6576114b6611ee6565b14156114ee576114c6825161163d565b826040516020016114d892919061263f565b6040516020818303038152906040529050610336565b600783600881111561150257611502611ee6565b14156115605781516020146115595760405162461bcd60e51b815260206004820152601160248201527f45787065637465642033322062797465730000000000000000000000000000006044820152606401610735565b5080610336565b600883600881111561157457611574611ee6565b14156115cb5781516040146115595760405162461bcd60e51b815260206004820152601160248201527f45787065637465642036342062797465730000000000000000000000000000006044820152606401610735565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f700000000000000000000000006044820152606401610735565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff16111561167b5760078267ffffffffffffffff16901c91506001816116749190612687565b9050611643565b60008167ffffffffffffffff1667ffffffffffffffff8111156116a0576116a0611965565b6040519080825280601f01601f1916602001820160405280156116ca576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156117685783607f1660801760f81b828267ffffffffffffffff16815181106117155761171561254a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c93508080611760906126aa565b9150506116d3565b507f7f00000000000000000000000000000000000000000000000000000000000000816117966001856126d2565b67ffffffffffffffff16815181106117b0576117b061254a565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b8280546117f890612560565b90600052602060002090601f01602090048101928261181a5760008555611860565b82601f1061183357805160ff1916838001178555611860565b82800160010185558215611860579182015b82811115611860578251825591602001919060010190611845565b5061186c9291506118db565b5090565b6040518060a00160405280600015158152602001606081526020016060815260200161189a6118f0565b8152602001606081525090565b60405180608001604052806118ba6118f0565b81526020016118c761191f565b815260200160008152602001600081525090565b5b8082111561186c57600081556001016118dc565b6040805160c081019091526000808252602082019081526020016000815260200160008152602001600061189a565b6040518060c0016040528060608152602001600081526020016000815260200160008152602001606081526020016000600581111561196057611960611ee6565b905290565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561199e5761199e611965565b60405290565b6040516080810167ffffffffffffffff8111828210171561199e5761199e611965565b60405160a0810167ffffffffffffffff8111828210171561199e5761199e611965565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a1357611a13611965565b604052919050565b600082601f830112611a2c57600080fd5b813567ffffffffffffffff811115611a4657611a46611965565b611a59601f8201601f19166020016119ea565b818152846020838601011115611a6e57600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114611a9b57600080fd5b919050565b803560068110611a9b57600080fd5b600060c08284031215611ac157600080fd5b611ac961197b565b9050611ad482611a8b565b8152611ae260208301611aa0565b6020820152611af360408301611aa0565b6040820152611b0460608301611aa0565b6060820152608082013560098110611b1b57600080fd5b608082015260a082013567ffffffffffffffff811115611b3a57600080fd5b611b4684828501611a1b565b60a08301525092915050565b600067ffffffffffffffff821115611b6c57611b6c611965565b5060051b60200190565b600082601f830112611b8757600080fd5b81356020611b9c611b9783611b52565b6119ea565b82815260059290921b84018101918181019086841115611bbb57600080fd5b8286015b84811015611c7f57803567ffffffffffffffff80821115611be05760008081fd5b908801906080828b03601f1901811315611bfa5760008081fd5b611c026119a4565b611c0d888501611a8b565b81526040611c1c818601611aa0565b8983015260608086013585811115611c345760008081fd5b611c428f8c838a0101611a1b565b8484015250928501359284841115611c5c57600091508182fd5b611c6a8e8b86890101611a1b565b90830152508652505050918301918301611bbf565b509695505050505050565b600060a08284031215611c9c57600080fd5b611ca46119c7565b9050611caf82611a8b565b8152602082013567ffffffffffffffff80821115611ccc57600080fd5b611cd885838601611a1b565b60208401526040840135915080821115611cf157600080fd5b611cfd85838601611a1b565b60408401526060840135915080821115611d1657600080fd5b611d2285838601611aaf565b60608401526080840135915080821115611d3b57600080fd5b50611d4884828501611b76565b60808301525092915050565b60008060408385031215611d6757600080fd5b823567ffffffffffffffff80821115611d7f57600080fd5b611d8b86838701611a1b565b93506020850135915080821115611da157600080fd5b50611dae85828601611c8a565b9150509250929050565b600080600080600060a08688031215611dd057600080fd5b853567ffffffffffffffff80821115611de857600080fd5b611df489838a01611a1b565b96506020880135915080821115611e0a57600080fd5b611e1689838a01611a1b565b95506040880135915080821115611e2c57600080fd5b611e3889838a01611a1b565b94506060880135915080821115611e4e57600080fd5b611e5a89838a01611a1b565b93506080880135915080821115611e7057600080fd5b50611e7d88828901611a1b565b9150509295509295909350565b60005b83811015611ea5578181015183820152602001611e8d565b83811115611eb4576000848401525b50505050565b60008151808452611ed2816020860160208601611e8a565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60068110611f0c57611f0c611ee6565b9052565b80511515825260006020820151611f2a6020850182611efc565b506040820151611f3d6040850182611efc565b506060820151611f506060850182611efc565b50608082015160098110611f6657611f66611ee6565b8060808501525060a082015160c060a085015261122c60c0850182611eba565b60006020808352835115158184015280840151604060a081860152611fae60c0860183611eba565b915080860151601f196060818886030181890152611fcc8584611eba565b945080890151925060808289870301818a0152611fe98685611f10565b8a8201518a8203850160a08c015280518083529197508801945087870190600581901b8801890160005b8281101561207c57868a830301845287518051151583528b81015161203a8d850182611efc565b5089810151868b85015261205087850182611eba565b91880151848303858a01529190506120688183611eba565b998d0199958d019593505050600101612013565b509c9b505050505050505050505050565b6000602080835283516080828501526120a960a0850182611f10565b85830151858203601f19016040870152805160c0808452815190840181905292935090919084019060009060e08501905b808310156120fa57835182529286019260019290920191908601906120da565b50858401518686015260408401516040860152606084015160608601526080840151955084810360808601526121308187611eba565b955050505060a0810151905061214960a0830182611efc565b505060408401516060840152606084015160808401528091505092915050565b6020815260006111576020830184611eba565b60006020828403121561218e57600080fd5b813567ffffffffffffffff8111156121a557600080fd5b61122c84828501611a1b565b600082601f8301126121c257600080fd5b813560206121d2611b9783611b52565b82815260059290921b840181019181810190868411156121f157600080fd5b8286015b84811015611c7f57803583529183019183016121f5565b600080600080600080600060e0888a03121561222757600080fd5b873567ffffffffffffffff8082111561223f57600080fd5b61224b8b838c01611a1b565b985060208a013591508082111561226157600080fd5b61226d8b838c01611a1b565b975060408a013591508082111561228357600080fd5b61228f8b838c01611a1b565b965060608a01359150808211156122a557600080fd5b6122b18b838c016121b1565b955060808a01359150808211156122c757600080fd5b6122d38b838c01611a1b565b945060a08a01359150808211156122e957600080fd5b506122f68a828b01611a1b565b92505060c0880135905092959891949750929550565b60006020828403121561231e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461115757600080fd5b60006080828403121561235457600080fd5b61235c6119a4565b9050813567ffffffffffffffff8082111561237657600080fd5b61238285838601611aaf565b8352602084013591508082111561239857600080fd5b9083019060c082860312156123ac57600080fd5b6123b461197b565b8235828111156123c357600080fd5b6123cf878286016121b1565b82525060208301356020820152604083013560408201526060830135606082015260808301358281111561240257600080fd5b61240e87828601611a1b565b60808301525061242060a08401611aa0565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a0868803121561246057600080fd5b853567ffffffffffffffff8082111561247857600080fd5b61248489838a01611c8a565b9650602088013591508082111561249a57600080fd5b611e1689838a01612342565b6000806000606084860312156124bb57600080fd5b833567ffffffffffffffff808211156124d357600080fd5b6124df87838801611c8a565b945060208601359150808211156124f557600080fd5b61250187838801611a1b565b9350604086013591508082111561251757600080fd5b5061252486828701611a1b565b9150509250925092565b60008251612540818460208701611e8a565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061257457607f821691505b6020821081141561259557634e487b7160e01b600052602260045260246000fd5b50919050565b6040815260006125ae6040830185611eba565b8281036020840152610afd8185611eba565b634e487b7160e01b600052601160045260246000fd5b60006000198214156125ea576125ea6125c0565b5060010190565b600082821015612603576126036125c0565b500390565b6000816000190483118215151615612622576126226125c0565b500290565b6000821982111561263a5761263a6125c0565b500190565b60008351612651818460208801611e8a565b835190830190612665818360208801611e8a565b01949350505050565b60006020828403121561268057600080fd5b5051919050565b600067ffffffffffffffff808316818516808303821115612665576126656125c0565b600067ffffffffffffffff808316818114156126c8576126c86125c0565b6001019392505050565b600067ffffffffffffffff838116908316818110156126f3576126f36125c0565b03939250505056fea2646970667358221220423d5f423b343bfedbe8721b3f7688dae9e54d5c23c7bb3378d2047cd155f57a64736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_onlyOwner, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_onlyOwner, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

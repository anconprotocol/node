/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnconProtocol, AnconProtocolInterface } from "../AnconProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_onlyOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enrolledStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "AccountRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "hash",
        type: "bytes",
      },
    ],
    name: "HeaderUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
    ],
    name: "ProofPacketSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "accountByAddrProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "accountProofs",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getIavlSpec",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "proofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "relayNetworkHash",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leafSpec",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[]",
                name: "childOrder",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "childSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minPrefixLength",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxPrefixLength",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "emptyChild",
                type: "bytes",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
            ],
            internalType: "struct ICS23.InnerSpec",
            name: "innerSpec",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "maxDepth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minDepth",
            type: "uint256",
          },
        ],
        internalType: "struct ICS23.ProofSpec",
        name: "spec",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "root",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "value",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getProtocolHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
    ],
    name: "getProof",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
    ],
    name: "hasProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "did",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "enrollL2Account",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "rootHash",
        type: "bytes",
      },
    ],
    name: "updateProtocolHeader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "packet",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "submitPacketWithProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "exProof",
        type: "tuple",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "valid",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "value",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_key",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "prehash_value",
                type: "uint8",
              },
              {
                internalType: "enum ICS23.LengthOp",
                name: "len",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.LeafOp",
            name: "leaf",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "valid",
                type: "bool",
              },
              {
                internalType: "enum ICS23.HashOp",
                name: "hash",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "prefix",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "suffix",
                type: "bytes",
              },
            ],
            internalType: "struct ICS23.InnerOp[]",
            name: "path",
            type: "tuple[]",
          },
        ],
        internalType: "struct ICS23.ExistenceProof",
        name: "proof",
        type: "tuple",
      },
    ],
    name: "queryRootCalculation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620025c7380380620025c783398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b61252b806200009c6000396000f3fe6080604052600436106100e85760003560e01c806373d157171161008a578063d4f3237c11610059578063d4f3237c14610284578063d56a07e3146102a4578063e9f49b53146102df578063f2a4147a146102ff57600080fd5b806373d15717146101d05780638da5cb5b146101f0578063b0d264e714610242578063c935256b1461026457600080fd5b8063354763d9116100c6578063354763d914610168578063391506e51461017b578063410d0d841461019b578063693ac4fb146101b057600080fd5b806301644028146100ed57806327dcd78c146101235780633220849114610145575b600080fd5b3480156100f957600080fd5b5061010d610108366004611ade565b610314565b60405161011a9190611b6f565b60405180910390f35b34801561012f57600080fd5b506101386103b9565b60405161011a9190611c3d565b610158610153366004611fcb565b6104cd565b604051901515815260200161011a565b610158610176366004611fcb565b61057b565b34801561018757600080fd5b50610158610196366004612053565b6105f1565b3480156101a757600080fd5b5061010d6106a1565b3480156101bc57600080fd5b5061010d6101cb366004611ade565b6106ae565b3480156101dc57600080fd5b5061010d6101eb366004612088565b61075e565b3480156101fc57600080fd5b5060005461021d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011a565b34801561024e57600080fd5b5061026261025d36600461221f565b610777565b005b34801561027057600080fd5b5061015861027f366004611ade565b6108eb565b34801561029057600080fd5b5061010d61029f366004612053565b610963565b3480156102b057600080fd5b506101586102bf366004611ade565b805160208183018101805160048252928201919093012091525460ff1681565b3480156102eb57600080fd5b506101586102fa366004611ade565b610974565b34801561030b57600080fd5b5061010d61099f565b805160208183018101805160028252928201919093012091528054610338906122f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610364906122f1565b80156103b15780601f10610386576101008083540402835291602001916103b1565b820191906000526020600020905b81548152906001019060200180831161039457829003601f168201915b505050505081565b6103c161187c565b6103c961187c565b6040805160028082526060820183526000926020830190803683370190505090506000816000815181106103ff576103ff61232c565b6020026020010181815250506001816001815181106104205761042061232c565b6020026020010181815250506040518060c001604052806001151581526020016001600581111561045357610453611b82565b815260200160008152602001600181526020016001815260408051808201825260018082526000602083810182905294850192909252938652815160c081018352858152602181850152600481840152600c60608201528251938401909252825260808101919091529060a0820152602083015250919050565b60006104d8826105f1565b6104e157600080fd5b836002846040516104f29190612342565b908152602001604051809103902090805190602001906105139291906118d9565b503360009081526003602090815260409091208551610534928701906118d9565b507fdf285b75c61e111633bd9fdd496ccf9b449555e34d68ea7bf9db18e8f1977c70600185856040516105699392919061235e565b60405180910390a15060019392505050565b6000610586826105f1565b61058f57600080fd5b60016004856040516105a19190612342565b908152604051908190036020018120805492151560ff19909316929092179091557f10a499eb855a3bf46db4fa7a4aa05f939a5d06c8a3a96ad7f4d840ee9817924e906105699086908690612395565b6000610699826105ff6103b9565b6001805461060c906122f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610638906122f1565b80156106855780601f1061065a57610100808354040283529160200191610685565b820191906000526020600020905b81548152906001019060200180831161066857829003601f168201915b505050505085602001518660400151610777565b506001919050565b60018054610338906122f1565b60606002826040516106c09190612342565b908152602001604051809103902080546106d9906122f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610705906122f1565b80156107525780601f1061072757610100808354040283529160200191610752565b820191906000526020600020905b81548152906001019060200180831161073557829003601f168201915b50505050509050919050565b60036020526000908152604090208054610338906122f1565b6107818585610a31565b61078f856020015183610b59565b6107e05760405162461bcd60e51b815260206004820181905260248201527f50726f7669646564206b657920646f65736e2774206d617463682070726f6f6660448201526064015b60405180910390fd5b6107ee856040015182610b59565b6108605760405162461bcd60e51b815260206004820152602260248201527f50726f76696465642076616c756520646f65736e2774206d617463682070726f60448201527f6f6600000000000000000000000000000000000000000000000000000000000060648201526084016107d7565b61087261086c86610b83565b84610b59565b6108e45760405162461bcd60e51b815260206004820152602c60248201527f43616c63756c636174656420726f6f7420646f65736e2774206d61746368207060448201527f726f766964656420726f6f74000000000000000000000000000000000000000060648201526084016107d7565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461091057600080fd5b81516109239060019060208501906118d9565b507fe0b001f59b54160030a2302b411d234315941c6c1d33a52bdb8f3c46a1dffeb8826040516109539190611b6f565b60405180910390a1506001919050565b606061096e82610b83565b92915050565b60006004826040516109869190612342565b9081526040519081900360200190205460ff1692915050565b6060600180546109ae906122f1565b80601f01602080910402602001604051908101604052809291908181526020018280546109da906122f1565b8015610a275780601f106109fc57610100808354040283529160200191610a27565b820191906000526020600020905b815481529060010190602001808311610a0a57829003601f168201915b5050505050905090565b610a3f826060015182610bf2565b60608101511580610a595750806060015182608001515110155b610aa55760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016107d7565b60408101511580610abf5750806040015182608001515110155b610b0b5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f707320646570746820746f6f2073686f7274000000000000000060448201526064016107d7565b60005b826080015151811015610b5457610b4283608001518281518110610b3457610b3461232c565b602002602001015183610e40565b80610b4c816123d0565b915050610b0e565b505050565b60008151835114610b6c5750600061096e565b508151602091820181902091909201919091201490565b60606000610b9e83606001518460200151856040015161100b565b905060005b836080015151811015610beb57610bd784608001518281518110610bc957610bc961232c565b602002602001015183611135565b915080610be3816123d0565b915050610ba3565b5092915050565b8051602001516005811115610c0957610c09611b82565b82602001516005811115610c1f57610c1f611b82565b14610c6c5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016107d7565b8051604001516005811115610c8357610c83611b82565b82604001516005811115610c9957610c99611b82565b14610ce65760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016107d7565b8051606001516005811115610cfd57610cfd611b82565b82606001516005811115610d1357610d13611b82565b14610d605760405162461bcd60e51b815260206004820152601560248201527f556e657870656374656420507265686173684b6579000000000000000000000060448201526064016107d7565b8051608001516008811115610d7757610d77611b82565b82608001516008811115610d8d57610d8d611b82565b14610dda5760405162461bcd60e51b815260206004820152601a60248201527f556e657870656374656c65616653706563204c656e6774684f7000000000000060448201526064016107d7565b610df08260a00151826000015160a001516111e4565b610e3c5760405162461bcd60e51b815260206004820152601760248201527f4c6561664f704c69623a2077726f6e672070726566697800000000000000000060448201526064016107d7565b5050565b8051602001516005811115610e5757610e57611b82565b82602001516005811115610e6d57610e6d611b82565b14610eba5760405162461bcd60e51b815260206004820152601160248201527f556e657870656374656420486173684f7000000000000000000000000000000060448201526064016107d7565b610ed08260400151826000015160a001516111e4565b15610f1d5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f704c69623a2077726f6e6720707265666978000000000000000060448201526064016107d7565b8060200151604001518260400151511015610f7a5760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016107d7565b6020808201519081015190515160009190610f97906001906123eb565b610fa19190612402565b905080826020015160600151610fb79190612421565b8360400151511115610b545760405162461bcd60e51b815260206004820152601860248201527f496e6e65724f702070726566697820746f6f2073686f7274000000000000000060448201526064016107d7565b6060600083511161105e5760405162461bcd60e51b815260206004820152601160248201527f4c656166206f70206e65656473206b657900000000000000000000000000000060448201526064016107d7565b60008251116110af5760405162461bcd60e51b815260206004820152601360248201527f4c656166206f70206e656564732076616c75650000000000000000000000000060448201526064016107d7565b60008460a001516110c986604001518760800151876112a7565b6040516020016110da929190612439565b6040516020818303038152906040526110fc86606001518760800151866112a7565b60405160200161110d929190612439565b604051602081830303815290604052905061112c8560200151826112c4565b95945050505050565b606060008251116111885760405162461bcd60e51b815260206004820152601a60248201527f496e6e6572206f70206e65656473206368696c642076616c756500000000000060448201526064016107d7565b6111dd83602001518460400151846040516020016111a7929190612439565b60408051601f198184030181529082905260608701516111c992602001612439565b6040516020818303038152906040526112c4565b9392505050565b60008151835110156111f85750600061096e565b60005b825181101561129d578281815181106112165761121661232c565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106112555761125561232c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461128b57600091505061096e565b80611295816123d0565b9150506111fb565b5060019392505050565b60606112bc836112b786856114e2565b61150f565b949350505050565b606060018360058111156112da576112da611b82565b141561133f576113386002836040516112f39190612342565b602060405180830381855afa158015611310573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906113339190612468565b6116a3565b905061096e565b600283600581111561135357611353611b82565b14156113a15760405162461bcd60e51b815260206004820152601660248201527f534841353132206e6f7420696d706c656d656e7465640000000000000000000060448201526064016107d7565b60048360058111156113b5576113b5611b82565b1415611409576113386003836040516113ce9190612342565b602060405180830381855afa1580156113eb573d6000803e3d6000fd5b5050506040515160601b6bffffffffffffffffffffffff19166116a3565b600583600581111561141d5761141d611b82565b141561149a5760006002836040516114359190612342565b602060405180830381855afa158015611452573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114759190612468565b90506114926003611485836116a3565b6040516113ce9190612342565b91505061096e565b60405162461bcd60e51b815260206004820152601260248201527f556e737570706f7274656420686173686f70000000000000000000000000000060448201526064016107d7565b606060008360058111156114f8576114f8611b82565b141561150557508061096e565b6111dd83836112c4565b6060600083600881111561152557611525611b82565b141561153257508061096e565b600183600881111561154657611546611b82565b141561157e5761155682516116cd565b82604051602001611568929190612439565b604051602081830303815290604052905061096e565b600783600881111561159257611592611b82565b14156115f05781516020146115e95760405162461bcd60e51b815260206004820152601160248201527f457870656374656420333220627974657300000000000000000000000000000060448201526064016107d7565b508061096e565b600883600881111561160457611604611b82565b141561165b5781516040146115e95760405162461bcd60e51b815260206004820152601160248201527f457870656374656420363420627974657300000000000000000000000000000060448201526064016107d7565b60405162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206c656e6774686f7000000000000000000000000060448201526064016107d7565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b60608160015b607f8267ffffffffffffffff16111561170b5760078267ffffffffffffffff16901c91506001816117049190612481565b90506116d3565b60008167ffffffffffffffff1667ffffffffffffffff811115611730576117306119b8565b6040519080825280601f01601f19166020018201604052801561175a576020820181803683370190505b50905084925060005b8267ffffffffffffffff168167ffffffffffffffff1610156117f85783607f1660801760f81b828267ffffffffffffffff16815181106117a5576117a561232c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060078467ffffffffffffffff16901c935080806117f0906124a4565b915050611763565b507f7f00000000000000000000000000000000000000000000000000000000000000816118266001856124cc565b67ffffffffffffffff16815181106118405761184061232c565b0160200180519091167fff000000000000000000000000000000000000000000000000000000000000001690600082901a905350949350505050565b60408051610140810190915260006080820181815260a0830182905260c0830182905260e0830182905261010083019190915260606101208301528152602081016118c561195d565b815260200160008152602001600081525090565b8280546118e5906122f1565b90600052602060002090601f016020900481019282611907576000855561194d565b82601f1061192057805160ff191683800117855561194d565b8280016001018555821561194d579182015b8281111561194d578251825591602001919060010190611932565b506119599291506119a3565b5090565b6040518060c0016040528060608152602001600081526020016000815260200160008152602001606081526020016000600581111561199e5761199e611b82565b905290565b5b8082111561195957600081556001016119a4565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156119f1576119f16119b8565b60405290565b6040516080810167ffffffffffffffff811182821017156119f1576119f16119b8565b60405160a0810167ffffffffffffffff811182821017156119f1576119f16119b8565b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6657611a666119b8565b604052919050565b600082601f830112611a7f57600080fd5b813567ffffffffffffffff811115611a9957611a996119b8565b611aac601f8201601f1916602001611a3d565b818152846020838601011115611ac157600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611af057600080fd5b813567ffffffffffffffff811115611b0757600080fd5b6112bc84828501611a6e565b60005b83811015611b2e578181015183820152602001611b16565b83811115611b3d576000848401525b50505050565b60008151808452611b5b816020860160208601611b13565b601f01601f19169290920160200192915050565b6020815260006111dd6020830184611b43565b634e487b7160e01b600052602160045260246000fd5b60068110611ba857611ba8611b82565b9052565b805160c080845281519084018190526000916020919082019060e0860190845b81811015611be857835183529284019291840191600101611bcc565b505082850151838701526040850151604087015260608501516060870152608085015192508581036080870152611c1f8184611b43565b9250505060a0830151611c3560a0860182611b98565b509392505050565b6020815260008251608060208401528051151560a08401526020810151611c6760c0850182611b98565b506040810151611c7a60e0850182611b98565b506060810151611c8e610100850182611b98565b50608081015160098110611ca457611ca4611b82565b61012084015260a0015160c0610140840152611cc4610160840182611b43565b90506020840151601f19848303016040850152611ce18282611bac565b91505060408401516060840152606084015160808401528091505092915050565b80358015158114611d1257600080fd5b919050565b803560068110611d1257600080fd5b600060c08284031215611d3857600080fd5b611d406119ce565b9050611d4b82611d02565b8152611d5960208301611d17565b6020820152611d6a60408301611d17565b6040820152611d7b60608301611d17565b6060820152608082013560098110611d9257600080fd5b608082015260a082013567ffffffffffffffff811115611db157600080fd5b611dbd84828501611a6e565b60a08301525092915050565b600067ffffffffffffffff821115611de357611de36119b8565b5060051b60200190565b600082601f830112611dfe57600080fd5b81356020611e13611e0e83611dc9565b611a3d565b82815260059290921b84018101918181019086841115611e3257600080fd5b8286015b84811015611ef657803567ffffffffffffffff80821115611e575760008081fd5b908801906080828b03601f1901811315611e715760008081fd5b611e796119f7565b611e84888501611d02565b81526040611e93818601611d17565b8983015260608086013585811115611eab5760008081fd5b611eb98f8c838a0101611a6e565b8484015250928501359284841115611ed357600091508182fd5b611ee18e8b86890101611a6e565b90830152508652505050918301918301611e36565b509695505050505050565b600060a08284031215611f1357600080fd5b611f1b611a1a565b9050611f2682611d02565b8152602082013567ffffffffffffffff80821115611f4357600080fd5b611f4f85838601611a6e565b60208401526040840135915080821115611f6857600080fd5b611f7485838601611a6e565b60408401526060840135915080821115611f8d57600080fd5b611f9985838601611d26565b60608401526080840135915080821115611fb257600080fd5b50611fbf84828501611ded565b60808301525092915050565b600080600060608486031215611fe057600080fd5b833567ffffffffffffffff80821115611ff857600080fd5b61200487838801611a6e565b9450602086013591508082111561201a57600080fd5b61202687838801611a6e565b9350604086013591508082111561203c57600080fd5b5061204986828701611f01565b9150509250925092565b60006020828403121561206557600080fd5b813567ffffffffffffffff81111561207c57600080fd5b6112bc84828501611f01565b60006020828403121561209a57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146111dd57600080fd5b600082601f8301126120cf57600080fd5b813560206120df611e0e83611dc9565b82815260059290921b840181019181810190868411156120fe57600080fd5b8286015b84811015611ef65780358352918301918301612102565b60006080828403121561212b57600080fd5b6121336119f7565b9050813567ffffffffffffffff8082111561214d57600080fd5b61215985838601611d26565b8352602084013591508082111561216f57600080fd5b9083019060c0828603121561218357600080fd5b61218b6119ce565b82358281111561219a57600080fd5b6121a6878286016120be565b8252506020830135602082015260408301356040820152606083013560608201526080830135828111156121d957600080fd5b6121e587828601611a6e565b6080830152506121f760a08401611d17565b60a0820152806020850152505050604082013560408201526060820135606082015292915050565b600080600080600060a0868803121561223757600080fd5b853567ffffffffffffffff8082111561224f57600080fd5b61225b89838a01611f01565b9650602088013591508082111561227157600080fd5b61227d89838a01612119565b9550604088013591508082111561229357600080fd5b61229f89838a01611a6e565b945060608801359150808211156122b557600080fd5b6122c189838a01611a6e565b935060808801359150808211156122d757600080fd5b506122e488828901611a6e565b9150509295509295909350565b600181811c9082168061230557607f821691505b6020821081141561232657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008251612354818460208701611b13565b9190910192915050565b83151581526060602082015260006123796060830185611b43565b828103604084015261238b8185611b43565b9695505050505050565b6040815260006123a86040830185611b43565b828103602084015261112c8185611b43565b634e487b7160e01b600052601160045260246000fd5b60006000198214156123e4576123e46123ba565b5060010190565b6000828210156123fd576123fd6123ba565b500390565b600081600019048311821515161561241c5761241c6123ba565b500290565b60008219821115612434576124346123ba565b500190565b6000835161244b818460208801611b13565b83519083019061245f818360208801611b13565b01949350505050565b60006020828403121561247a57600080fd5b5051919050565b600067ffffffffffffffff80831681851680830382111561245f5761245f6123ba565b600067ffffffffffffffff808316818114156124c2576124c26123ba565b6001019392505050565b600067ffffffffffffffff838116908316818110156124ed576124ed6123ba565b03939250505056fea264697066735822122021922d1890423f70211b6ba9e0d2962ebcb852af18b06a5adaeea8f8f7f8063f64736f6c634300080b0033";

type AnconProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnconProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnconProtocol__factory extends ContractFactory {
  constructor(...args: AnconProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnconProtocol> {
    return super.deploy(_onlyOwner, overrides || {}) as Promise<AnconProtocol>;
  }
  getDeployTransaction(
    _onlyOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_onlyOwner, overrides || {});
  }
  attach(address: string): AnconProtocol {
    return super.attach(address) as AnconProtocol;
  }
  connect(signer: Signer): AnconProtocol__factory {
    return super.connect(signer) as AnconProtocol__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnconProtocolInterface {
    return new utils.Interface(_abi) as AnconProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnconProtocol {
    return new Contract(address, _abi, signerOrProvider) as AnconProtocol;
  }
}

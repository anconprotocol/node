/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TendermintSpec,
  TendermintSpecInterface,
} from "../TendermintSpec";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "metadataHash",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "CrossMintCallbackReceived",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212203fcb02943729d5600d3193670923904c521c3ec7e754d3860404fbedf4d7d75f64736f6c634300080a0033";

type TendermintSpecConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TendermintSpecConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TendermintSpec__factory extends ContractFactory {
  constructor(...args: TendermintSpecConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TendermintSpec> {
    return super.deploy(overrides || {}) as Promise<TendermintSpec>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TendermintSpec {
    return super.attach(address) as TendermintSpec;
  }
  connect(signer: Signer): TendermintSpec__factory {
    return super.connect(signer) as TendermintSpec__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TendermintSpecInterface {
    return new utils.Interface(_abi) as TendermintSpecInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TendermintSpec {
    return new Contract(address, _abi, signerOrProvider) as TendermintSpec;
  }
}

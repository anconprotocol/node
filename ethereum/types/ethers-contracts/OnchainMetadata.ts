/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OnchainMetadataInterface extends utils.Interface {
  functions: {
    "setOnchainMetadata(string,string,string)": FunctionFragment;
    "registerL2Account(string,bytes,bytes,bytes,uint256[],bytes,bytes,uint256)": FunctionFragment;
    "sum(uint256,uint256)": FunctionFragment;
    "encodeDagjsonBlock(string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setOnchainMetadata",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerL2Account",
    values: [
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish[],
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeDagjsonBlock",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "setOnchainMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerL2Account",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeDagjsonBlock",
    data: BytesLike
  ): Result;

  events: {
    "AddOnchainMetadata(string,string,string,string,string,bytes)": EventFragment;
    "EncodeDagCbor(string,string)": EventFragment;
    "EncodeDagJson(string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOnchainMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncodeDagCbor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncodeDagJson"): EventFragment;
}

export type AddOnchainMetadataEvent = TypedEvent<
  [string, string, string, string, string, string],
  {
    name: string;
    description: string;
    image: string;
    owner: string;
    parent: string;
    sources: string;
  }
>;

export type AddOnchainMetadataEventFilter =
  TypedEventFilter<AddOnchainMetadataEvent>;

export type EncodeDagCborEvent = TypedEvent<
  [string, string],
  { path: string; hexdata: string }
>;

export type EncodeDagCborEventFilter = TypedEventFilter<EncodeDagCborEvent>;

export type EncodeDagJsonEvent = TypedEvent<
  [string, string],
  { path: string; hexdata: string }
>;

export type EncodeDagJsonEventFilter = TypedEventFilter<EncodeDagJsonEvent>;

export interface OnchainMetadata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OnchainMetadataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setOnchainMetadata(
      proofKey: string,
      proofValue: string,
      metadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerL2Account(
      didAddress: string,
      key: BytesLike,
      value: BytesLike,
      _prefix: BytesLike,
      _leafOpUint: BigNumberish[],
      _innerOpPrefix: BytesLike,
      _innerOpSuffix: BytesLike,
      existenceProofInnerOpHash: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sum(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    encodeDagjsonBlock(
      path: string,
      hexdata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  setOnchainMetadata(
    proofKey: string,
    proofValue: string,
    metadataUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerL2Account(
    didAddress: string,
    key: BytesLike,
    value: BytesLike,
    _prefix: BytesLike,
    _leafOpUint: BigNumberish[],
    _innerOpPrefix: BytesLike,
    _innerOpSuffix: BytesLike,
    existenceProofInnerOpHash: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sum(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  encodeDagjsonBlock(
    path: string,
    hexdata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setOnchainMetadata(
      proofKey: string,
      proofValue: string,
      metadataUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerL2Account(
      didAddress: string,
      key: BytesLike,
      value: BytesLike,
      _prefix: BytesLike,
      _leafOpUint: BigNumberish[],
      _innerOpPrefix: BytesLike,
      _innerOpSuffix: BytesLike,
      existenceProofInnerOpHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sum(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeDagjsonBlock(
      path: string,
      hexdata: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddOnchainMetadata(string,string,string,string,string,bytes)"(
      name?: null,
      description?: null,
      image?: null,
      owner?: null,
      parent?: null,
      sources?: null
    ): AddOnchainMetadataEventFilter;
    AddOnchainMetadata(
      name?: null,
      description?: null,
      image?: null,
      owner?: null,
      parent?: null,
      sources?: null
    ): AddOnchainMetadataEventFilter;

    "EncodeDagCbor(string,string)"(
      path?: null,
      hexdata?: null
    ): EncodeDagCborEventFilter;
    EncodeDagCbor(path?: null, hexdata?: null): EncodeDagCborEventFilter;

    "EncodeDagJson(string,string)"(
      path?: null,
      hexdata?: null
    ): EncodeDagJsonEventFilter;
    EncodeDagJson(path?: null, hexdata?: null): EncodeDagJsonEventFilter;
  };

  estimateGas: {
    setOnchainMetadata(
      proofKey: string,
      proofValue: string,
      metadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerL2Account(
      didAddress: string,
      key: BytesLike,
      value: BytesLike,
      _prefix: BytesLike,
      _leafOpUint: BigNumberish[],
      _innerOpPrefix: BytesLike,
      _innerOpSuffix: BytesLike,
      existenceProofInnerOpHash: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sum(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeDagjsonBlock(
      path: string,
      hexdata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setOnchainMetadata(
      proofKey: string,
      proofValue: string,
      metadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerL2Account(
      didAddress: string,
      key: BytesLike,
      value: BytesLike,
      _prefix: BytesLike,
      _leafOpUint: BigNumberish[],
      _innerOpPrefix: BytesLike,
      _innerOpSuffix: BytesLike,
      existenceProofInnerOpHash: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sum(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeDagjsonBlock(
      path: string,
      hexdata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
